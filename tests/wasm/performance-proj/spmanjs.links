fun main() {
var bailout = 16.0;
var max_iterations = 200;

fun loop(cr, ci, zr, zi, i) {
    var i = i + 1;
    var temp = zr *. zi;
    var zr2 = zr *. zr;
    var zi2 = zi *. zi;
    var zr = zr2 -. zi2 +. cr;
    var zi = temp +. temp +. ci;
    if (zi2 +. zr2 > bailout)  i
    else if (i > max_iterations) 0
    else loop(cr, ci, zr, zi, i)
}
fun mandelbrot(x, y) {
  var cr = y -. 0.5;
  var ci = x;
  var zi = 0.0;
  var zr = 0.0;
  var i = 0;
  loop(cr, ci, zr, zi, i)
}
mandelbrot(5.2,1.1)

}

alien javascript "js/impl.js" printInteger: (Int) ~> ();
alien javascript "js/impl.js" printFloat: (Float) ~> ();
alien javascript "js/impl.js" changeInnerHtml_hidden: (String, String) ~> ();
#alien javascript "js/jslib.js" print: (String) ~> String;
fun changeInnerHtml(a, b) {
    changeInnerHtml_hidden(a, b)
}
fun measure() client {
    var _ = for (i <- [0..1000]) {
        var timeBeforeRun = clientTimeMilliseconds();
        var mainResult = main();
        var timeAfterRun = clientTimeMilliseconds();
        var timeElapsed = timeAfterRun - timeBeforeRun;
        var bret = "TimeBefore="^^intToString(timeBeforeRun)^^",TimeAfter="^^intToString(timeAfterRun);
        print(bret);
        [()]
    };
    var timeBeforeRun = clientTimeMilliseconds();
    var mainResult = main();
    var timeAfterRun = clientTimeMilliseconds();
    var timeElapsed = timeAfterRun - timeBeforeRun;
    var ret = "Result = " ^^ intToString(mainResult) ^^ ", time elapsed = " ^^ (intToString(timeElapsed));
    ret
}

fun measureTimes(x) client {
    var timeBeforeRun = clientTimeMilliseconds();
    var _ = for (i <- [1..x-1]) {
        var _ = main(); [()]
    };
    var mainResult = main();
    var timeAfterRun = clientTimeMilliseconds();
    var timeElapsed = timeAfterRun - timeBeforeRun;
    var ret = "Result = " ^^ intToString(mainResult) ^^ ", time elapsed = " ^^ (intToString(timeElapsed));
    print(ret)
}
fun main2() client { var a=3*100*50*2;a }
fun measureTimes2(x) client {
    var timeBeforeRun = clientTimeMilliseconds();
    var _ = for (i <- [1..x-1]) {
        var _ = main2(); [()]
    };
    var mainResult = main2();
    var timeAfterRun = clientTimeMilliseconds();
    var timeElapsed = timeAfterRun - timeBeforeRun;
    var ret = "Result = " ^^ intToString(mainResult) ^^ ", time elapsed = " ^^ (intToString(timeElapsed));
    print(ret)
}
fun m(f) client {
    f(20);
    f(6400);
    f(25600);
    f(102400);
    ()
}
fun t() client {
    m(measureTimes);
    m(measureTimes2);
    ()
}
fun mainPage(_) {
    var l1 = "label1";
    page
    <html>
    <head/>
    <body>
    <p id="label1">unchanged</p>
    <button l:onclick="{t()}">Click me</button>
    </body>
    </html>
}
fun main1() {
    addRoute("/", mainPage);
    addStaticRoute("/js", "js", [("js", "text/javascript")]);
    servePages()
}
main1()
