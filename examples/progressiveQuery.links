fun showProgress(wines) client {
  appendChildren(
        for (w <- wines)
          <li>{stringToXml(w.winery)} {stringToXml(w.name)}
              (${floatToXml(w.cost)})</li>,
        getNodeById("listing")
  );
}

var db = database "winestore";

var inventoryTable = table "inventory" with
                     (wine_id : Int, cost : Float)
                     from db;

var wineTable = table "wine" 
                 with (wine_id : Int, wine_name : String, wine_type : Int,
                       year : Int, winery_id : Int)
                 from db;

var wineryTable = table "winery" with 
                  (winery_id : Int, winery_name : String,
                   region_id : Int)
                  from db;

fun wineriesByRegion(regionID) server {
  query { for (winery <-- wineryTable) 
          where (winery.region_id == regionID)
            [(id=winery.winery_id)]
  }
}

fun wineCost(wineID) {
  for (i <- (for (i <-- inventoryTable) [i]))
  where (wineID == i.wine_id)
    [i.cost]
}

fun wineryByWine(wine) {
  for (winery <- (for (w <-- wineryTable) [w]))
  where (winery.winery_id == wine.winery_id)
    [winery.winery_name]
}

fun winesByWinery(wineryId) {
  query {
    for (wine <-- wineTable)
    where (wine.winery_id == wineryId)
    for (cost <- wineCost(wine.wine_id))
    for (winery <- wineryByWine(wine))
      [(name=wine.wine_name, cost=cost, winery=winery)]
  }
}

fun foreach(xs, f) {
  switch (xs) {
    case [] -> ()
    case x::xs -> { f(x); foreach(xs, f) }
  }
}

fun progressiveSearch(wineries) server {
  foreach(wineriesByRegion(wineries), fun (winery) {
    showProgress(winesByWinery(winery.id))
  });
}

page
 <html>
  <body>
   <form l:onsubmit="{progressiveSearch(stringToInt(regionID))}">
    Region: <input l:name="regionID" />
    <input type="submit"/>
   </form>
   <ul id="listing"/>
  </body>
 </html>
