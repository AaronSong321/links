# helper functions

fun replica(x, y) {
	if (x == 0) []
	else y :: replica(x - 1, y)
}

sig transpose: ([[a]]) ~> [[a]]
fun transpose(xs) {
	switch (xs) {
        case ([]::_) -> []
        case x -> map(hd, x) :: transpose(map(tl, x))
	}
}

# the game 2048
# ported from https://github.com/gregorulm/h2048/blob/master/h2048.hs
typename Grid = [[Int]];

var leftKeyCode = 37;
var rightKeyCode = 39;
var upKeyCode = 38;
var downKeyCode = 40;

var squareSide = 90;

typename Animation = [| Create | Merge | Move | None |];
 
fun start() {
	var (gridprim, _) = addTile(replica(4, [0, 0, 0, 0]));
	#var dispGrid = addTile(replica(4, [(0, None, 0), (0, None, 0), (0, None, 0), (0, None, 0)]));
	addTile(gridprim)
}

fun merge(xs) {
	fun combine(xx) {
		switch (xx) {
			case x::y::xs ->
				if (x == y) {
					(x * 2) :: combine(xs)
				} else {
					x :: combine(y::xs)
				}
			case x -> x
		}

	}

	var merged = combine(filter(fun(x) { not(x == 0) }, xs));
	var padding = replica(length(xs) - length(merged), 0);

	merged ++ padding
}

fun move(m, grid) {
	switch (m) {
		case 37 -> map(merge, grid) # left
		case 39 -> map(compose(reverse, compose(merge, reverse)), grid) # right
		case 38 -> transpose(move(37, transpose(grid))) # up
		case 40 -> transpose(move(39, transpose(grid))) # down
		case _ -> grid
	}
}

fun getZeroes(grid) {
	fun singleRow(n) {
		zip(replica(4, n), [0..3])
	}
 
	var coordinates = concatMap(singleRow, [0..3]);
	filter(fun ((row, col)) { ((grid !! row) !! col) == 0 }, coordinates)
}

fun setSquare(grid, (row, col), val) {
	var pre = take(row, grid);
	var mid = take(col, (grid !! row)) ++ [val] ++ drop((col + 1), (grid !! row));
	var post = drop((row + 1), grid);

	pre ++ [mid] ++ post
}

fun isMoveLeft(grid) {
	var directions = [leftKeyCode, rightKeyCode, upKeyCode, downKeyCode];
	var allChoices = map(compose(length, compose(getZeroes, fun (dir) { move(dir, grid) })), directions);

	sum(allChoices) > 0
}

fun printGrid(grid) client {
	replaceNode(
        <div id="grid">
			{ concatMap(showRow, grid) }
        </div>,
        getNodeById("grid")
	)
}

fun showRow(r) client {
	<div style="clear:both">
		{ showRowHelper(r) }
	</div>
}

fun showRowHelper(r) client {
	for (x <- r)
		<#>
			<div class="{ implode(explode("tile tile-") ++ explode(intToString(x))) }">
			{ if (x == 0) stringToXml("") else stringToXml(intToString(x)) }
			</div>
		</#>
}

fun check2048(grid) {
	not([] == filter(fun (x) { x == 2048 }, concat(grid)))
}

fun addTile(grid) {
	var candidates = getZeroes(grid);
	var pick = choose(candidates);
	var val = choose([2,2,2,2,2,2,2,2,2,4]);
	var newGridprim = setSquare(grid, pick, val);
	(newGridprim, pick)
}

fun choose(xs) {
	var i = floatToInt(random() *. intToFloat(length(xs) - 1));
	xs !! i
}

fun newGrid(grid, msg) {
	var newGridprim = move(msg, grid);
	newGridprim
}

fun animate(old, new, m, (r, c), toMerge, nn) {
	var toShow = map(fun (row) {
		var cols = map(fun (col) {
			var ol = (old !! row) !! col;
			var ne = (new !! row) !! col;
			
			var (left, top, toMerge) =
				#if (nn >= 1)
					if (ol == 0) {
						(0.0, 0.0, (-1, -1))
					} else {
						var oldRow = old !! row;
						switch (m) {
							case 37 ->
								if ((col - 1) >= 0)
									if ((oldRow !! (col - 1)) == 0)
										if ((col - 2) >= 0)
											if ((oldRow !! (col - 2)) == 0)
												if ((col - 3) >= 0)
													if ((oldRow !! (col - 3)) == 0)
														(-.3.0, 0.0, (-1, -1)) #s
													else if ((oldRow !! (col - 3)) == ol)
														(-.2.0, 0.0, (row, col - 3))
													else (-.2.0, 0.0, (-1, -1)) #s
												else (0.0, 0.0, (-1, -1))
											else if ((oldRow !! (col - 2)) == ol)
												(-.1.0, 0.0, (row, col - 2))
											else (-.1.0, 0.0, (-1, -1)) #s
										else (0.0, 0.0, (-1, -1))
									else if ((oldRow !! (col - 1)) == ol)
										(0.0, 0.0, (row, col - 1))
									else (0.0, 0.0, (-1, -1))
								else if ((col - 2) >= 0)
									if ((oldRow !! (col - 2)) == 0)
										if ((col - 3) >= 0)
											if ((oldRow !! (col - 3)) == 0)
												(-.2.0, 0.0, (-1, -1)) #s
											else if ((oldRow !! (col - 3)) == ol)
												(-.2.0, 0.0, (row, col - 3))
											else (-.1.0, 0.0, (-1, -1)) #s
										else (0.0, 0.0, (-1, -1))
									else
										(0.0, 0.0, (-1, -1))
								else if ((col - 3) >= 0)
									if ((oldRow !! (col - 3)) == 0)
										(-.1.0, 0.0, (-1, -1)) #s
									else if ((oldRow !! (col - 3)) == ol)
										(-.1.0, 0.0, (row, col - 3))
									else (0.0, 0.0, (-1, -1))  # right
								else (0.0, 0.0, (-1, -1))
							case 39 ->
								if ((col + 1) <= 3)
									if ((oldRow !! (col + 1)) == 0)
										if ((col + 2) <= 3)
											if ((oldRow !! (col + 2)) == 0)
												if ((col + 3) <= 3)
													if ((oldRow !! (col + 3)) == 0)
														(3.0, 0.0, (-1, -1)) #s
													else if ((oldRow !! (col + 3)) == ol)
														(2.0, 0.0, (row, col + 3))
													else (2.0, 0.0, (-1, -1)) #s
												else (0.0, 0.0, (-1, -1))
											else if ((oldRow !! (col + 2)) == ol)
												(1.0, 0.0, (row, col + 2))
											else (1.0, 0.0, (-1, -1)) #s
										else (0.0, 0.0, (-1, -1))
									else if ((oldRow !! (col + 1)) == ol)
										(0.0, 0.0, (row, col + 1))
									else (0.0, 0.0, (-1, -1))
								else if ((col + 2) <= 3)
									if ((oldRow !! (col + 2)) == 0)
										if ((col + 3) <= 3)
											if ((oldRow !! (col + 3)) == 0)
												(2.0, 0.0, (-1, -1)) #s
											else if ((oldRow !! (col + 3)) == ol)
												(2.0, 0.0, (row, col + 3))
											else (1.0, 0.0, (-1, -1)) #s
										else (0.0, 0.0, (-1, -1))
									else (0.0, 0.0, (-1, -1))
								else if ((col + 3) <= 3)
									if ((oldRow !! (col + 3)) == 0)
										(1.0, 0.0, (-1, -1)) #s
									else if ((oldRow !! (col + 3)) == ol)
										(1.0, 0.0, (row, col + 3))
									else (0.0, 0.0, (-1, -1))  # right
								else (0.0, 0.0, (-1, -1))
							case 38 ->
								if ((col - 1) >= 0)
									if (((old !! (row - 1)) !! (col)) == 0)
										if ((row - 2) >= 0)
											if (((old !! (row - 2)) !! (col)) == 0)
												if ((row - 3) >= 0)
													if (((old !! (row - 3)) !! (col)) == 0)
														(0.0, -.3.0, (-1, -1)) #s
													else if (((old !! (row - 3)) !! (col)) == ol)
														(0.0, -.2.0, (row - 3, col))
													else (0.0, -.2.0, (-1, -1)) #s
												else (0.0, 0.0, (-1, -1))
											else if (((old !! (row - 2)) !! (col)) == ol)
												(0.0, -.1.0, (row - 2, col))
											else (0.0, -.1.0, (-1, -1)) #s
										else (0.0, 0.0, (-1, -1))
									else if (((old !! (row - 1)) !! (col)) == ol)
										(0.0, 0.0, (row - 1, col))
									else (0.0, 0.0, (-1, -1))
								else if ((row - 2) >= 0)
									if (((old !! (row - 2)) !! (col)) == 0)
										if ((row - 3) >= 0)
											if (((old !! (row - 3)) !! (col)) == 0)
												(0.0, -.2.0, (-1, -1)) #s
											else if (((old !! (row - 3)) !! (col)) == ol)
												(0.0, -.2.0, (row - 3, col))
											else (0.0, -.1.0, (-1, -1)) #s
										else (0.0, 0.0, (-1, -1))
									else (0.0, 0.0, (-1, -1))
								else if ((row - 3) >= 0)
									if (((old !! (row - 3)) !! (col)) == 0)
										(0.0, -.1.0, (-1, -1)) #s
									else if (((old !! (row - 3)) !! (col)) == ol)
										(0.0, -.1.0, (row - 3, col))
									else (0.0, 0.0, (-1, -1))  # right
								else (0.0, 0.0, (-1, -1))
							case 40 ->
								if ((row + 1) <= 3)
									if (((old !! (row + 1)) !! (col)) == 0)
										if ((row + 2) <= 3)
											if (((old !! (row + 2)) !! (col)) == 0)
												if ((row + 3) <= 3)
													if (((old !! (row + 3)) !! (col)) == 0)
														(0.0, 3.0, (-1, -1)) #s
													else if (((old !! (row + 3)) !! (col)) == ol)
														(0.0, 2.0, (row + 3, col))
													else (0.0, 2.0, (-1, -1)) #s
												else (0.0, 0.0, (-1, -1))
											else if (((old !! (row + 2)) !! (col)) == ol)
												(0.0, 1.0, (row + 2, col))
											else (0.0, 1.0, (-1, -1)) #s
										else (0.0, 0.0, (-1, -1))
									else if (((old !! (row + 1)) !! (col)) == ol)
										(0.0, 0.0, (row + 1, col))
									else (0.0, 0.0, (-1, -1))
								else if ((row + 2) <= 3)
									if (((old !! (row + 2)) !! (col)) == 0)
										if ((row + 3) <= 3)
											if (((old !! (row + 3)) !! (col)) == 0)
												(0.0, 2.0, (-1, -1)) #s
											else if (((old !! (row + 3)) !! (col)) == ol)
												(0.0, 2.0, (row + 3, col))
											else (0.0, 1.0, (-1, -1)) #s
										else (0.0, 0.0, (-1, -1))
									else (0.0, 0.0, (-1, -1))
								else if ((row + 3) <= 3)
									if (((old !! (row + 3)) !! (col)) == 0)
										(0.0, 1.0, (-1, -1)) #s
									else if (((old !! (row + 3)) !! (col)) == ol)
										(0.0, 1.0, (row + 3, col))
									else (0.0, 0.0, (-1, -1))  # right
								else (0.0, 0.0, (-1, -1))
							case _ -> (0.0, 0.0, (-1, -1))
						}
					};
				#else (0.0, 0.0, (-1, -1));
				#var (left, top) = if (nn >= 1) (left, top) else (0.0, 0.0);

			<div class="{ "tile " ^^ " tile-" ^^ (if (nn <= 0) intToString(ne) else intToString(ol)) }"
				style="{
					"left: " ^^ intToString(floatToInt(left *. 100.0 -. (if (nn < 1) 0.0 else (left *. 100.0 *. 0.1 *. intToFloat(nn))))) ^^ "px;" ^^
					"top: " ^^ intToString(floatToInt(top *. 100.0 -. (if (nn < 1) 0.0 else (top *. 100.0 *. 0.1 *. intToFloat(nn))))) ^^ "px;" ^^
					(#if (nn <= 0)
						if (row == r && col == c)
							"width: " ^^ intToString(50 + (5 - nn) * 2) ^^ "px;" ^^
							"height: " ^^ intToString(50 + (5 - nn) * 2) ^^ "px;" ^^
							"line-height: " ^^ intToString(50 + (5 - nn) * 2) ^^ "px;" ^^
							"margin: " ^^ intToString((50 - (5 - nn) * 2) / 2) ^^ "px " ^^ intToString((50 - (5 - nn) * 2) / 2) ^^ "px;"
						else if (toMerge.1 >= 0) #(row == toMerge.1 && col == toMerge.2)
							"width: " ^^ intToString(100 - (5 - nn) * 2) ^^ "px;" ^^
							"height: " ^^ intToString(100 - (5 - nn) * 2) ^^ "px;" ^^
							"line-height: " ^^ intToString(100 - (5 - nn) * 2) ^^ "px;" ^^
							"margin: " ^^ intToString(((5 - nn) * 2) / 2) ^^ "px " ^^ intToString(((5 - nn) * 2) / 2) ^^ "px;"
						else ""
					)#else "")
				}">
				{
					if (nn <= 0)
						if (ne == 0) stringToXml("") else stringToXml(intToString(ne))
                    else
						if (ol == 0) stringToXml("") else stringToXml(intToString(ol))
				}
			</div>
		}, [0..3]);
	
        <div style="clear:both">
			{ concatMap(id, cols) } 
		</div>
	}, [0..3]);
	
	replaceNode(
		<div id="grid">
			{ concatMap(id, toShow) } 
		</div>,
		getNodeById("grid")
	);

	sleep(0);
	if (nn <= -5) () else animate(old, new, m, (r, c), toMerge, nn - 1);
	()
}

fun gameLoop(grid) {
	printGrid(grid);
	
	if (isMoveLeft(grid)) {
		if (check2048(grid)) {
			replaceNode(<div id="win" class="win-lose">You win!</div>, getNodeById("win"));
			replaceNode(<div id="m" />, getNodeById("n"))
		} else {
			var m = if (haveMail()) recv() else 0;
			var newGridprim = move(m, grid);
			var toMerge = [];
			if (not(grid == newGridprim)) {
				var (new, pick) = addTile(newGridprim);
				animate(grid, new, m, pick, toMerge, 10);
				gameLoop(new)
			} else {
				gameLoop(grid)
			}
		}
	} else {
		replaceNode(<div id="lose" class="win-lose">You lose!</div>, getNodeById("lose"));
		replaceNode(<div id="m" />, getNodeById("n"))
	}
}

fun mesg(str) {
	replaceNode(
        <div id="msg">
			{stringToXml(str)}
        </div>,
        getNodeById("msg")
	)
}

fun main() {
	var (grid, _) = start();
	var gameProc = spawn { gameLoop(grid) };

	page
		<html>
			<head>

            <style>
				body {{
					font-family: "Clear Sans", "Helvetica Neue", "Helvetica", Arial, sans-serif;
					background-color: #faf8ef;
					color: #7f7469;
					text-align: center;
				}}

				#grid-bg {{
					position: relative;
					z-index: 777;
				}}
				#grid {{
					position: relative;
					z-index: 888;
					top: -400px;
					height: 0px;
				}}

				.tile-bg {{
					font-family: "Clear Sans", "Helvetica Neue", "Helvetica", Arial, sans-serif;
					display: inline-block;
					float: left;
					width: 90px;
					height: 90px;
					line-height: 90px;
					font-size: 45px;
					font-weight: bold;
					text-align: center;
					border: #bbada0 5px solid;
					border-radius: 8px;
					vertical-align: middle;
					position: relative;
					z-index: 889;
				}}
            
				.tile {{
					font-family: "Clear Sans", "Helvetica Neue", "Helvetica", Arial, sans-serif;
					display: inline-block;
					float: left;
					width: 90px;
					height: 90px;
					line-height: 90px;
					font-size: 45px;
					font-weight: bold;
					text-align: center;
					border: #bbada0 0px solid;
					border-radius: 4px;
					margin: 5px 5px;
					vertical-align: middle;
					position: relative;
					z-index: 889;
				}}

                .tile-xsmall {{
					width: 70px;
					height: 70px;
					line-height: 70px;
					border: #bbada0 15px solid;
					position: relative;
                }}

                .tile-small {{
					width: 80px;
					height: 80px;
					line-height: 80px;
					border: #bbada0 10px solid;
					position: relative;
                }}

                .tile-xlarge {{
					width: 100px;
					height: 100px;
					line-height: 100px;
					border: #bbada0 0px solid;
					position: relative;
                }}

                .tile-large {{
					width: 94px;
					height: 95px;
					line-height: 95px;
					border: #bbada0 3px solid;
					position: relative;
                }}
				
				.tile-0 {{
					background-color: #cdc0b4;
					z-index: 887;
				}}
				.tile-2 {{
					background-color: #eee4da;
					font-size: 50px;
				}}
				.tile-4 {{
					background-color: #ede0c8;
					font-size: 50px;
				}}
				.tile-8 {{
					background-color: #f2b179;
					color: #f9f6f2;
					font-size: 50px;
				}}
				.tile-16 {{
					background-color: #f59563;
					color: #f9f6f2;
					font-size: 50px;
				}}
				.tile-32 {{
					background-color: #f67c5f;
					color: #f9f6f2;
					font-size: 50px;
				}}
				.tile-64 {{
					background-color: #f65e3b;
					color: #f9f6f2;
					font-size: 50px;
				}}
				.tile-128 {{
					background-color: #edcf72;
					color: #f9f6f2;
					font-size: 40px;
				}}
				.tile-256 {{
					background-color: #edcc61;
					color: #f9f6f2;
					font-size: 40px;
				}}
				.tile-512 {{
					background-color: #edc850;
					color: #f9f6f2;
					font-size: 40px;
				}}
				.tile-1024 {{
					background-color: #edc53f;
					color: #f9f6f2;
					font-size: 30px;
				}}
				.tile-2048 {{
					background-color: #edc22e;
					color: #f9f6f2;
					font-size: 30px;
				}}

				#ultracontainer {{
					width: 450px;
					margin: 0 auto;
				}}

				#supercontainer {{
					border: #bbada0 5px solid;
					background-color: #bbada0;
					border-radius: 10px;
					padding-top: 0px;
					padding-left: 0px;
					width: 400px;
					height: 400px;
					margin: 0 auto;
				}}

				.win-lose {{
					position: absolute;
					top: 270px;
					font-weight: bold;
					color: #f9f6f2;
				}}

				#win {{
					z-index: 1001;
					font-size: 96px;
				}}
				
				#lose {{
					z-index: 1000;
					font-size: 90px;
				}}

				h1 {{
					font-size: 64px;
					margin: 10px auto;
				}}

				#m {{
					width: 410px;
					height: 410px;
					position: absolute;
					margin: -5px -5px;
					border-radius: 10px;
					z-index: 999;
					background-color: #ddb132;
					opacity: 0.5;
				}}
            </style>
			</head>

			<body>
				<div id="ultracontainer"
					tabindex="1"
					l:onkeydown="{ gameProc ! getCharCode(event) }"
					l:onfocus="{mesg("Game on. Use arrow keys.");}"
					l:onblur="{mesg("Click on the board to play.");}">
					<h1>2048 in Links</h1>
					<div id="msg">Click on the board to play.</div>
					<div>The board must be focused for the input to work.</div>
					
					<div id="supercontainer">
						<div id="n" />
						<div id="container">
							<div id="main">
								<div id="lose" class="win-lose"></div>
								<div id="win" class="win-lose"></div>
								<div id="grid-bg"><div style="clear: both;"><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div></div><div style="clear: both;"><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div></div><div style="clear: both;"><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div></div><div style="clear: both;"><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div><div class="tile-bg tile-0"></div></div></div>
								<div id="grid"/>
							</div>
						</div>
					</div>
				</div>
			</body>
		</html>
}

main()
