# Monty Hall

# Construct an uniform distribution from a list of events
fun uniform(xs) {
    var n = length(xs);
    map(fun(x) { (x, 1.0 /. intToFloat(n)) }, xs)
}

fun add(p, ps) {
    var i = first(p);
    var x = second(p);
    switch(ps) {
         case [] -> [(i,x)]
	 case ((j,y) :: ps) -> if (x == y) {
	                           ( (j, y +. x) :: ps )
	                        } else {
				   ( (j, y) :: (add((i,x),ps)) )
				}
    }
}

# Combine several probability distributions into one distribution
fun combine(ds) {
    var scale = fun(r, ps) {
    	map(fun((i, p)) { (i, r *. p) }, ps)
    };

    fold_left(fun(acc, x) {
    		       var d = first(x);
		       var p = second(x);
    		       fold_right(add,
		       scale(p,d), acc)
    }, [], ds)
}

# Computes the distribution of outcomes of a probabilistic computation
var distribution = handler(m) {
    case Choose(ps,k) -> combine(map(fun(e) {
    	 	      	   var x = first(e);
		      	   var p = second(e);
    	 	      	   (k(x), p)
	 	      }, ps))
    case Return(x) -> [(x, 1.0)]
};


# Computes the expected value of a probabiliistic computation
var expectation = handler(m) {
    case Choose(ps,k) -> fold_right(fun(q,e) {
    	 	      	 var x = first(q);
			 var p = second(q);
			 e +. p *. k(x)
		}, 0.0, ps)
    case Return(x) -> x
};

