# Currently, there is a bug in Links' effect system which prevents this example from running
# Coroutines in Links

typename Thread = forall e :: Row . Comp({Spawn:(Thread) {}-> (),Yield:()|e},());

sig start : (Thread) {Spawn:(Thread) {}-> ()|_}~> ()
fun start(m) { do Spawn(m) }

sig yield : Comp({Yield:()|_},())
fun yield()  { do Yield }

sig enqueue : (a, [a]) {}-> [a]
fun enqueue(e,q) {
    q ++ [e]
}

sig dequeue : ([a]) {}-> Maybe((a,[a]))
fun dequeue(q) {
    switch (q) {
    	   case p :: q -> Just((p, q))
	   case other -> Nothing
    }
}

sig scheduler : (Comp({Spawn:(Thread) {}-> (),Yield:()|e}, ())) -> ([Thread]) -> Comp({Spawn{_},Yield{_}|e}, ())
open handler scheduler(m)(q) {
      case Spawn(t : Thread,k) -> { () }
      case Yield(k : Thread)   -> { () }
      case Return(x)  -> x
}

fun comp() {
    start(fun() {
       fold_left(fun(a,b) {
       	   print("a");
	   yield()
	 }, (), [1..6])
    });
    start(fun() {
       fold_left(fun(a,b) {
       	   print("b");
	   yield()
	 }, (), [1..6])                
    })
}
