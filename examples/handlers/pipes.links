# Shallow pipes in Links

#
# Type aliases
#
typename Consumer (e::Row,i,a)   = Comp({Await:i                     |e},  a);
typename Down     (e::Row,i,a)   = (i)  {Await:i                     |e}~> a ;
typename Producer (e::Row,o,a)   = Comp({Yield:(o) {}-> ()           |e},  a);
typename Up       (e::Row,o,a)   = (()) {Yield:(o) {}-> ()           |e}~> a ;
typename Pipe     (e::Row,i,o,a) = Comp({Await:i, Yield:(o) {}-> ()  |e},  a);
#typename Pipe     (e::Row,i,o,a) = forall b :: Presence, c :: Presence . Comp({Await{b},Yield{c} |e}, a)

#
# Operations
#
sig await : Comp({Await:s|_}, s)
fun await() {do Await}

sig yield : (s) {Yield:(s) {}-> ()|_}~> ()
fun yield(s) {do Yield(s)}

sig putString : (String) {PutString:(String) {}-> ()|_}~> ()
fun putString(str) {do PutString(str)}

#
# Operators
#
sig <+< : (Consumer({Yield{c} |e}, s, a),
           Producer({Await{b} |e}, s, a)) -> Comp({Await{b}, Yield{c} |e}, a) # Pipe({Await{b}, Yield{c} |e}, s, s, a)
op consumer <+< producer {
   down(consumer)(fun(_) {producer()})
}

#
# Handlers
#
sig down : (Consumer({Yield{c} |e}, s, a)) ->
           (Up      ({Await{b} |e}, s, a)) -> Comp({Await{b}, Yield{c} |e}, a)
open shallowhandler down(m)(producer) {
  case Return(x) -> x
  case Await(k)  -> up(fun() { producer(()) })(k)()
}

sig up : (Producer({Await{b} |e}, s, a)) ->
         (Down    ({Yield{c} |e}, s, a)) -> Comp({Await{b}, Yield{c} |e}, a)
open shallowhandler up(m)(consumer) {
  case Return(x)  -> x
  case Yield(s,k) -> down(fun() { consumer(s) })(k)()
}

sig printHandler : (Comp({PutString:(String) {}-> ()}, a)) ~> a
shallowhandler printHandler(m) {
  case Return(x)         -> x
  case PutString(str,k)  -> { print(str); printHandler(fun() { k(()) }) }
}

sig printDeepHandler : (Comp({PutString:(String) {}-> ()}, a)) ~> a
handler printDeepHandler(m) {
  case Return(x)         -> x
  case PutString(str,k)  -> { print(str); k(()) }
}

#
# Producers and consumers
#
sig produceFrom : (Int) -> Producer({ |_}, Int, _)
fun produceFrom(n)() {
  yield(n);
  produceFrom(n+1)()
}

sig produceFromTo : (Int, Int) -> Producer({ |_}, Int, ())
fun produceFromTo(start,end)() {
  if (start > end) { () }
  else {
    yield(start);
    produceFromTo(start+1,end)()
  }
}

sig sumTo : (Int)  -> Pipe({ |_}, Int, Int, ())
fun sumTo(limit)() {
  fun sumTo_aux(i, limit) {
    if (i >= limit) { yield(i) }
    else {
      var j = await();
      sumTo_aux(i+j, limit)
    }
  }
  sumTo_aux(0, limit)
}

sig count : Pipe({ |_}, Int, Int, _)
fun count() {
  var n = await();
  yield(n);
  count()
}

sig printer : Consumer({PutString:(String) {}-> () |_}, Int, _)
fun printer() {
  var x = await();
  putString(intToString(x));
  printer()
}

#
# Examples
#
# Finite streams
#   links> printHandler(printer <+< count <+< sumTo(900) <+< produceFromTo(0,100));
#   903
#
#   links> printHandler(printer <+< count <+< sumTo(100) <+< produceFrom(0));
#   105
#
# Infinite streams
#   links> printHandler(printer <+< count <+< produceFrom(0));
#   0
#   1
#   2
#   3
#   4
#   ... etc
#
# Mixing shallow and deep handlers
#   links> printDeepHandler(printer <+< count <+< sumTo(900) <+< produceFromTo(0,100));
#   903
