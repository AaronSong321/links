# Shallow state handlers

sig get : Comp({Get:a |_}, a)
fun get() {do Get}

sig put : (a) {Put:(a) {}-> ()|_}~> ()
fun put(x) {do Put(x) }

sig printLine : (String) {PrintLine:(String) {}-> ()|_}~> ()
fun printLine(str) {do PrintLine(str)}

shallowhandler simpleState(m) {
  case Get(k)    -> fun(s) { simpleState(fun() { k(s)  })(s) }
  case Put(p,k)  -> fun(s) { simpleState(fun() { k(()) })(p) }
  case Return(x) -> fun(s) { x }
}

open shallowhandler forwardState(m)(s) {
  case Get(k)    -> forwardState(fun() { k(s)  })(s)()
  case Put(p,k)  -> forwardState(fun() { k(()) })(p)()
  case Return(x) -> x
}

open shallowhandler printHandler(m) {
  case PrintLine(s, k) -> { print(s);
                            printHandler(fun() { k(()) })()
			  }
  case Return(x)       -> x
}

fun count() {
    var i = get();
    if (i <= 0) {i}
    else {put(i-1); count()}
}
