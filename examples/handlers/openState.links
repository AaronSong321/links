#
# Interpreting stateful computations via open handlers
#

#
# Convenient type alias for stateful computations
#
typename SComp(e::Row, s, a) = Comp({Get:s, Put:(s) {}-> () |e}, a);

#
# Operations
#
sig get : Comp({Get:s |_}, s)
fun get() {do Get}

sig put : (s) {Put:(s) {}-> () |_}~> ()
fun put(s) {do Put(s)}

sig logPut : (s) {LogPut:(s) {}-> () |_}~> ()
fun logPut(s) {do LogPut(s)}

#
# Handlers
#

# Open state handler evalState
sig evalState : (SComp({ |e}, s, a)) -> (s) ~> Comp({Get{_},Put{_} |e}, a)
open handler evalState(m)(s) {
  case Get(k)    -> k(s)(s)
  case Put(s,k)  -> k(())(s)
  case Return(x) -> x
}

# State logging

# The putLogger handle only interprets the Put operation.
# It interprets Put by first logging the operation, and then explicitly forwarding Put to another handler.
sig putLogger : (SComp({LogPut:(s) {}-> ()                        |e}, s, a)) ->
                  Comp({LogPut:(s) {}-> (), Put:(s) {}-> (),Get:s |e}   , a)
open handler putLogger(m) {
     case Put(s,k)  ->  { logPut(s); put(s); k(()) }
     case Return(x) -> x
}

# The putLoggerR interprets LogPut-operation.
# It stores each state change. Ultimately, it returns the final state along with all changes.
sig putLoggerR : (Comp({LogPut:(s) {}-> () |e},  a     )) ->
                  Comp({LogPut{_}          |e}, (a, [s]))
open handler putLoggerR(m) {
     case LogPut(x,k) -> { var s = k(());
                           var xs = second(s);
			   (first(s), (x :: xs))
                         }
     case Return(x)    -> (x, [])			 
}


#
# Stateful counting
#
sig countDownToZero : SComp({ |_}, Int, Int)
fun countDownToZero() {
    var s = get();
    if (s == 0) {s}
    else {
      put(s-1);
      countDownToZero()
    }
}

# links> evalState(countDownToZero)(50)();
# 0 : Int
#
# links> evalState(putLoggerR(putLogger(countDownToZero)))(50)();
# (0, [49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) : (Int, [Int])
