# This file contains a legacy example that wrongly type checked.
# The problem has been resolved.

# The below problem has been fixed. 
 # The following handler gets typed as
 #   (() {Op1:(a) {}-> b}-> b) -> [b]
 # but it *should* have type
 #   (() {Op1:(a) {}-> b}-> b) -> [[b]]
#fun mapk(x) {
#    handle(x) {
#    	      case Op1(p,k)  -> map(k,p)
#	      case Return(x) -> [x]
#    }
#}

# Below function does not type check (correct behaviour!)
#fun mapk2(x) {
#    handle(x) {
#    	      case Op1(p,k)  -> map(k,p)
#	      case Return(x) -> x
#    }
#}

# Below function does not type check (correct behaviour!)
#fun mapk3(x) {
#    handle(x) {
#    	      case Op1(p,k)  -> map(fun(x) {
#	      	   	          [k(x)]
#	      	   	        }, p)
#	      case Return(x) -> [x]		   			       
#    }
#}

# type: () {Op1:([Int]) {}-> Int}-> Int
fun comp() {
    var x = do Op1([1,2,3,4]);
    x `mod` 2
}
