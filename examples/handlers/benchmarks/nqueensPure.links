# N-Queens problem (pure)
fun safe(rows, row) {
    second(fold_left(fun(acc, r) {
      var i = first(acc);
      var b = second(acc) && row <> r && abs(row - r) <> i;
      (i+1, b)
    }, (1,true), rows))
}

fun queensPure(n) { 
    fold_left(fun(rows, _) {
        fold_left(fun(sols, rows) {
           var newSol = for (row <- [1..n]) {
    	 	if (safe(rows, row)) {
		  [row :: rows]
		} else {  
		  []
		}
         };
         sols ++ newSol
        }, [], rows)
    }, [[]], [1..n])
}

fun b(n) {
    var x = queensPure(n);
    ()
}

b(8)