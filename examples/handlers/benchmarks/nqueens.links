# N-Queens problem (handlers)
fun safe(rows, row) {
    second(fold_left(fun(acc, r) {
      var i = first(acc);
      var b = second(acc) && row <> r && abs(row - r) <> i;
      (i+1, b)
    }, (1,true), rows))
}

fun queensAbs(n) {
    fold_left(fun(rows, _) {
        var row = do Choose([1..n]);
        if (safe(rows, row)) {
 	  row :: rows
	} else {  
	  []
	}       
    }, [], [1..n])
}

handler choice(m) {
     case Choose(xs,k) -> 
     {
       var n = length(xs);
       filter(fun(ys) { length(ys) == n },
              fold_left(fun(acc, x) {
       	         acc ++ k(x)
              }, [], xs))
     }                      
     case Return(x) -> [x]
}

fun b(n) {
    var x = choice(fun() { queensAbs(n) });
    ()
}

b(8)
