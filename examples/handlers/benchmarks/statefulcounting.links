# Counting

# Handlers
fun countAbs() {
    var i = do Get();
    if (i == 0) { i }
    else { do Put(i - 1); countAbs() }
}

handler state(m) {
	case Get(_,k)  -> fun(s) { k(s)(s)  }
	case Put(p,k)  -> fun(s) { k(())(p) }
        case Return(x) -> fun(s) { x }
}

fun runState(s0, comp) {
    state(comp)(s0)
}

open handler openState(m) {
     case Get(_,k)  -> fun(s) { k(s)(s) }
     case Put(p,k)  -> fun(s) { k(())(p) }
     case Return(x) -> fun(s) { x }
}

open handler putLogger(m) {
     case Put(p,k)  ->  { do LogPut(p); do Put(p); k(()) }
     case Return(x) -> x
}

open handler putLoggerR(m) {
     case LogPut(x,k) -> { var s = k(());
                           var xs = second(s);
			   var p = first(s);
			   (p, (x :: xs))
                         }
     case Return(x)    -> (x, [])			 
}

handler force(m) {
	case Return(x) -> x
}

fun runStateWithLog(m, s0) {
   var s = force(openState(putLoggerR((putLogger(m)))))(s0);
   0
}

# Pure
fun countPure(i) {
    if (i == 0) {
      i
    } else {
      countPure(i-1)
    }
}

fun countPureLog(i, is) {
    if (i == 0) {
      (i, is)
    } else {
      countPureLog(i-1, (i :: is))
    }
}

fun runPureCount(n) {
    countPure(n)
}

fun runPureCountLog(n) {
    first(countPureLog(n, []))
}