# Direct, hand-coded approach to generate the game tree
fun aliceTurn(n) {
    if (n == 0) {
       Winner(Bob)
    } else {
      var nodes =
      { (if (n >= 3) {
      	 [(1, bobTurn(n-1)), (2, bobTurn(n-2)), (3, bobTurn(n-3))]
	} else if (n >= 2) {
	 [(1, bobTurn(n-1)),(2, bobTurn(n-2))]
	} else {
	 [(1, bobTurn(n-1))]
	})
    };      
    Take(Alice, nodes)
  }
}

fun bobTurn(n) {
    if (n == 0) {
       Winner(Alice)
    } else {
      var nodes =
      { (if (n >= 3) {
      	 [(1, aliceTurn(n-1)), (2, aliceTurn(n-2)), (3, aliceTurn(n-3))]
	} else if (n >= 2) {
	 [(1, aliceTurn(n-1)), (2, aliceTurn(n-2))]
	} else {
	 [(1, aliceTurn(n-1))]
	})
    };
    Take(Bob, nodes)
  }
}

fun b(n) {
    var x = aliceTurn(x);
    ()
}

b(20)
