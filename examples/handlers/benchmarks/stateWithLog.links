# Microbenchmark: Stateful counting with logging (handlers)
open handler openState(m) {
     case Get(_,k)  -> fun(s) { k(s)(s) }
     case Put(p,k)  -> fun(s) { k(())(p) }
     case Return(x) -> fun(s) { x }
}

open handler putLogger(m) {
     case Put(p,k)  ->  { do LogPut(p); do Put(p); k(()) }
     case Return(x) -> x
}

open handler putLoggerR(m) {
     case LogPut(x,k) -> { var s = k(());
                           var xs = second(s);
			   var p = first(s);
			   (p, (x :: xs))
                         }
     case Return(x)    -> (x, [])			 
}

handler force(m) {
	case Return(x) -> x
}

fun runStateWithLog(m, s0) {
   force(openState(putLoggerR((putLogger(m)))))(s0)
}

fun countAbs() {
    var i = do Get();
    if (i == 0) { i }
    else { do Put(i - 1); countAbs() }
}

fun b(n) {
    var x = runStateWithLog(countAbs, n);
    ()
}

b(10^7)
