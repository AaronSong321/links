typename Calc = [&|Add:?Int.?Int.!Int.End, Mul:?Int.?Int.!Int.End|&];

sig calc : (Calc) ~> ()
fun calc(s) {
  offer (s) {
    case Add(s) ->
      var (x,s) = grab(s);
      var (y,s) = grab(s);
      var _ = give(x+y,s);
      ()
    case Mul(s) ->
      var (x,s) = grab(s);
      var (y,s) = grab(s);
      var _ = give(x*y,s);
      ()
  };
}

sig user : (AP(?Int.End), ~Calc) ~> ()
fun user(ap, c) {
  var out = request(ap);
  <| Mul c.c[7].c[6].c(result).out[result].{()} |>
}

fun main() {
  var ap = new ();
# The need to spawn a process here suggests a bug in the desugaring of nu
  <| nu c.(nu s.({calc(s)} | s <-> c) | {ignore(spawn {user(ap,c)})}) |>;
#  <| nu c.(nu s.({calc(s)} | s <-> c) | {user(ap,c)}) |>;
#  <| nu s.(nu c.({user(ap,c)} | s <-> c) | {calc(s)}) |>;
  var r = accept(ap);
  grab(r).1
}

main()
