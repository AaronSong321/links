typename Calc = [&|Add:?Up(Int).?Up(Int).!Up(Int).EndBang, Mul:?Up(Int).?Up(Int).!Up(Int).EndBang|&];

# What to do about "distinguished return" channel?  Mention in quote type?

sig calc : Quote(Calc)
val calc =
  <| s.
     offer(s) {
       case Add -> s(x).down(x,xx).
                   s(y).down(y,yy).
                   s[sum].(up(sum, xx+yy) | s[])
       case Mul -> s(x).down(x,xx).
                   s(y).down(y,yy).
                   s[product].(up(product, xx*yy) | s[]) } |>

sig user : Quote(~Calc, Up(Int))
val user =
  <| s, return. s[Mul].s[six].(up(six, 6) | s[seven].(up(seven, 7) | s(z).return[zz].(z<->zz | s().return[]))) |>;


run return <| nu s.({calc[s]}|{user[s, return]}) |>
