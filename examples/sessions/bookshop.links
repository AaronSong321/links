typename Shop  = mu a.[&|Add:?/\String.a, Checkout:?/\Int.?/\String.EndBang|&];

sig waitForClient : (Shop) ~> EndBang
fun waitForClient(s) client {
  offer(s) {
    case Add(s) ->
      var (item, s) = receive s;
      appendChildren(stringToXml("Book name received: " ^^ down(item)), getNodeById("items"));
      waitForClient(s)

    case Checkout(s) ->
      var (card, s) = receive s;
      appendChildren(stringToXml(", card number received: " ^^ intToString(down(card))), getNodeById("items"));
      var (address, s) = receive s;
      appendChildren(stringToXml(", address received: " ^^ down(address)), getNodeById("items"));
      s
  }
}

sig orderBooks : (~Shop) ~> ()
fun orderBooks(c) client {
  var c = send (up("Alice in Wonderland")) (select Add c);
  var c = send (up("Summerhall Square")) (send (up(8753)) (select Checkout c));
  wait(c);
  ()
}

sig main : () ~> ()
fun main() client {
  orderBooks(fork(waitForClient))
}


page
  <html>
  <head><title>From Academic Papers</title></head>
  <body>
  <form l:onsubmit="{main()}">
  <h3>Example 1 from "Linear type theory for asynchronous session types":</h3>
  <button type="submit">Start communication</button>
  </form>
  <p id="items"></p>
  </body>
  </html>
