sig mailServer : (SMTPServer) ~> EndBang
fun mailServer(s) {
 offer(s) {
   	case EHLO(s) ->
   					var (domain, s) = receive(s);
   					print("S: received domain: " ^^ domain);
   					var s = send("C: Session started successfully.", s);
   					outer(s)
  }
}

fun outer(s) {
  offer(s) {
  	case MAIL(s) ->
  					var (address, s) = receive(s);
  					print("S: received from: " ^^ address);
  					if (valid(address)) {
  						var s = select ACCEPT s;
  						rcptLoop(s)
  					}
  					else {
  						var s = send("S: Invalid address.", select REJECT s);
  						outer(s)
  					}

  	case QUIT(s) -> s
  }
}

fun rcptLoop(s) {
	offer(s) {
		case RCPT(s) ->
						var (recipient, s) = receive(s);
						print("S: received recipient: " ^^ recipient);
						if (valid(recipient)) {
							var s = select ACCEPT s;
							inner(s)
						}
						else {
							var s = send("S: Invalid recipient.", select REJECT s);
							rcptLoop(s)
						}
	}
}


fun inner(s) {
	offer(s) {
		case RCPT(s) ->
						var (recipient, s) = receive(s);
						print("S: received recipient: " ^^ recipient);
						if (valid(recipient)) {
							var s = select ACCEPT s;
							inner(s)
						}
						else {
							var s = send("S: Invalid recipient.", select REJECT s);
							inner(s)
						}
		case DATA(s) ->
						var (message, s) = receive(s);
						print("S: received message: " ^^ message);
						outer(s)
	}
}

# Returns true, if the given String is a valid e-mail address.
sig valid : (String) ~> Bool
fun valid(address) {
	address =~ /.[a-z0-9]+.@.[a-z]+.[a-z]+/ # Regex to match 1+characters/numbers @ 1+characters . 1+characters
}


sig mailClient : (~SMTPServer) ~> ()
fun mailClient(c) {
		# Implement.
}


fun main() {
	mailClient(fork(mailServer))
}

main()
