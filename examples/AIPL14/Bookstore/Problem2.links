typename Shop  = mu a.[&|Add:?String.a, Checkout:?Int.?String.EndBang|&];
typename Friend = !String.EndBang;


sig waitForClient : (Shop) ~> EndBang
fun waitForClient(s) {
  offer(s) {
    case Add(s) ->
      var (item, s) = receive(s);
      print("Book name received: " ^^ item);
      waitForClient(s)

    case Checkout(s) ->
      var (card, s)    = receive(s);
      print("Card number received: " ^^ intToString(card));
      var s = shipper(s);
      s
  }
}


fun shipper(s) 
{
  # Implement
}


sig waitForFriend : (Friend) ~> EndBang
fun waitForFriend(c) 
{
 # Implement
}


sig getFriendBook : (~Friend) ~> (String)
fun getFriendBook(s) 
{
  # Implement
}



sig orderBooks : (~Shop) ~> ()
fun orderBooks(c) {
  # Implement
}


sig main : () ~> ()
fun main() {
  orderBooks(fork(waitForClient))
}

main()