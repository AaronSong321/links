typename Shop  = mu a.[&|Add:?String.a, Checkout:?Int.?String.EndBang|&];
typename Friend = !String.EndBang;


sig waitForClient : (Shop) ~> EndBang
fun waitForClient(s) {
  offer(s) {
    case Add(s) ->
      var (item, s) = receive(s);
      print("Book name received: " ^^ item);
      waitForClient(s)

    case Checkout(s) ->
      var (card, s)    = receive(s);
      print("Card number received: " ^^ intToString(card));
      var s = shipper(s);
      s
  }
}


fun shipper(s) 
{
  var (address, s) = receive(s);
  print("Address received: " ^^ address);
  s
}


sig waitForFriend : (Friend) ~> EndBang
fun waitForFriend(c) 
{
  <| c["Scotland in XX century"].c[] |>
}


sig getFriendBook : (~Friend, !String.EndBang) ~> (EndBang)
fun getFriendBook(s, return) 
{
  <| s(choice).s().return[choice].return[] |>
}



sig orderBooks : (~Shop, !().EndBang) ~> EndBang
fun orderBooks(c, return) {
  <| Add c.c["Alice in Wonderland"]. Add c.c["The Hitchhiker's Guide to the Galaxy"]. {
    var choice = run (fun(return){<| nu s.({waitForFriend(s)}|{getFriendBook(s, return)}) |>}); 
    <| Add c.c[choice].
        Checkout c.c[8753].c["Summerhall Square"].c().return[()].return[] |> } |>
}


sig main : () ~> ()
fun main() {
 run (fun(return){<| nu s.({waitForClient(s)}|{orderBooks(s, return)}) |>})
}

main()







