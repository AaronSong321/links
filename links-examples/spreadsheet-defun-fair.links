var db = database "test" "postgresql" ":5432:test:foobar";
var data = table "s" with (row : Int, col : Int, val : Int) tablekeys [["row", "col"]] from db;

fun sumrow(row)(data) { sum(nth(row, data)) }
fun cell(row, col) (data) { nth(col, nth(row, data)) }
fun const(x)(data) { x }
fun maxrow(row)(data) {
	switch (max(nth(row, data))) {
		case Just(max) -> max
		case Nothing -> 0
	}
}

var ss = [[const(5), cell(2,2), const(123)],
	  [sumrow(1), maxrow(15), sumrow(2)], 
	  [cell(2,1), const(1024), maxrow(80)]];

fun apply(data)(f) { f(data) }

query { 
	var ss = [[Lam1(5), Lam2(2,2), Lam3(123)],
		  [Lam4(1), Lam5(15), Lam6(2)],
		  [Lam7(2,1), Lam8(1024), Lam9(80)]];

	fun apply(fenc, arg) {
		switch (fenc) {
			case Lam1(x) -> x
			case Lam2(row, col) -> nth(col, nth(row, arg))
			case Lam3(x) -> x
			case Lam4(row) -> sum(nth(row, arg))
			case Lam5(row) -> 
				switch (max(nth(row, arg))) {
					case Just(max) -> max
					case Nothing -> 0
				}
			case Lam6(row) -> sum(nth(row, arg))
			case Lam7(row, col) -> nth(col, nth(row, arg))
			case Lam8(x) -> x
			case Lam9(row) -> 
				switch (max(nth(row, arg))) {
					case Just(max) -> max
					case Nothing -> 0
				}
		}
	}
	var rows = nubBase(for (e <-- data) [e.row]);
	var m = for (r <- rows)
			[for (e <-- data) where (e.row == r) orderby (e.row, e.col)
				[e.val]];

	for (row <- ss)
		[for (f <- row)
			[apply(f, m)]]

}


