# 
# Exception handlers
#

# Abstract Fail operation
sig fail : Comp({Fail:a|_}, a)
fun fail() {do Fail}

# Try handler interprets computations that might fail (throw exceptions)
sig try : (Comp({Fail:_},a)) ~> a
handler try(m) {
	case Fail(_)   -> error("An error occurred")
	case Return(x) -> x
}

# Throw a descriptive exception
sig throw : Comp({Exception:(String) {}-> a|_}, a)
fun throw(msg) {do Exception(msg)}

# Try-catch handler interprets computations that might fail
sig tryCatch : (Comp({Exception:(String) {}-> a},a)) ~> a
handler tryCatch(m) {
	case Exception(msg,_) -> error(msg)
	case Return(x)        -> x
}

# The functional approach to exception handling
