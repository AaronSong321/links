typename Toss = [|Heads|Tails|];
typename Maybe(a) = [|Just:a|Nothing|];

fun fail() { switch(do Fail) { } }
fun choose() { do Choose }


### BOILERPLATE
fun boolToString(c) {
  switch (c) {
    case true -> "true"
    case _    -> "false"
  }
}

fun showToss(t) {
   switch(t) {
     case Heads -> "Heads"
     case Tails -> "Tails"
   }
}

fun showMaybe(s)(m) {
   switch (m) {
      case Just(x) -> "Just(" ^^ s(x) ^^ ")"
      case Nothing -> "Nothing"
   }
}
###

### The interesting stuff
sig toss : () {Choose:Bool|_}~> Toss
fun toss() {
  if (do Choose) Heads
  else Tails
}

## Drunk toss
fun drunkToss() {
  if (choose()) toss()
  else fail()
}

## Handlers
fun randomResult(m)() {
  open handle(m) {
     case Choose(k) -> k(random() > 0.5)
     case Return(x) -> x
  }
}

fun maybeResult(m)() {
  open handle(m) {
    case Fail(_)   -> Nothing
    case Return(x) -> Just(x)
  }
}

fun run(m) {
  handle(m) {
    case Return(x) -> x
  }
}

fun persevere(m)() {
  open handle(m) {
    case Return(x) -> x
    case Fail(k)   -> persevere(m)()
  }
}

var show = showMaybe(showToss);

# print(
#   show(
#     run(maybeResult(randomResult(toss)))
#     )
#   )

print(showToss(run(persevere(randomResult(drunkToss)))))
