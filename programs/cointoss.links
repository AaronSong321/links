## Data type modelling a the outcome of a coin toss
typename Toss = [|Heads|Tails|];

## Data type modelling the potential for failure
typename Maybe(a) = [|Just:a|Nothing|];

## The empty type
typename Zero = [||];

## Data type modelling a thunk
typename Comp(e::Row,a) = () ~e~> a;


## Non-deterministic choice operation
sig choose : () {Choose:Bool |_}~> Bool
fun choose() { do Choose }

## Failure (exception) operation
sig fail : () {Fail:Zero |_}~> _
fun fail() { switch(do Fail) { } }


### BOILERPLATE

## Various standard library functions
fun boolToString(c) {
  switch (c) {
    case true -> "true"
    case _    -> "false"
  }
}

fun fold_left(f,acc,xs) {  
  switch(xs) {
    case x :: xs -> fold_left(f, f(acc,x), xs)
    case []      -> acc
  }
}

fun map(f,xs) {
  switch(xs) {
    case x1 :: xs -> f(x1) :: map(f,xs)
    case [] -> []
  }
}

fun intersperse(y, xs) {
   switch (xs) {
     case []      -> []    
     case [x]     -> [x]
     case x :: xs -> x :: y :: intersperse(y,xs)
   }
}

## Various conversion functions
fun showList(showX)(xs) {
  var xs = fold_left(fun (acc, x) { acc ^^ x }
                    , ""
                    , intersperse(",", map(showX, xs)));
  "[" ^^ xs ^^ "]"
}

fun showToss(t) {
   switch(t) {
     case Heads -> "Heads"
     case Tails -> "Tails"
   }
}

fun showMaybe(s)(m) {
   switch (m) {
      case Just(x) -> "Just(" ^^ s(x) ^^ ")"
      case Nothing -> "Nothing"
   }
}
###

### The interesting stuff
## Function modelling a coin toss
sig toss : () {Choose:Bool|_}~> Toss
fun toss() {
  if (choose()) Heads
  else Tails
}

## Different interpretations of Choose
sig randomResult : (Comp({Choose:Bool |e}, a)) -> Comp({Choose{_} |e}, a)
fun randomResult(m)() {
  handle(m) {
     case Return(x) -> x      
     case Choose(k) -> k(random() > 0.5)
  }
}

sig allResults : (Comp({Choose:Bool |e}, a)) -> Comp({Choose{_} |e}, [a])
fun allResults(m)() {
  handle(m) {
     case Return(x) -> [x]
     case Choose(k) -> k(true) ++ k(false)
  }
}

## Function modelling a drunk toss
sig drunkToss : () {Choose:Bool,Fail:Zero|_}~> Toss
fun drunkToss() {
  if (choose()) toss()
  else fail()
}

## Different interpretations of Fail
sig maybeResult : (Comp({Fail:Zero |e}, a)) -> Comp({Fail{_} |e}, Maybe(a))
fun maybeResult(m)() {
  handle(m) {
    case Return(x) -> Just(x)
    case Fail(_)   -> Nothing
  }
}

sig persevere : (Comp({Fail:Zero|e}, a)) -> Comp({Fail{_} |e}, a)
fun persevere(m)() {
  handle(m) {
    case Return(x) -> x
    case Fail(k)   -> persevere(m)()
  }
}

## A silly interpretation of Choose to show that the abstraction is
## not leaky
sig chooseNot : (Comp({Choose:Bool |e}, a)) -> Comp({Choose:Bool |e}, a)
fun chooseNot(m)() {
  handle(m) {
     case Return(x) -> x
     case Choose(k) -> k(not(choose()))
  }
}

## Running a computation
fun run(m) { m() }

fun examples() {
    var showMaybeToss = showMaybe(showToss);

    print ("# examples");
    print("#1 randomResult(toss):");
    var _ = print(showToss(run(randomResult(toss))));
    print("\n#2 allResults(toss):");
    var _ = print(showList(showToss)(run(allResults(toss))));
    
    print("\n#3 maybeResult(randomResult(toss)):");
    var _ = print(showMaybeToss(run(maybeResult(randomResult(toss)))));
    print("\n#4 allResults(maybeResult(toss)):");    
    var _ = print(showList(showMaybeToss)(run(allResults(maybeResult(toss)))));
    print("\n#5 maybeResult(allResults(toss)):");      
    var _ = print(showMaybe(showList(showToss))(run(maybeResult(allResults(toss)))));

    print("\n#6 maybeResult(randomResult(drunkToss)):");
    var _ = print(showMaybe(showToss)(run(maybeResult(randomResult(drunkToss)))));
    print("\n#7 persevere(randomResult(drunkToss)):");    
    var _ = print(showToss(run(persevere(randomResult(drunkToss)))));
    
    print("\n#8 maybeResult(allResults(drunkToss)):");
    var _ = print(showMaybe(showList(showToss))(run(maybeResult(allResults(drunkToss)))));
    print("\n#9 allResults(maybeResult(drunkToss)):");
    var _ = print(showList(showMaybeToss)(run(allResults(maybeResult(drunkToss)))));

    print("\n#10 allResults(chooseNot(toss)):");
    var _ = print(showList(showToss)(run(allResults(chooseNot(toss)))));
    ()
}

examples()
