type token =
  | END
  | EQ
  | IN
  | FUN
  | LINFUN
  | RARROW
  | LOLLI
  | FATRARROW
  | MINUSLBRACE
  | VAR
  | OP
  | SQUIGRARROW
  | SQUIGLOLLI
  | TILDE
  | IF
  | ELSE
  | MINUS
  | MINUSDOT
  | SWITCH
  | RECEIVE
  | CASE
  | SPAWN
  | SPAWNANGEL
  | SPAWNDEMON
  | SPAWNWAIT
  | HANDLE
  | SHALLOWHANDLE
  | OPEN
  | HANDLER
  | SHALLOWHANDLER
  | OFFER
  | SELECT
  | DOOP
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACEBAR
  | BARRBRACE
  | LQUOTE
  | RQUOTE
  | RBRACKET
  | LBRACKET
  | LBRACKETBAR
  | BARRBRACKET
  | LBRACKETPLUSBAR
  | BARPLUSRBRACKET
  | LBRACKETAMPBAR
  | BARAMPRBRACKET
  | LEFTTRIANGLE
  | RIGHTTRIANGLE
  | NU
  | FOR
  | LARROW
  | LLARROW
  | WHERE
  | FORMLET
  | PAGE
  | LRARROW
  | COMMA
  | VBAR
  | DOT
  | DOTDOT
  | COLON
  | COLONCOLON
  | TABLE
  | TABLEHANDLE
  | FROM
  | DATABASE
  | QUERY
  | WITH
  | YIELDS
  | ORDERBY
  | UPDATE
  | DELETE
  | INSERT
  | VALUES
  | SET
  | RETURNING
  | READONLY
  | DEFAULT
  | ESCAPE
  | CLIENT
  | SERVER
  | NATIVE
  | SEMICOLON
  | TRUE
  | FALSE
  | BARBAR
  | AMPAMP
  | UINTEGER of (int)
  | UFLOAT of (float)
  | STRING of (string)
  | CDATA of (string)
  | REGEXREPL of (string)
  | CHAR of (char)
  | VARIABLE of (string)
  | CONSTRUCTOR of (string)
  | KEYWORD of (string)
  | PERCENTVAR of (string)
  | LXML of (string)
  | ENDTAG of (string)
  | RXML
  | SLASHRXML
  | MU
  | FORALL
  | ALIEN
  | SIG
  | INCLUDE
  | BANG
  | QUESTION
  | PERCENT
  | EQUALSTILDE
  | PLUS
  | STAR
  | ALTERNATE
  | SLASH
  | SSLASH
  | CARET
  | DOLLAR
  | RANGE of (char*char)
  | QUOTEDMETA of (string)
  | SLASHFLAGS of (string)
  | UNDERSCORE
  | AS
  | INFIX of ([`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit)
  | INFIXL of ([`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit)
  | INFIXR of ([`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit)
  | PREFIX of ([`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit)
  | POSTFIX of ([`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit)
  | TYPENAME
  | TYPE
  | ROW
  | PRESENCE
  | PREFIXOP of (string)
  | POSTFIXOP of (string)
  | INFIX0 of (string)
  | INFIXL0 of (string)
  | INFIXR0 of (string)
  | INFIX1 of (string)
  | INFIXL1 of (string)
  | INFIXR1 of (string)
  | INFIX2 of (string)
  | INFIXL2 of (string)
  | INFIXR2 of (string)
  | INFIX3 of (string)
  | INFIXL3 of (string)
  | INFIXR3 of (string)
  | INFIX4 of (string)
  | INFIXL4 of (string)
  | INFIXR4 of (string)
  | INFIX5 of (string)
  | INFIXL5 of (string)
  | INFIXR5 of (string)
  | INFIX6 of (string)
  | INFIXL6 of (string)
  | INFIXR6 of (string)
  | INFIX7 of (string)
  | INFIXL7 of (string)
  | INFIXR7 of (string)
  | INFIX8 of (string)
  | INFIXL8 of (string)
  | INFIXR8 of (string)
  | INFIX9 of (string)
  | INFIXL9 of (string)
  | INFIXR9 of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser_links.mly"

open Utility
open List
open Sugartypes

(* Generation of fresh type variables *)

let type_variable_counter = ref 0

let fresh_type_variable : subkind -> datatype =
  function subkind ->
    incr type_variable_counter; `TypeVar ("_" ^ string_of_int (!type_variable_counter), subkind, `Flexible)

let fresh_rigid_type_variable : subkind -> datatype =
  function subkind ->
    incr type_variable_counter; `TypeVar ("_" ^ string_of_int (!type_variable_counter), subkind, `Rigid)

let fresh_row_variable : subkind -> row_var =
  function subkind ->
    incr type_variable_counter; `Open ("_" ^ string_of_int (!type_variable_counter), subkind, `Flexible)

let fresh_rigid_row_variable : subkind -> row_var =
  function subkind ->
    incr type_variable_counter; `Open ("_" ^ string_of_int (!type_variable_counter), subkind, `Rigid)

let fresh_presence_variable : subkind -> fieldspec =
  function subkind ->
    incr type_variable_counter; `Var ("_" ^ string_of_int (!type_variable_counter), subkind, `Flexible)

let fresh_rigid_presence_variable : subkind -> fieldspec =
  function subkind ->
    incr type_variable_counter; `Var ("_" ^ string_of_int (!type_variable_counter), subkind, `Rigid)

let ensure_match (start, finish, _) (opening : string) (closing : string) = function
  | result when opening = closing -> result
  | _ -> raise (ConcreteSyntaxError ("Closing tag '" ^ closing ^ "' does not match start tag '" ^ opening ^ "'.",
                                     (start, finish, None)))

let pos () : Sugartypes.position = Parsing.symbol_start_pos (), Parsing.symbol_end_pos (), None

let default_fixity = 9

let annotate (signame, datatype) : _ -> binding =
  let checksig (signame, _) name =
    if signame <> name then
      raise (ConcreteSyntaxError
               ("Signature for `" ^ signame ^ "' should precede definition of `"
                ^ signame ^ "', not `"^ name ^"'.",
                pos ())) in
    function
      | `Fun ((name, bpos), lin, phrase, location, dpos) ->
          let _ = checksig signame name in
            `Fun ((name, None, bpos), lin, ([], phrase), location, Some datatype), dpos
      | `Var (((name, bpos), phrase, location), dpos) ->
          let _ = checksig signame name in
          `Val ([], (`Variable (name, None, bpos), dpos), phrase, location, Some datatype), dpos
      | `Handler ((name,_,_) as m, spec, hnlit, dpos) ->
	 let _ = checksig signame name in
	 `Handler (m, spec, hnlit, Some datatype), dpos

let primary_kind_of_string pos =
  function
  | "Type" -> `Type
  | "Row" -> `Row
  | "Presence" -> `Presence
  | pk -> raise (ConcreteSyntaxError ("Invalid primary kind: " ^ pk, pos))

let linearity_of_string pos =
  function
  | "Any" -> `Any
  | "Unl" -> `Unl
  | lin -> raise (ConcreteSyntaxError ("Invalid kind linearity: " ^ lin, pos))

let restriction_of_string pos =
  function
  | "Any" -> `Any
  | "Base" -> `Base
  | "Session" -> `Session
  | rest -> raise (ConcreteSyntaxError ("Invalid kind restriction: " ^ rest, pos))

let full_kind_of pos prim lin rest =
  let p = primary_kind_of_string pos prim in
  let l = linearity_of_string pos lin in
  let r = restriction_of_string pos rest in
  p, (l, r)

let full_subkind_of pos lin rest =
  let l = linearity_of_string pos lin in
  let r = restriction_of_string pos rest in
  (l, r)

(* In kind and subkind abbreviations, we aim to provide the most
common case. For everything except session types, the default
linearity is `Unl and the default restriction is `Any. For session
types the default linearity is `Any. *)

(* Currently "Any" means `Any,`Any, but it is probably advisable to
change "Any" to something more evocative of linearity - "Lin"
perhaps. *)

let kind_of pos =
  function
  (* primary kind abbreviation  *)
  | "Type" -> `Type, (`Unl, `Any)
  | "Row" -> `Row, (`Unl, `Any)
  | "Presence" -> `Presence, (`Unl, `Any)
  (* subkind of type abbreviations *)
  | "Any" -> `Type, (`Any, `Any)
  | "Base" -> `Type, (`Unl, `Base)
  | "Session" -> `Type, (`Any, `Session)
  | k -> raise (ConcreteSyntaxError ("Invalid kind: " ^ k, pos))

let subkind_of pos =
  function
  (* subkind abbreviations *)
  | "Any" -> (`Any, `Any)
  | "Base" -> (`Unl, `Base)
  | "Session" -> (`Any, `Session)
  | sk -> raise (ConcreteSyntaxError ("Invalid subkind: " ^ sk, pos))

let attach_kind pos (t, k) = (t, k, `Rigid)

let attach_subkind_helper update pos (l, r) = update l r

let attach_subkind pos (t, subkind) =
  let update lin rest =
    match t with
    | `TypeVar (x, (_linearity, _restriction), freedom) ->
       `TypeVar (x, (lin, rest), freedom)
    | _ -> assert false
  in
    attach_subkind_helper update pos subkind

let attach_session_subkind pos (t, subkind) =
  let update lin rest =
    match t with
    | `TypeVar (x, (_linearity, _restriction), freedom) ->
       `TypeVar (x, (lin, rest), freedom)
    | _ -> assert false
  in
    attach_subkind_helper update pos subkind

let attach_row_subkind pos (r, subkind) =
  let update lin rest =
    match r with
    | `Open (x, (_linearity, _restriction), freedom) ->
       `Open (x, (lin, rest), freedom)
    | _ -> assert false
  in
    attach_subkind_helper update pos subkind

let row_with field (fields, row_var) = field::fields, row_var

(* this preserves 1-tuples *)
let make_tuple pos =
  function
    | [e] -> `RecordLit ([("1", e)], None), pos
    | es -> `TupleLit es, pos

let labels = List.map fst

let parseRegexFlags f =
  let rec asList f i l =
    if (i == String.length f) then
      List.rev l
    else
      asList f (i+1) ((String.get f i)::l) in
    List.map (function 'l' -> `RegexList | 'n' -> `RegexNative | 'g' -> `RegexGlobal) (asList f 0 [])

let datatype d = d, None

# 344 "parser_links.ml"
let yytransl_const = [|
  257 (* END *);
  258 (* EQ *);
  259 (* IN *);
  260 (* FUN *);
  261 (* LINFUN *);
  262 (* RARROW *);
  263 (* LOLLI *);
  264 (* FATRARROW *);
  265 (* MINUSLBRACE *);
  266 (* VAR *);
  267 (* OP *);
  268 (* SQUIGRARROW *);
  269 (* SQUIGLOLLI *);
  270 (* TILDE *);
  271 (* IF *);
  272 (* ELSE *);
  273 (* MINUS *);
  274 (* MINUSDOT *);
  275 (* SWITCH *);
  276 (* RECEIVE *);
  277 (* CASE *);
  278 (* SPAWN *);
  279 (* SPAWNANGEL *);
  280 (* SPAWNDEMON *);
  281 (* SPAWNWAIT *);
  282 (* HANDLE *);
  283 (* SHALLOWHANDLE *);
  284 (* OPEN *);
  285 (* HANDLER *);
  286 (* SHALLOWHANDLER *);
  287 (* OFFER *);
  288 (* SELECT *);
  289 (* DOOP *);
  290 (* LPAREN *);
  291 (* RPAREN *);
  292 (* LBRACE *);
  293 (* RBRACE *);
  294 (* LBRACEBAR *);
  295 (* BARRBRACE *);
  296 (* LQUOTE *);
  297 (* RQUOTE *);
  298 (* RBRACKET *);
  299 (* LBRACKET *);
  300 (* LBRACKETBAR *);
  301 (* BARRBRACKET *);
  302 (* LBRACKETPLUSBAR *);
  303 (* BARPLUSRBRACKET *);
  304 (* LBRACKETAMPBAR *);
  305 (* BARAMPRBRACKET *);
  306 (* LEFTTRIANGLE *);
  307 (* RIGHTTRIANGLE *);
  308 (* NU *);
  309 (* FOR *);
  310 (* LARROW *);
  311 (* LLARROW *);
  312 (* WHERE *);
  313 (* FORMLET *);
  314 (* PAGE *);
  315 (* LRARROW *);
  316 (* COMMA *);
  317 (* VBAR *);
  318 (* DOT *);
  319 (* DOTDOT *);
  320 (* COLON *);
  321 (* COLONCOLON *);
  322 (* TABLE *);
  323 (* TABLEHANDLE *);
  324 (* FROM *);
  325 (* DATABASE *);
  326 (* QUERY *);
  327 (* WITH *);
  328 (* YIELDS *);
  329 (* ORDERBY *);
  330 (* UPDATE *);
  331 (* DELETE *);
  332 (* INSERT *);
  333 (* VALUES *);
  334 (* SET *);
  335 (* RETURNING *);
  336 (* READONLY *);
  337 (* DEFAULT *);
  338 (* ESCAPE *);
  339 (* CLIENT *);
  340 (* SERVER *);
  341 (* NATIVE *);
  342 (* SEMICOLON *);
  343 (* TRUE *);
  344 (* FALSE *);
  345 (* BARBAR *);
  346 (* AMPAMP *);
  359 (* RXML *);
  360 (* SLASHRXML *);
  361 (* MU *);
  362 (* FORALL *);
  363 (* ALIEN *);
  364 (* SIG *);
  365 (* INCLUDE *);
  366 (* BANG *);
  367 (* QUESTION *);
  368 (* PERCENT *);
  369 (* EQUALSTILDE *);
  370 (* PLUS *);
  371 (* STAR *);
  372 (* ALTERNATE *);
  373 (* SLASH *);
  374 (* SSLASH *);
  375 (* CARET *);
  376 (* DOLLAR *);
  380 (* UNDERSCORE *);
  381 (* AS *);
  387 (* TYPENAME *);
  388 (* TYPE *);
  389 (* ROW *);
  390 (* PRESENCE *);
    0|]

let yytransl_block = [|
  347 (* UINTEGER *);
  348 (* UFLOAT *);
  349 (* STRING *);
  350 (* CDATA *);
  351 (* REGEXREPL *);
  352 (* CHAR *);
  353 (* VARIABLE *);
  354 (* CONSTRUCTOR *);
  355 (* KEYWORD *);
  356 (* PERCENTVAR *);
  357 (* LXML *);
  358 (* ENDTAG *);
  377 (* RANGE *);
  378 (* QUOTEDMETA *);
  379 (* SLASHFLAGS *);
  382 (* INFIX *);
  383 (* INFIXL *);
  384 (* INFIXR *);
  385 (* PREFIX *);
  386 (* POSTFIX *);
  391 (* PREFIXOP *);
  392 (* POSTFIXOP *);
  393 (* INFIX0 *);
  394 (* INFIXL0 *);
  395 (* INFIXR0 *);
  396 (* INFIX1 *);
  397 (* INFIXL1 *);
  398 (* INFIXR1 *);
  399 (* INFIX2 *);
  400 (* INFIXL2 *);
  401 (* INFIXR2 *);
  402 (* INFIX3 *);
  403 (* INFIXL3 *);
  404 (* INFIXR3 *);
  405 (* INFIX4 *);
  406 (* INFIXL4 *);
  407 (* INFIXR4 *);
  408 (* INFIX5 *);
  409 (* INFIXL5 *);
  410 (* INFIXR5 *);
  411 (* INFIX6 *);
  412 (* INFIXL6 *);
  413 (* INFIXR6 *);
  414 (* INFIX7 *);
  415 (* INFIXL7 *);
  416 (* INFIXR7 *);
  417 (* INFIX8 *);
  418 (* INFIXL8 *);
  419 (* INFIXR8 *);
  420 (* INFIX9 *);
  421 (* INFIXL9 *);
  422 (* INFIXR9 *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\021\000\024\000\024\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\026\000\022\000\022\000\023\000\
\023\000\027\000\027\000\017\000\018\000\018\000\018\000\018\000\
\018\000\019\000\019\000\028\000\028\000\028\000\028\000\035\000\
\037\000\037\000\030\000\030\000\039\000\040\000\009\000\009\000\
\009\000\009\000\009\000\032\000\033\000\033\000\034\000\044\000\
\044\000\046\000\046\000\047\000\047\000\048\000\048\000\045\000\
\045\000\029\000\029\000\029\000\029\000\029\000\042\000\042\000\
\042\000\042\000\013\000\013\000\013\000\013\000\013\000\013\000\
\012\000\012\000\012\000\012\000\050\000\051\000\052\000\054\000\
\054\000\055\000\055\000\056\000\056\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\036\000\038\000\
\038\000\060\000\060\000\061\000\061\000\062\000\064\000\064\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\065\000\
\065\000\065\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\068\000\068\000\058\000\058\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\070\000\
\070\000\070\000\071\000\071\000\072\000\072\000\072\000\072\000\
\073\000\073\000\074\000\074\000\074\000\075\000\075\000\076\000\
\076\000\076\000\077\000\077\000\077\000\077\000\077\000\078\000\
\078\000\078\000\079\000\079\000\080\000\080\000\080\000\080\000\
\082\000\082\000\083\000\083\000\083\000\084\000\084\000\085\000\
\085\000\085\000\086\000\086\000\087\000\087\000\087\000\088\000\
\088\000\089\000\089\000\089\000\090\000\090\000\091\000\091\000\
\091\000\092\000\092\000\092\000\093\000\093\000\093\000\059\000\
\097\000\098\000\098\000\098\000\014\000\014\000\099\000\099\000\
\015\000\015\000\015\000\015\000\096\000\096\000\096\000\096\000\
\096\000\096\000\100\000\100\000\101\000\101\000\101\000\101\000\
\101\000\101\000\102\000\103\000\103\000\104\000\105\000\105\000\
\105\000\108\000\108\000\063\000\063\000\109\000\107\000\107\000\
\110\000\110\000\110\000\110\000\111\000\112\000\112\000\113\000\
\113\000\114\000\114\000\116\000\116\000\117\000\117\000\118\000\
\094\000\095\000\095\000\115\000\115\000\119\000\119\000\120\000\
\120\000\120\000\121\000\121\000\122\000\122\000\123\000\123\000\
\124\000\124\000\125\000\125\000\126\000\126\000\127\000\127\000\
\128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
\128\000\129\000\129\000\016\000\016\000\016\000\016\000\016\000\
\016\000\130\000\130\000\043\000\057\000\057\000\057\000\057\000\
\057\000\131\000\131\000\020\000\067\000\067\000\001\000\004\000\
\004\000\004\000\135\000\135\000\137\000\137\000\137\000\140\000\
\140\000\140\000\140\000\141\000\141\000\141\000\141\000\133\000\
\133\000\133\000\133\000\134\000\134\000\134\000\134\000\132\000\
\132\000\143\000\143\000\144\000\144\000\144\000\144\000\144\000\
\144\000\144\000\142\000\142\000\146\000\146\000\146\000\146\000\
\146\000\146\000\146\000\146\000\146\000\150\000\150\000\150\000\
\150\000\151\000\152\000\152\000\153\000\153\000\153\000\153\000\
\153\000\149\000\149\000\147\000\147\000\145\000\145\000\156\000\
\156\000\156\000\156\000\156\000\156\000\157\000\157\000\106\000\
\106\000\106\000\106\000\148\000\148\000\148\000\148\000\148\000\
\148\000\160\000\066\000\155\000\155\000\155\000\155\000\161\000\
\161\000\136\000\136\000\136\000\136\000\136\000\136\000\162\000\
\162\000\163\000\163\000\154\000\154\000\154\000\154\000\154\000\
\154\000\154\000\154\000\138\000\138\000\138\000\138\000\158\000\
\158\000\139\000\159\000\081\000\081\000\081\000\164\000\164\000\
\165\000\165\000\165\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\005\000\005\000\
\007\000\007\000\008\000\008\000\166\000\166\000\167\000\167\000\
\168\000\168\000\168\000\171\000\171\000\169\000\169\000\169\000\
\170\000\170\000\170\000\170\000\170\000\172\000\172\000\172\000\
\172\000\172\000\172\000\173\000\173\000\174\000\174\000\175\000\
\175\000\041\000\041\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\001\000\002\000\001\000\002\000\001\000\001\000\004\000\
\003\000\003\000\003\000\000\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\000\000\002\000\
\001\000\001\000\001\000\002\000\006\000\004\000\002\000\003\000\
\002\000\002\000\001\000\001\000\002\000\002\000\001\000\004\000\
\000\000\003\000\000\000\001\000\001\000\001\000\005\000\005\000\
\006\000\005\000\005\000\005\000\004\000\004\000\005\000\000\000\
\003\000\007\000\002\000\006\000\002\000\001\000\002\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\004\000\001\000\
\002\000\000\000\001\000\000\000\001\000\003\000\006\000\006\000\
\003\000\005\000\004\000\003\000\008\000\001\000\002\000\003\000\
\005\000\001\000\003\000\003\000\003\000\003\000\002\000\001\000\
\002\000\000\000\001\000\001\000\001\000\003\000\001\000\002\000\
\003\000\004\000\002\000\005\000\003\000\003\000\005\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\002\000\002\000\002\000\002\000\002\000\
\005\000\007\000\002\000\003\000\002\000\003\000\003\000\001\000\
\002\000\002\000\002\000\001\000\001\000\003\000\002\000\001\000\
\003\000\003\000\001\000\003\000\001\000\003\000\003\000\003\000\
\001\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\003\000\003\000\001\000\003\000\003\000\003\000\003\000\001\000\
\003\000\003\000\001\000\003\000\001\000\003\000\003\000\003\000\
\001\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\003\000\003\000\001\000\003\000\001\000\003\000\003\000\001\000\
\003\000\001\000\003\000\003\000\001\000\003\000\001\000\003\000\
\003\000\001\000\003\000\005\000\001\000\005\000\009\000\001\000\
\001\000\001\000\001\000\002\000\001\000\002\000\005\000\004\000\
\001\000\001\000\002\000\002\000\002\000\003\000\004\000\004\000\
\003\000\005\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\005\000\005\000\007\000\003\000\001\000\003\000\
\007\000\001\000\007\000\001\000\002\000\004\000\000\000\001\000\
\001\000\007\000\004\000\007\000\002\000\001\000\001\000\001\000\
\007\000\000\000\001\000\001\000\003\000\001\000\001\000\003\000\
\003\000\000\000\004\000\000\000\004\000\001\000\004\000\001\000\
\004\000\002\000\001\000\007\000\002\000\000\000\002\000\004\000\
\001\000\002\000\001\000\001\000\001\000\000\000\002\000\000\000\
\001\000\006\000\007\000\008\000\008\000\009\000\009\000\010\000\
\003\000\003\000\001\000\005\000\002\000\004\000\004\000\002\000\
\001\000\001\000\002\000\003\000\003\000\002\000\002\000\001\000\
\001\000\001\000\000\000\001\000\003\000\005\000\002\000\001\000\
\001\000\001\000\002\000\003\000\001\000\002\000\002\000\001\000\
\001\000\002\000\002\000\006\000\004\000\006\000\006\000\004\000\
\004\000\003\000\003\000\004\000\004\000\003\000\003\000\004\000\
\001\000\004\000\001\000\004\000\004\000\003\000\003\000\002\000\
\001\000\001\000\002\000\003\000\001\000\003\000\008\000\003\000\
\003\000\001\000\001\000\001\000\004\000\001\000\001\000\001\000\
\001\000\002\000\001\000\003\000\001\000\004\000\004\000\004\000\
\003\000\001\000\000\000\001\000\003\000\001\000\000\000\001\000\
\003\000\003\000\002\000\002\000\003\000\001\000\002\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\002\000\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\003\000\001\000\
\002\000\001\000\003\000\003\000\002\000\002\000\003\000\001\000\
\002\000\001\000\001\000\002\000\004\000\001\000\003\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\006\000\002\000\002\000\003\000\002\000\005\000\001\000\001\000\
\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\002\000\002\000\002\000\001\000\001\000\003\000\
\001\000\002\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\001\000\002\000\001\000\003\000\001\000\002\000\004\000\
\002\000\003\000\005\000\005\000\003\000\001\000\001\000\001\000\
\002\000\003\000\001\000\001\000\003\000\003\000\005\000\003\000\
\002\000\001\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\137\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\001\000\000\151\001\000\000\
\000\000\000\000\000\000\153\001\152\001\020\002\000\000\104\001\
\105\001\106\001\000\000\129\001\131\001\138\001\000\000\147\001\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\115\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\078\000\079\000\075\000\076\000\077\000\080\000\081\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\000\000\000\000\021\002\036\000\000\000\
\000\000\102\000\082\000\001\000\002\000\000\000\000\000\006\000\
\035\000\000\000\000\000\000\000\000\000\039\000\000\000\163\000\
\083\000\106\000\000\000\181\000\000\000\187\000\000\000\193\000\
\000\000\198\000\000\000\203\000\000\000\000\000\000\000\217\000\
\000\000\222\000\000\000\227\000\000\000\232\000\000\000\237\000\
\000\000\000\000\000\000\023\001\248\000\026\001\033\001\040\001\
\000\000\054\001\056\001\059\001\073\001\100\001\022\002\000\000\
\000\000\136\001\139\001\000\000\179\001\178\001\000\000\000\000\
\000\000\000\000\187\001\000\000\000\000\000\000\000\000\000\000\
\212\001\000\000\213\001\215\001\214\001\216\001\000\000\162\001\
\000\000\190\001\000\000\000\000\177\001\176\001\000\000\000\000\
\166\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\112\001\000\000\
\154\001\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\002\000\000\007\002\045\000\
\000\000\008\002\000\000\000\000\000\000\000\000\249\001\011\002\
\254\001\000\000\000\000\000\000\084\000\000\000\000\000\177\000\
\178\000\000\000\000\000\164\000\165\000\166\000\167\000\000\000\
\000\000\000\000\000\000\000\000\123\000\000\000\000\000\000\000\
\000\000\000\000\131\000\132\000\133\000\134\000\135\000\136\000\
\137\000\138\000\139\000\140\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\
\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\098\001\090\001\000\000\000\000\089\001\000\000\000\000\
\097\001\103\000\000\000\000\000\000\000\000\000\000\000\085\000\
\086\000\000\000\000\000\000\000\000\000\000\000\058\001\000\000\
\000\000\000\000\168\000\000\000\000\000\000\000\000\000\120\000\
\019\000\020\000\017\000\018\000\014\000\015\000\016\000\000\000\
\000\000\249\000\000\000\005\001\000\000\250\000\000\000\000\000\
\253\000\000\000\000\000\000\000\028\000\000\000\179\000\000\000\
\000\000\171\000\162\000\000\000\000\000\003\000\034\000\000\000\
\000\000\005\000\044\000\000\000\031\000\037\000\000\000\038\000\
\033\000\000\000\000\000\038\001\039\001\116\000\117\000\111\000\
\037\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\027\000\000\000\000\000\025\000\026\000\000\000\184\001\
\000\000\206\001\000\000\000\000\186\001\140\001\142\001\000\000\
\000\000\145\001\000\000\193\001\144\001\219\001\000\000\000\000\
\172\001\175\001\134\001\000\000\000\000\135\001\000\000\000\000\
\000\000\000\000\000\000\157\001\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\000\000\000\000\122\001\123\001\126\001\
\127\001\000\000\115\001\000\000\111\001\107\001\000\000\000\000\
\203\001\202\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\017\002\000\000\000\000\000\000\107\000\
\019\002\000\000\108\000\072\000\071\000\073\000\000\000\000\000\
\255\001\001\002\000\000\000\000\000\000\000\000\000\000\009\002\
\000\000\251\001\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\001\000\000\000\000\
\000\000\024\001\182\000\000\000\000\000\000\000\126\000\121\000\
\000\000\125\000\000\000\000\000\000\000\000\000\000\000\088\001\
\092\001\091\001\000\000\000\000\104\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\109\000\000\000\047\001\000\000\
\043\001\000\000\046\001\000\000\000\000\000\000\081\001\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\013\000\000\000\
\000\000\018\001\006\001\013\001\017\001\000\000\000\000\014\001\
\015\001\016\001\252\000\254\000\000\000\000\000\009\001\000\000\
\000\000\000\000\000\000\000\000\173\000\000\000\000\000\172\000\
\000\000\000\000\032\000\000\000\000\000\000\000\110\000\000\000\
\112\000\185\000\186\000\192\000\000\000\191\000\188\000\000\000\
\197\000\194\000\000\000\202\000\199\000\205\000\206\000\207\000\
\000\000\210\000\204\000\000\000\000\000\216\000\211\000\000\000\
\215\000\212\000\000\000\221\000\218\000\000\000\226\000\223\000\
\000\000\231\000\228\000\000\000\236\000\233\000\238\000\000\000\
\000\000\000\000\000\000\009\000\010\000\000\000\024\000\165\001\
\000\000\000\000\000\000\000\000\000\000\000\000\204\001\185\001\
\000\000\182\001\000\000\191\001\173\001\000\000\170\001\000\000\
\000\000\000\000\000\000\000\000\149\001\000\000\128\001\141\001\
\000\000\130\001\065\000\132\001\133\001\218\001\000\000\198\001\
\000\000\108\001\000\000\000\000\201\001\120\001\121\001\124\001\
\125\001\000\000\000\000\016\002\000\000\000\000\000\000\000\000\
\000\000\002\002\000\000\000\000\005\002\000\000\010\002\000\000\
\000\000\000\000\244\001\246\001\248\001\000\000\000\000\000\000\
\035\001\029\001\000\000\122\000\175\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\094\000\000\000\
\093\000\000\000\097\000\000\000\100\000\000\000\000\000\000\000\
\000\000\000\000\057\001\000\000\069\001\071\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\001\
\012\001\000\000\008\001\000\000\000\000\053\000\054\000\000\000\
\000\000\174\000\030\000\042\000\000\000\040\000\113\000\000\000\
\231\001\229\001\223\001\232\001\233\001\228\001\230\001\224\001\
\000\000\000\000\000\000\238\001\221\001\000\000\000\000\000\000\
\008\000\207\001\000\000\208\001\209\001\211\001\210\001\000\000\
\000\000\161\001\000\000\000\000\000\000\156\001\000\000\117\001\
\000\000\000\000\199\001\000\000\196\001\000\000\013\002\047\000\
\048\000\052\000\000\000\000\002\000\000\000\000\000\000\000\000\
\051\000\050\000\000\000\000\000\000\000\000\000\127\000\000\000\
\124\000\086\001\087\001\000\000\105\000\000\000\000\000\091\000\
\000\000\000\000\000\000\000\000\099\000\048\001\049\001\000\000\
\000\000\045\001\000\000\000\000\169\000\000\000\000\000\246\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\001\000\001\
\000\000\000\000\000\000\010\001\000\000\057\000\055\000\118\000\
\000\000\220\001\237\001\236\001\235\001\242\001\000\000\000\000\
\244\000\000\000\205\001\000\000\000\000\158\001\159\001\160\001\
\000\000\000\000\000\000\000\000\000\000\253\001\003\002\000\000\
\004\002\049\000\000\000\000\000\030\001\000\000\102\001\084\001\
\000\000\089\000\098\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\001\000\000\000\000\000\000\074\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\001\255\000\
\003\001\029\000\234\001\240\001\226\001\227\001\000\000\000\000\
\217\001\000\000\000\000\116\001\118\001\119\001\060\000\015\002\
\027\001\034\001\025\001\000\000\000\000\095\000\096\000\000\000\
\000\000\041\001\067\001\068\001\000\000\000\000\060\001\170\000\
\000\000\000\000\082\001\075\001\000\000\000\000\000\000\019\001\
\020\001\000\000\222\001\036\001\143\001\000\000\087\000\000\000\
\051\001\000\000\000\000\066\001\000\000\077\001\000\000\000\000\
\000\000\000\000\058\000\101\000\053\001\064\001\247\000\078\001\
\079\001\000\000\021\001\080\001"

let yydgoto = "\004\000\
\022\000\086\000\143\000\153\000\001\003\002\003\003\003\221\001\
\087\000\088\000\089\000\090\000\091\000\077\001\082\003\035\001\
\144\000\154\001\094\000\036\001\096\000\145\000\156\001\072\001\
\073\001\204\000\157\001\158\001\098\000\100\001\026\001\099\000\
\100\000\037\001\038\001\230\000\107\001\079\002\219\000\245\001\
\205\000\231\001\104\000\068\002\184\000\193\001\174\001\185\000\
\105\000\050\001\051\001\055\003\052\001\056\003\057\003\210\002\
\039\001\027\001\106\000\231\000\112\001\081\002\254\001\108\000\
\028\001\029\001\030\001\090\001\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\102\002\121\000\122\000\123\000\124\000\125\000\126\000\127\000\
\128\000\129\000\130\000\131\000\132\000\031\002\065\003\133\000\
\079\001\080\001\081\001\054\002\055\002\056\002\057\002\058\002\
\134\000\155\000\255\001\135\000\000\002\136\000\137\000\113\001\
\138\000\032\002\129\003\033\002\034\002\035\002\139\000\140\000\
\141\000\068\003\131\003\173\003\174\003\222\002\039\002\142\000\
\075\003\040\001\041\001\024\000\025\000\026\000\196\000\211\001\
\197\000\166\000\203\001\198\000\199\000\027\000\028\000\029\000\
\176\000\030\000\156\000\157\000\167\000\031\000\032\000\189\001\
\190\001\165\001\168\000\177\000\178\000\169\000\170\000\158\000\
\171\000\212\001\213\001\005\003\151\003\220\000\221\000\222\000\
\223\000\224\000\177\002\225\000\222\001\239\001\206\000"

let yysindex = "\231\002\
\101\000\062\018\210\254\000\000\000\000\101\000\250\003\101\000\
\166\255\177\000\177\000\074\255\000\000\180\255\000\000\002\255\
\088\255\101\000\101\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\097\002\000\000\000\000\000\000\229\255\000\000\
\000\000\066\255\066\255\159\255\203\010\025\000\198\023\198\023\
\051\000\082\000\085\000\085\000\085\000\085\000\000\000\102\000\
\042\001\089\000\115\011\170\021\094\022\128\255\175\000\118\000\
\118\000\108\023\005\002\252\255\205\000\210\000\108\023\159\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\219\000\028\002\030\255\168\000\035\024\184\000\000\000\000\000\
\000\000\000\000\000\000\203\000\198\023\000\000\000\000\028\255\
\173\000\000\000\000\000\000\000\000\000\151\255\229\000\000\000\
\000\000\242\000\002\001\096\001\019\001\000\000\067\001\000\000\
\000\000\000\000\000\002\000\000\191\255\000\000\243\254\000\000\
\123\000\000\000\141\000\000\000\063\255\013\001\187\000\000\000\
\030\001\000\000\052\001\000\000\072\001\000\000\123\001\000\000\
\249\000\061\000\089\001\000\000\000\000\000\000\000\000\000\000\
\130\001\000\000\000\000\000\000\000\000\000\000\000\000\210\254\
\194\019\000\000\000\000\224\255\000\000\000\000\000\000\180\255\
\140\001\080\255\000\000\184\001\190\001\136\000\180\001\150\001\
\000\000\080\255\000\000\000\000\000\000\000\000\214\001\000\000\
\229\255\000\000\168\001\224\255\000\000\000\000\080\255\188\001\
\000\000\170\000\212\001\101\000\215\014\204\001\222\001\215\001\
\224\001\229\001\231\001\000\000\101\000\101\000\101\000\101\000\
\133\255\133\255\195\000\000\000\090\001\129\001\000\000\034\255\
\000\000\177\002\000\000\007\002\085\000\007\002\007\002\085\000\
\086\001\041\255\004\003\087\003\000\000\014\002\000\000\000\000\
\066\024\000\000\160\004\248\001\194\001\250\001\000\000\000\000\
\000\000\108\023\007\002\007\002\000\000\067\001\118\001\000\000\
\000\000\108\023\055\002\000\000\000\000\000\000\000\000\108\023\
\108\023\045\002\198\023\198\023\000\000\042\001\000\000\000\000\
\000\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\123\255\000\000\060\002\089\002\106\002\211\255\066\255\066\255\
\160\004\000\000\000\000\046\002\049\002\000\000\100\002\004\022\
\000\000\000\000\033\000\096\002\047\002\170\021\047\002\000\000\
\000\000\070\000\047\002\090\002\160\004\070\002\000\000\072\002\
\005\002\108\023\000\000\160\004\160\004\068\002\143\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\002\
\028\002\000\000\185\255\000\000\104\255\000\000\150\002\104\001\
\000\000\159\255\091\002\092\002\000\000\120\002\000\000\184\022\
\042\001\000\000\000\000\159\255\159\255\000\000\000\000\223\000\
\067\001\000\000\000\000\096\024\000\000\000\000\071\002\000\000\
\000\000\160\004\049\255\000\000\000\000\000\000\000\000\000\000\
\000\000\198\023\198\023\198\023\198\023\198\023\198\023\198\023\
\198\023\198\023\198\023\198\023\198\023\198\023\198\023\198\023\
\198\023\198\023\198\023\124\001\198\023\198\023\198\023\198\023\
\198\023\198\023\198\023\198\023\198\023\198\023\198\023\198\023\
\198\023\198\023\198\023\198\023\198\023\198\023\101\000\108\023\
\000\000\000\000\157\002\194\018\000\000\000\000\229\255\000\000\
\101\000\000\000\108\255\101\000\000\000\000\000\000\000\226\000\
\224\255\000\000\063\002\000\000\000\000\000\000\166\255\229\255\
\000\000\000\000\000\000\177\000\224\255\000\000\103\002\177\000\
\130\002\131\002\132\002\000\000\133\002\107\002\101\000\077\002\
\000\000\101\000\088\255\101\000\101\000\000\000\000\000\000\000\
\000\000\229\255\000\000\229\255\000\000\000\000\133\255\101\000\
\000\000\000\000\139\002\210\001\080\255\101\000\101\000\101\000\
\101\000\079\002\000\000\000\000\121\002\145\002\086\001\000\000\
\000\000\086\001\000\000\000\000\000\000\000\000\180\002\085\002\
\000\000\000\000\000\000\014\002\189\255\183\002\238\255\000\000\
\144\002\000\000\000\000\160\004\086\001\086\001\040\000\159\255\
\160\004\152\002\079\001\156\002\160\004\000\000\155\002\055\002\
\158\002\000\000\000\000\160\002\108\023\042\001\000\000\000\000\
\108\023\000\000\108\023\007\002\007\002\198\002\000\000\000\000\
\000\000\000\000\115\002\108\023\000\000\166\002\169\002\146\002\
\047\002\018\023\047\002\147\002\000\000\012\002\000\000\179\002\
\000\000\159\002\000\000\108\023\101\000\005\002\000\000\193\255\
\161\002\186\002\190\002\058\255\231\023\000\000\000\000\170\021\
\108\023\000\000\000\000\000\000\000\000\116\002\092\000\000\000\
\000\000\000\000\000\000\000\000\187\002\232\255\000\000\162\002\
\101\000\101\000\088\255\232\002\000\000\173\002\200\002\000\000\
\159\255\151\002\000\000\196\002\055\002\079\001\000\000\204\002\
\000\000\000\000\000\000\000\000\076\002\000\000\000\000\080\002\
\000\000\000\000\084\002\000\000\000\000\000\000\000\000\000\000\
\032\255\000\000\000\000\228\000\069\000\000\000\000\000\093\002\
\000\000\000\000\094\002\000\000\000\000\101\002\000\000\000\000\
\105\002\000\000\000\000\109\002\000\000\000\000\000\000\249\000\
\249\000\201\002\221\002\000\000\000\000\000\003\000\000\000\000\
\222\002\101\000\223\002\224\002\225\002\226\002\000\000\000\000\
\229\255\000\000\205\002\000\000\000\000\229\255\000\000\101\000\
\229\002\101\000\177\000\080\255\000\000\215\014\000\000\000\000\
\237\002\000\000\000\000\000\000\000\000\000\000\229\255\000\000\
\144\000\000\000\246\255\133\255\000\000\000\000\000\000\000\000\
\000\000\212\002\160\004\000\000\085\000\085\000\108\023\216\002\
\243\002\000\000\160\004\160\004\000\000\160\004\000\000\086\001\
\085\000\085\000\000\000\000\000\000\000\108\023\244\002\252\002\
\000\000\000\000\245\002\000\000\000\000\247\002\219\002\248\002\
\085\000\085\000\108\023\000\000\242\002\008\003\000\000\253\002\
\000\000\251\002\000\000\246\002\000\000\128\255\108\023\108\023\
\233\002\160\004\000\000\234\002\000\000\000\000\085\000\108\023\
\233\002\233\002\024\255\001\003\028\255\242\255\254\002\000\000\
\000\000\053\000\000\000\194\002\101\000\000\000\000\000\006\003\
\101\000\000\000\000\000\000\000\255\002\000\000\000\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\187\001\182\002\000\000\000\000\185\002\101\000\007\003\
\000\000\000\000\044\003\000\000\000\000\000\000\000\000\166\255\
\240\002\000\000\050\003\051\003\052\003\000\000\005\003\000\000\
\246\255\133\255\000\000\229\255\000\000\011\003\000\000\000\000\
\000\000\000\000\085\002\000\000\055\003\033\003\063\003\085\000\
\000\000\000\000\089\003\055\002\170\021\055\002\000\000\042\001\
\000\000\000\000\000\000\024\003\000\000\013\003\008\003\000\000\
\075\003\128\255\054\003\056\003\000\000\000\000\000\000\085\003\
\049\003\000\000\042\001\058\003\000\000\082\003\053\003\000\000\
\108\023\076\003\100\003\029\000\160\004\198\023\000\000\000\000\
\100\255\096\003\100\255\000\000\057\003\000\000\000\000\000\000\
\109\003\000\000\000\000\000\000\000\000\000\000\069\000\042\255\
\000\000\055\002\000\000\110\003\101\000\000\000\000\000\000\000\
\088\003\113\003\065\255\114\003\112\003\000\000\000\000\042\001\
\000\000\000\000\108\023\115\003\000\000\116\003\000\000\000\000\
\148\003\000\000\000\000\095\003\128\255\128\255\108\023\124\003\
\108\023\230\001\000\000\108\023\085\000\125\003\000\000\081\003\
\042\001\108\023\123\003\131\003\130\003\095\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\132\003\
\000\000\133\003\072\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\128\255\128\255\000\000\000\000\136\003\
\108\023\000\000\000\000\000\000\117\003\230\001\000\000\000\000\
\042\001\079\003\000\000\000\000\093\003\094\003\139\003\000\000\
\000\000\198\023\000\000\000\000\000\000\147\003\000\000\151\003\
\000\000\152\003\042\001\000\000\153\003\000\000\092\003\097\003\
\111\003\105\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\098\003\000\000\000\000"

let yyrindex = "\000\000\
\000\000\044\002\066\019\000\000\000\000\000\000\000\000\000\000\
\146\003\145\003\144\003\000\000\000\000\168\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\024\000\000\000\000\000\000\078\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\002\052\002\
\000\000\244\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\002\049\001\044\002\000\000\000\000\000\000\
\000\000\044\002\000\000\000\000\000\000\000\000\044\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\005\118\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\002\000\000\000\000\230\005\
\154\004\000\000\000\000\000\000\000\000\052\002\000\000\000\000\
\000\000\126\024\000\000\052\002\000\000\000\000\057\255\000\000\
\000\000\000\000\000\000\000\000\050\007\000\000\025\012\000\000\
\089\013\000\000\147\014\000\000\199\015\140\016\186\016\000\000\
\030\008\000\000\200\008\000\000\048\001\000\000\001\002\000\000\
\167\001\159\011\110\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\019\
\044\002\000\000\000\000\000\000\000\000\000\000\038\001\071\255\
\161\003\000\000\000\000\000\000\000\000\162\003\000\000\000\000\
\000\000\199\255\000\000\000\000\000\000\000\000\000\000\000\000\
\068\255\000\000\079\000\000\000\000\000\000\000\083\001\000\000\
\000\000\011\001\000\000\000\000\000\000\000\000\116\255\000\000\
\167\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\110\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\133\000\000\000\000\000\
\196\003\000\000\000\000\000\000\000\000\089\007\000\000\000\000\
\000\000\000\000\000\000\043\010\103\009\254\007\000\000\000\000\
\000\000\044\002\000\000\000\000\000\000\127\001\000\000\000\000\
\000\000\044\002\163\003\000\000\000\000\000\000\000\000\044\002\
\044\002\140\006\211\000\231\000\000\000\000\000\163\008\072\009\
\012\010\208\010\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\164\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\169\255\000\000\000\000\000\000\044\002\
\000\000\000\000\159\003\000\000\000\000\049\001\000\000\000\000\
\000\000\000\000\000\000\000\000\167\003\000\000\000\000\000\000\
\171\006\044\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\118\003\000\000\000\000\000\000\236\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\201\003\000\000\044\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\002\
\108\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\002\052\002\052\002\052\002\052\002\052\002\052\002\
\052\002\052\002\052\002\052\002\052\002\052\002\052\002\052\002\
\052\002\052\002\052\002\000\000\052\002\052\002\052\002\052\002\
\052\002\052\002\052\002\052\002\052\002\052\002\052\002\052\002\
\052\002\052\002\052\002\052\002\052\002\052\002\000\000\044\002\
\000\000\000\000\000\000\044\002\000\000\000\000\171\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\170\003\
\000\000\000\000\000\000\000\000\000\000\173\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\002\000\000\082\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\172\003\189\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\000\000\000\174\003\000\000\
\000\000\174\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\255\093\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\174\003\174\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\003\
\000\000\000\000\000\000\000\000\044\002\000\000\000\000\000\000\
\044\002\000\000\044\002\000\000\000\000\000\000\066\020\000\000\
\000\000\000\000\201\255\044\002\000\000\000\000\000\000\000\000\
\178\003\044\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\211\003\000\000\044\002\000\000\056\012\000\000\000\000\
\000\000\000\000\000\000\000\000\052\002\000\000\000\000\049\001\
\044\002\000\000\000\000\000\000\000\000\000\000\154\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\121\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\185\012\000\000\000\000\246\013\
\000\000\000\000\045\015\000\000\000\000\000\000\000\000\000\000\
\245\015\000\000\000\000\000\000\000\000\000\000\000\000\044\017\
\000\000\000\000\090\017\000\000\000\000\243\010\000\000\000\000\
\136\017\000\000\000\000\241\017\000\000\000\000\000\000\112\009\
\052\010\084\024\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\212\003\000\000\000\000\000\000\000\000\166\001\000\000\000\000\
\000\000\000\000\190\001\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\216\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\002\213\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003\
\000\000\000\000\000\000\000\000\000\000\044\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
\000\000\000\000\044\002\156\020\000\000\217\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\002\044\002\
\246\020\000\000\000\000\181\003\000\000\000\000\000\000\044\002\
\177\003\020\006\000\000\000\000\216\012\190\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\255\051\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\220\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\163\003\128\001\163\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\221\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\080\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\002\224\003\000\000\000\000\000\000\052\002\000\000\000\000\
\222\003\000\000\225\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\156\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\002\000\000\
\044\002\000\000\000\000\044\002\000\000\000\000\000\000\120\013\
\000\000\044\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\002\000\000\000\000\000\000\199\003\215\255\000\000\000\000\
\000\000\000\000\000\000\000\000\120\013\000\000\000\000\000\000\
\000\000\052\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\006\000\197\253\000\000\010\002\248\255\
\186\255\227\002\000\000\210\255\236\255\000\000\101\255\229\003\
\012\005\013\005\000\000\021\000\000\000\129\004\000\000\202\003\
\000\000\041\000\120\003\044\000\000\000\000\000\214\255\174\004\
\183\004\024\000\020\000\004\000\070\255\202\002\000\000\000\000\
\003\000\081\254\066\000\000\000\093\254\000\000\226\255\000\000\
\222\255\022\255\228\001\000\000\087\253\232\001\000\000\000\000\
\213\254\205\255\043\003\002\000\000\000\208\002\019\254\000\000\
\000\000\249\255\015\254\047\004\253\255\052\000\180\003\037\000\
\179\003\054\000\168\003\148\001\166\003\122\000\157\003\142\000\
\000\000\156\003\154\000\183\003\178\000\158\003\047\001\165\003\
\102\001\219\001\235\253\000\000\247\252\062\002\158\000\222\254\
\000\000\000\000\226\003\153\255\000\000\000\000\000\000\000\000\
\000\000\254\255\244\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\002\000\000\000\000\000\000\000\000\
\000\000\000\000\107\001\138\001\000\000\000\000\000\000\000\000\
\176\001\000\000\000\000\127\003\000\000\000\000\000\000\136\253\
\000\000\078\255\073\255\000\000\000\000\152\254\000\000\000\000\
\255\255\067\003\155\003\160\003\000\000\000\000\000\000\170\002\
\000\000\099\255\109\254\149\003\000\000\141\255\142\255\000\000\
\000\000\000\000\000\000\030\253\000\000\000\000\070\003\000\000\
\000\000\082\255\033\002\000\000\064\255\213\001\000\000"

let yytablesize = 6692
let yytable = "\154\000\
\201\000\044\001\023\002\107\000\172\001\103\000\023\000\175\000\
\175\000\179\000\205\001\146\000\057\001\159\000\202\001\204\001\
\218\000\178\001\194\002\241\001\198\002\102\000\095\000\186\000\
\187\000\101\000\230\002\140\002\217\000\102\001\090\003\155\002\
\159\001\160\001\084\001\232\000\233\000\208\000\064\001\242\001\
\053\002\006\003\027\003\251\001\061\003\097\000\241\000\173\002\
\126\001\127\001\174\002\116\001\107\000\107\000\107\000\103\000\
\176\001\177\001\073\003\107\000\177\001\088\001\078\000\136\003\
\107\000\052\000\022\002\218\001\024\002\185\002\186\002\025\001\
\028\002\043\001\232\001\207\000\209\000\052\000\056\001\126\001\
\127\001\087\001\202\000\062\001\077\002\239\001\152\002\176\001\
\241\001\089\001\041\000\227\002\041\000\006\002\176\001\245\002\
\162\001\097\001\182\000\202\000\228\002\157\003\189\001\097\001\
\063\001\148\001\176\001\180\000\236\000\237\000\238\000\239\000\
\189\001\102\000\149\000\163\001\150\000\083\001\006\002\104\001\
\173\000\174\000\006\002\006\002\129\002\059\001\074\001\250\001\
\181\003\200\000\148\001\219\001\075\001\076\001\176\001\052\000\
\149\003\095\001\233\001\052\000\078\001\128\001\152\002\164\001\
\124\003\203\000\107\000\117\001\103\000\118\001\062\000\119\001\
\250\001\041\000\092\001\093\001\250\001\250\001\045\001\240\002\
\106\003\037\000\203\000\046\001\102\000\155\001\073\002\239\001\
\101\000\241\001\241\001\130\002\128\001\239\001\244\001\062\000\
\241\001\062\000\047\000\047\001\187\003\218\000\005\002\006\002\
\183\000\183\001\188\001\131\001\089\003\096\001\218\000\218\000\
\081\003\006\002\198\001\199\001\200\001\201\001\218\000\160\000\
\074\001\064\000\237\001\238\001\131\002\096\001\223\001\132\002\
\225\001\226\001\246\001\166\003\167\003\181\000\129\001\064\001\
\130\001\250\001\131\001\133\002\048\002\094\001\049\002\178\002\
\048\001\049\001\242\000\107\000\064\000\161\000\208\000\134\002\
\163\000\192\001\223\002\107\000\094\001\094\001\004\002\232\000\
\233\000\107\000\107\000\192\001\164\000\010\002\250\001\077\003\
\179\002\078\003\191\003\192\003\224\002\242\000\252\001\203\000\
\165\000\160\000\077\000\192\001\001\002\002\002\161\000\162\000\
\040\003\163\000\038\002\048\002\218\000\049\002\224\001\011\002\
\181\002\227\001\065\001\242\000\053\002\164\000\050\002\160\002\
\014\002\102\001\065\001\053\002\159\002\075\000\051\002\052\000\
\218\000\165\000\208\000\148\003\071\002\200\000\058\001\218\000\
\218\000\107\000\182\002\103\000\030\002\188\000\209\002\107\000\
\213\002\103\000\207\001\041\002\041\002\137\002\138\002\165\002\
\142\003\074\002\226\000\107\000\019\002\242\001\119\003\139\003\
\161\000\142\002\143\002\163\000\101\001\050\002\014\002\012\002\
\013\002\007\000\149\001\150\001\075\000\235\002\040\002\164\000\
\059\000\072\002\008\000\009\000\234\000\218\000\209\001\210\001\
\052\000\107\000\140\003\165\000\005\002\080\003\101\001\020\002\
\014\002\076\002\114\001\097\001\115\001\005\000\248\002\025\002\
\052\000\059\000\012\000\059\000\070\002\080\002\082\002\012\002\
\026\002\188\001\006\000\104\001\152\003\235\000\012\002\149\000\
\052\000\150\000\064\002\188\001\100\003\173\000\174\000\048\002\
\027\002\049\002\249\002\185\003\251\002\207\000\007\000\240\000\
\013\000\014\000\000\003\015\000\052\002\211\003\059\002\008\000\
\009\000\081\003\010\000\078\002\011\000\149\001\150\001\020\000\
\084\002\107\000\086\002\176\000\122\002\107\000\090\002\103\000\
\154\000\250\002\176\000\021\000\202\003\186\003\083\002\012\000\
\018\002\135\002\087\002\158\002\123\002\158\002\089\002\102\000\
\126\002\175\000\093\002\101\000\024\003\175\000\145\002\149\001\
\150\001\050\002\242\000\252\002\253\002\254\002\255\002\197\003\
\075\000\149\001\150\001\168\001\169\001\013\000\014\000\154\002\
\015\000\156\002\157\002\025\003\026\003\016\000\017\000\233\002\
\053\001\197\002\018\000\019\000\020\000\161\002\236\002\018\002\
\018\002\018\002\075\000\166\002\167\002\168\002\169\002\218\000\
\021\000\200\001\092\001\093\001\218\000\180\001\181\001\206\001\
\218\000\037\000\031\003\184\002\029\003\172\000\060\001\114\000\
\114\000\028\003\037\003\061\001\192\002\128\000\021\003\221\002\
\200\001\200\001\047\000\098\002\051\000\080\002\103\002\207\001\
\106\002\117\003\208\001\114\000\114\000\248\002\107\000\052\000\
\082\001\129\000\107\000\149\000\107\000\150\000\201\002\202\002\
\225\001\173\000\174\000\105\002\085\001\107\000\225\001\109\002\
\120\001\070\002\121\001\107\000\122\001\199\002\148\000\200\002\
\188\002\249\002\108\002\209\001\210\001\107\000\112\002\123\001\
\205\002\124\001\220\002\125\001\086\001\168\001\212\002\168\001\
\229\000\107\000\107\000\103\000\091\001\229\000\177\001\229\000\
\219\002\168\001\098\001\168\001\149\000\111\002\150\000\229\000\
\250\002\115\002\173\000\174\000\229\000\231\002\238\002\239\002\
\150\001\177\001\114\000\114\000\099\001\114\000\114\000\133\001\
\080\002\134\001\229\000\135\001\229\000\099\001\229\000\101\001\
\251\002\229\000\252\002\253\002\254\002\255\002\000\003\214\001\
\215\001\150\001\108\003\092\001\093\001\177\001\150\001\107\003\
\105\001\036\000\037\000\229\000\229\000\106\001\229\000\229\000\
\202\000\078\002\077\002\109\001\109\001\174\001\229\000\174\001\
\052\002\113\001\113\001\047\000\229\000\132\001\229\000\052\002\
\158\002\174\001\148\001\174\001\149\000\229\000\150\000\011\003\
\229\000\229\000\173\000\174\000\216\001\217\001\174\001\174\001\
\175\000\020\003\110\001\111\001\099\001\017\003\218\000\019\003\
\151\001\114\000\114\000\188\001\114\000\114\000\218\000\218\000\
\041\000\218\000\041\000\152\001\099\001\004\003\004\003\239\000\
\228\001\229\001\230\001\038\003\239\000\039\003\239\000\136\001\
\107\000\137\001\171\001\138\001\171\001\143\003\239\000\145\003\
\229\000\229\000\229\000\239\000\229\000\114\002\171\001\107\000\
\171\001\118\002\139\001\034\003\140\001\218\000\141\001\161\001\
\169\001\239\000\169\001\239\000\107\000\239\000\062\002\063\002\
\239\000\030\002\043\003\142\001\169\001\143\001\169\001\144\001\
\107\000\107\000\166\001\074\003\248\002\170\001\052\000\052\003\
\167\001\107\000\239\000\239\000\175\001\239\000\239\000\001\000\
\002\000\003\000\179\001\062\003\063\003\239\000\032\003\033\003\
\100\002\101\002\085\003\239\000\070\003\239\000\087\003\117\002\
\249\002\119\002\041\003\042\003\239\000\158\002\171\001\239\000\
\239\000\234\000\173\001\145\001\182\001\146\001\234\000\147\001\
\234\000\191\001\050\003\051\003\097\003\163\002\164\002\092\002\
\234\000\094\002\095\002\096\002\194\001\234\000\099\002\250\002\
\229\000\108\001\109\001\195\001\110\001\111\001\192\001\116\003\
\069\003\118\003\196\001\234\000\197\001\234\000\051\000\234\000\
\202\000\091\003\234\000\083\003\092\003\093\003\107\000\211\000\
\103\000\252\002\253\002\254\002\255\002\171\003\172\003\247\001\
\218\000\004\003\249\001\130\003\234\000\234\000\248\001\234\000\
\234\000\215\002\216\002\004\003\141\003\114\000\114\000\234\000\
\114\000\114\000\107\000\253\001\158\002\234\000\088\001\234\000\
\114\000\114\000\251\000\251\000\114\001\114\001\234\000\110\001\
\110\001\234\000\234\000\066\000\067\000\135\003\007\002\068\000\
\069\000\070\000\054\001\055\001\071\000\072\000\189\000\190\000\
\238\001\114\003\154\003\009\002\191\000\192\000\193\000\120\002\
\121\002\194\000\065\001\066\001\107\000\194\003\067\001\068\001\
\069\001\042\002\043\002\008\002\070\001\071\001\071\003\072\003\
\107\000\074\003\107\000\015\002\195\000\107\000\016\002\161\003\
\017\002\021\002\234\000\107\000\029\002\036\002\037\002\048\001\
\044\002\045\002\083\003\168\003\083\003\170\003\046\002\061\002\
\175\003\067\002\065\002\066\002\075\002\124\002\180\003\139\002\
\004\003\150\003\144\002\146\002\147\002\148\002\150\002\149\002\
\148\001\148\001\107\000\148\001\148\001\148\001\153\002\162\002\
\170\002\148\001\148\001\172\002\171\002\175\002\176\002\148\001\
\180\002\183\002\190\002\130\003\148\001\070\002\191\002\193\002\
\195\002\210\000\196\002\148\001\148\001\148\001\176\003\203\002\
\204\002\206\002\148\001\148\001\148\001\207\002\148\001\208\002\
\214\002\148\001\211\000\220\001\148\001\217\002\148\001\216\002\
\148\001\232\002\218\002\212\000\225\002\148\001\148\001\148\001\
\226\002\237\002\234\002\148\001\148\001\148\001\148\001\148\001\
\005\002\241\002\242\002\148\001\243\002\244\002\148\001\077\002\
\119\001\122\001\125\001\138\001\148\001\135\001\148\001\141\001\
\144\001\147\001\148\001\148\001\148\001\148\001\007\003\008\003\
\009\003\045\003\010\003\012\003\013\003\014\003\015\003\066\000\
\067\000\018\003\016\003\068\000\069\000\070\000\023\003\030\003\
\071\000\213\000\214\000\035\003\210\000\036\003\048\003\044\003\
\046\003\047\003\049\003\053\003\054\003\059\003\058\003\060\003\
\064\003\067\003\076\003\088\003\079\003\211\000\234\001\084\003\
\086\003\095\003\098\003\101\003\215\000\096\003\212\000\148\001\
\148\001\148\001\148\001\148\001\148\001\148\001\148\001\148\001\
\148\001\148\001\148\001\148\001\148\001\148\001\148\001\148\001\
\148\001\148\001\148\001\148\001\148\001\148\001\148\001\148\001\
\148\001\148\001\148\001\148\001\148\001\148\001\146\001\146\001\
\099\003\146\001\146\001\146\001\102\003\103\003\104\003\146\001\
\146\001\111\003\066\000\067\000\112\003\146\001\247\000\069\000\
\248\000\113\003\146\001\071\000\235\001\236\001\105\003\210\000\
\115\003\146\001\146\001\146\001\109\003\120\003\049\001\123\003\
\146\001\146\001\146\001\125\003\146\001\126\003\127\003\146\001\
\211\000\128\003\146\001\133\003\146\001\132\003\146\001\215\000\
\240\001\212\000\134\003\146\001\146\001\146\001\138\003\137\003\
\144\003\146\001\146\001\146\001\146\001\146\001\146\003\147\003\
\153\003\146\001\159\003\155\003\146\001\156\003\158\003\162\003\
\163\003\164\003\146\001\165\003\146\001\169\003\177\003\178\003\
\146\001\146\001\146\001\146\001\182\003\183\003\184\003\189\003\
\188\003\190\003\193\003\199\003\200\003\066\000\067\000\198\003\
\195\003\068\000\069\000\070\000\201\003\203\003\071\000\213\000\
\214\000\204\003\205\003\207\003\208\003\210\003\163\001\167\001\
\167\001\209\003\212\003\164\001\180\001\074\000\176\000\031\001\
\176\000\042\001\056\000\012\000\041\000\183\001\167\001\155\001\
\194\001\074\000\215\000\028\001\092\000\146\001\146\001\146\001\
\146\001\146\001\146\001\146\001\146\001\146\001\146\001\146\001\
\146\001\146\001\146\001\146\001\146\001\146\001\146\001\146\001\
\146\001\146\001\146\001\146\001\146\001\146\001\146\001\146\001\
\146\001\146\001\146\001\146\001\084\000\044\001\181\001\252\001\
\062\001\084\000\005\000\084\000\197\001\090\000\050\001\011\001\
\195\001\088\000\083\001\084\000\084\000\084\000\002\001\006\000\
\084\000\001\001\063\001\094\003\018\002\092\000\093\000\229\002\
\153\001\103\001\047\002\127\002\096\001\084\000\084\000\246\002\
\084\000\121\003\084\000\007\000\147\000\084\000\122\003\247\002\
\003\002\104\002\091\002\107\002\008\000\009\000\097\002\010\000\
\085\002\011\000\088\002\113\002\066\003\206\003\060\002\084\000\
\084\000\084\000\084\000\084\000\084\000\116\002\148\000\196\003\
\179\003\187\002\084\000\128\002\012\000\151\002\189\002\022\003\
\084\000\110\002\084\000\110\003\160\003\000\000\000\000\136\002\
\141\002\084\000\000\000\000\000\084\000\084\000\000\000\000\000\
\000\000\000\000\000\000\000\000\149\000\000\000\150\000\000\000\
\000\000\000\000\151\000\152\000\000\000\015\000\000\000\000\000\
\000\000\084\000\016\000\017\000\084\000\000\000\000\000\018\000\
\019\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\161\000\000\000\000\000\000\000\000\000\161\000\
\000\000\161\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\161\000\161\000\161\000\000\000\000\000\161\000\000\000\
\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\161\000\161\000\000\000\161\000\000\000\
\161\000\211\000\000\000\161\000\000\000\000\000\000\000\000\000\
\000\000\000\000\212\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\161\000\161\000\161\000\
\161\000\161\000\161\000\000\000\000\000\000\000\000\000\000\000\
\161\000\000\000\000\000\000\000\000\000\000\000\161\000\000\000\
\161\000\000\000\000\000\000\000\000\000\000\000\000\000\161\000\
\000\000\000\000\161\000\161\000\000\000\000\000\066\000\067\000\
\000\000\000\000\068\000\069\000\070\000\000\000\000\000\071\000\
\213\000\214\000\000\000\000\000\000\000\000\000\000\000\161\000\
\000\000\000\000\161\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\215\000\000\000\000\000\000\000\000\000\
\000\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\
\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\
\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\
\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\
\119\000\000\000\000\000\000\000\000\000\119\000\000\000\119\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\119\000\
\119\000\119\000\000\000\000\000\119\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\119\000\000\000\119\000\000\000\119\000\000\000\
\000\000\119\000\000\000\000\000\000\000\000\000\245\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\119\000\119\000\245\000\119\000\119\000\
\119\000\000\000\245\000\000\000\000\000\000\000\119\000\000\000\
\000\000\000\000\000\000\000\000\119\000\000\000\119\000\000\000\
\245\000\000\000\245\000\000\000\245\000\119\000\000\000\245\000\
\119\000\119\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\245\000\245\000\000\000\245\000\119\000\000\000\000\000\
\119\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000\
\000\000\000\000\245\000\000\000\245\000\000\000\000\000\000\000\
\000\000\000\000\000\000\245\000\000\000\000\000\000\000\000\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\180\000\000\000\
\000\000\000\000\000\000\180\000\000\000\180\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\180\000\180\000\180\000\
\000\000\000\000\180\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\180\000\000\000\180\000\000\000\180\000\000\000\000\000\180\000\
\000\000\000\000\000\000\000\000\050\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\180\000\180\000\050\001\180\000\180\000\180\000\000\000\
\050\001\000\000\000\000\000\000\180\000\000\000\000\000\000\000\
\000\000\000\000\180\000\000\000\180\000\000\000\050\001\000\000\
\050\001\000\000\050\001\180\000\000\000\050\001\180\000\180\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\001\
\050\001\000\000\050\001\180\000\000\000\000\000\180\000\000\000\
\000\000\000\000\050\001\000\000\000\000\000\000\000\000\000\000\
\050\001\000\000\050\001\000\000\000\000\000\000\000\000\000\000\
\000\000\050\001\000\000\000\000\000\000\000\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\183\000\000\000\000\000\000\000\
\000\000\183\000\000\000\183\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\183\000\183\000\183\000\000\000\000\000\
\183\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\001\000\000\000\000\183\000\000\000\
\183\000\000\000\183\000\000\000\000\000\183\000\000\000\000\000\
\000\000\000\000\072\001\000\000\000\000\000\000\000\000\072\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\183\000\
\183\000\000\000\183\000\183\000\183\000\072\001\000\000\072\001\
\000\000\072\001\183\000\000\000\072\001\000\000\000\000\000\000\
\183\000\000\000\183\000\000\000\000\000\000\000\000\000\000\000\
\000\000\183\000\000\000\000\000\183\000\183\000\072\001\072\001\
\000\000\072\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\001\000\000\000\000\000\000\000\000\000\000\072\001\
\000\000\183\000\000\000\000\000\183\000\000\000\000\000\000\000\
\072\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\184\000\000\000\000\000\000\000\000\000\184\000\
\000\000\184\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\184\000\184\000\184\000\000\000\000\000\184\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\184\000\000\000\184\000\000\000\
\184\000\000\000\250\001\184\000\000\000\000\000\250\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\184\000\184\000\000\000\
\184\000\184\000\184\000\000\000\000\000\000\000\000\000\000\000\
\184\000\000\000\000\000\250\001\250\001\250\001\184\000\000\000\
\184\000\000\000\250\001\000\000\000\000\000\000\000\000\184\000\
\000\000\000\000\184\000\184\000\000\000\000\000\250\001\250\001\
\000\000\000\000\000\000\000\000\250\001\250\001\000\000\000\000\
\250\001\250\001\000\000\000\000\000\000\000\000\000\000\184\000\
\000\000\000\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\250\001\250\001\250\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\184\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\250\001\184\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\250\001\250\001\250\001\250\001\250\001\250\001\250\001\250\001\
\250\001\250\001\250\001\250\001\250\001\250\001\250\001\250\001\
\250\001\250\001\250\001\250\001\250\001\250\001\250\001\250\001\
\250\001\250\001\250\001\250\001\250\001\250\001\250\001\247\001\
\000\000\000\000\000\000\247\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\219\000\000\000\
\247\001\247\001\247\001\219\000\000\000\219\000\000\000\247\001\
\000\000\000\000\000\000\000\000\000\000\219\000\000\000\000\000\
\000\000\000\000\219\000\247\001\247\001\000\000\000\000\000\000\
\000\000\247\001\247\001\000\000\000\000\247\001\000\000\000\000\
\219\000\000\000\219\000\000\000\219\000\000\000\000\000\219\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\247\001\247\001\247\001\000\000\000\000\000\000\000\000\000\000\
\000\000\219\000\219\000\000\000\219\000\219\000\000\000\000\000\
\000\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\
\000\000\000\000\219\000\000\000\219\000\000\000\000\000\000\000\
\000\000\000\000\000\000\219\000\000\000\000\000\219\000\219\000\
\000\000\000\000\247\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\247\001\247\001\247\001\
\247\001\247\001\247\001\247\001\247\001\247\001\247\001\247\001\
\247\001\247\001\247\001\247\001\247\001\247\001\247\001\247\001\
\247\001\247\001\247\001\247\001\247\001\247\001\247\001\247\001\
\247\001\247\001\247\001\247\001\179\001\000\000\219\000\219\000\
\219\000\219\000\219\000\219\000\219\000\219\000\219\000\000\000\
\219\000\000\000\000\000\075\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\075\000\000\000\000\000\
\224\000\000\000\000\000\000\000\000\000\224\000\000\000\224\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\
\000\000\000\000\000\000\000\000\224\000\000\000\075\000\000\000\
\075\000\000\000\075\000\075\000\000\000\000\000\000\000\000\000\
\000\000\075\000\224\000\000\000\224\000\000\000\224\000\000\000\
\000\000\224\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\224\000\224\000\000\000\224\000\224\000\
\000\000\000\000\000\000\000\000\000\000\000\000\224\000\000\000\
\075\000\000\000\000\000\075\000\224\000\000\000\224\000\000\000\
\000\000\000\000\000\000\000\000\000\000\224\000\000\000\075\000\
\224\000\224\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\178\001\000\000\000\000\000\000\000\000\000\000\000\000\
\224\000\224\000\224\000\224\000\224\000\224\000\000\000\224\000\
\077\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\245\001\077\000\077\000\000\000\245\001\000\000\000\000\000\000\
\240\000\000\000\000\000\000\000\000\000\240\000\000\000\240\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\240\000\
\000\000\000\000\000\000\077\000\240\000\077\000\000\000\077\000\
\077\000\245\001\245\001\245\001\000\000\000\000\077\000\000\000\
\245\001\000\000\240\000\000\000\240\000\000\000\240\000\000\000\
\000\000\240\000\000\000\000\000\245\001\245\001\000\000\000\000\
\077\000\077\000\245\001\245\001\000\000\000\000\245\001\000\000\
\000\000\000\000\000\000\240\000\240\000\000\000\240\000\240\000\
\000\000\000\000\000\000\000\000\000\000\077\000\240\000\000\000\
\077\000\245\001\245\001\245\001\240\000\000\000\240\000\000\000\
\000\000\000\000\000\000\000\000\077\000\240\000\000\000\000\000\
\240\000\240\000\000\000\000\000\000\000\000\000\000\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\245\001\245\001\
\245\001\245\001\245\001\245\001\245\001\245\001\245\001\245\001\
\245\001\245\001\245\001\245\001\245\001\245\001\245\001\245\001\
\245\001\245\001\245\001\245\001\245\001\245\001\245\001\245\001\
\245\001\245\001\245\001\245\001\245\001\177\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\081\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\243\001\081\000\081\000\000\000\
\243\001\000\000\000\000\000\000\241\000\000\000\000\000\000\000\
\000\000\241\000\000\000\241\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\241\000\000\000\000\000\000\000\081\000\
\241\000\081\000\000\000\081\000\081\000\243\001\243\001\243\001\
\000\000\000\000\081\000\000\000\243\001\000\000\241\000\000\000\
\241\000\000\000\241\000\000\000\000\000\241\000\000\000\000\000\
\243\001\243\001\000\000\000\000\081\000\081\000\243\001\243\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\241\000\
\241\000\000\000\241\000\241\000\000\000\000\000\000\000\000\000\
\000\000\081\000\241\000\000\000\081\000\243\001\243\001\243\001\
\241\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\
\000\000\241\000\000\000\000\000\241\000\241\000\000\000\000\000\
\000\000\000\000\000\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\243\001\243\001\243\001\243\001\243\001\243\001\
\243\001\243\001\243\001\243\001\243\001\243\001\243\001\243\001\
\243\001\243\001\243\001\243\001\243\001\243\001\243\001\243\001\
\243\001\243\001\243\001\243\001\243\001\243\001\243\001\243\001\
\243\001\176\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\
\119\000\119\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\211\000\000\000\000\000\000\000\
\000\000\000\000\119\000\225\000\000\000\212\000\000\000\000\000\
\225\000\000\000\225\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\225\000\000\000\000\000\000\000\000\000\225\000\
\000\000\000\000\000\000\119\000\000\000\000\000\000\000\119\000\
\119\000\000\000\000\000\000\000\000\000\225\000\119\000\225\000\
\000\000\225\000\000\000\000\000\225\000\000\000\000\000\000\000\
\000\000\066\000\067\000\000\000\000\000\068\000\069\000\070\000\
\119\000\119\000\071\000\213\000\214\000\000\000\225\000\225\000\
\000\000\225\000\225\000\000\000\000\000\000\000\000\000\000\000\
\000\000\225\000\000\000\000\000\000\000\119\000\000\000\225\000\
\119\000\225\000\000\000\000\000\000\000\000\000\215\000\000\000\
\225\000\000\000\000\000\225\000\225\000\000\000\000\000\000\000\
\000\000\216\000\000\000\000\000\000\000\000\000\000\000\000\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\227\000\228\000\
\000\000\000\000\000\000\225\000\225\000\225\000\225\000\225\000\
\225\000\038\000\225\000\243\000\244\000\041\000\042\000\000\000\
\043\000\044\000\045\000\046\000\000\000\000\000\047\000\000\000\
\000\000\048\000\049\000\050\000\051\000\245\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\242\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\055\000\
\000\000\000\000\000\000\056\000\057\000\000\000\242\000\000\000\
\246\000\000\000\000\000\242\000\058\000\000\000\000\000\059\000\
\060\000\000\000\000\000\000\000\061\000\062\000\063\000\000\000\
\000\000\242\000\000\000\242\000\064\000\242\000\000\000\000\000\
\242\000\066\000\067\000\000\000\000\000\247\000\069\000\248\000\
\000\000\000\000\071\000\249\000\250\000\000\000\000\000\075\000\
\000\000\000\000\242\000\242\000\000\000\242\000\242\000\000\000\
\000\000\000\000\000\000\000\000\000\000\242\000\000\000\000\000\
\000\000\000\000\000\000\242\000\000\000\242\000\000\000\000\000\
\000\000\000\000\000\000\000\000\242\000\000\000\000\000\000\000\
\000\000\085\000\000\000\251\000\252\000\253\000\254\000\255\000\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\189\000\000\000\000\000\000\000\000\000\189\000\000\000\
\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\189\000\189\000\189\000\000\000\000\000\189\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\001\000\000\000\000\189\000\000\000\189\000\000\000\189\000\
\000\000\000\000\189\000\000\000\000\000\000\000\000\000\070\001\
\000\000\000\000\000\000\000\000\070\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\189\000\189\000\000\000\189\000\
\189\000\000\000\070\001\000\000\070\001\000\000\070\001\189\000\
\000\000\070\001\000\000\000\000\000\000\189\000\000\000\189\000\
\000\000\000\000\000\000\000\000\000\000\000\000\189\000\000\000\
\000\000\189\000\189\000\070\001\070\001\000\000\070\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\001\000\000\
\000\000\000\000\000\000\000\000\070\001\000\000\189\000\000\000\
\000\000\189\000\000\000\000\000\000\000\070\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
\189\000\190\000\189\000\000\000\000\000\000\000\190\000\000\000\
\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\190\000\190\000\190\000\000\000\000\000\190\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\001\000\000\000\000\190\000\000\000\190\000\000\000\190\000\
\000\000\000\000\190\000\000\000\000\000\000\000\000\000\055\001\
\000\000\000\000\000\000\000\000\055\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\190\000\190\000\000\000\190\000\
\190\000\000\000\055\001\000\000\055\001\000\000\055\001\190\000\
\000\000\055\001\000\000\000\000\000\000\190\000\000\000\190\000\
\000\000\000\000\000\000\000\000\000\000\000\000\190\000\000\000\
\000\000\190\000\190\000\055\001\055\001\000\000\055\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\001\000\000\
\000\000\000\000\000\000\000\000\055\001\000\000\190\000\000\000\
\000\000\190\000\000\000\000\000\000\000\055\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\190\000\190\000\190\000\190\000\190\000\190\000\190\000\
\190\000\190\000\190\000\190\000\190\000\190\000\190\000\190\000\
\190\000\190\000\190\000\190\000\190\000\190\000\190\000\190\000\
\190\000\195\000\190\000\000\000\000\000\000\000\195\000\000\000\
\195\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\195\000\195\000\195\000\000\000\000\000\195\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\001\000\000\000\000\195\000\000\000\195\000\000\000\195\000\
\000\000\000\000\195\000\000\000\000\000\000\000\000\000\023\001\
\000\000\000\000\000\000\000\000\023\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\195\000\195\000\000\000\195\000\
\195\000\000\000\023\001\000\000\023\001\000\000\023\001\195\000\
\000\000\023\001\000\000\000\000\000\000\195\000\000\000\195\000\
\000\000\000\000\000\000\000\000\000\000\000\000\195\000\000\000\
\000\000\195\000\195\000\023\001\023\001\000\000\023\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\001\000\000\
\000\000\000\000\000\000\000\000\023\001\000\000\195\000\000\000\
\000\000\195\000\000\000\000\000\000\000\023\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\195\000\196\000\195\000\
\000\000\000\000\000\000\196\000\000\000\196\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\196\000\196\000\196\000\
\000\000\000\000\196\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\076\001\000\000\000\000\
\196\000\000\000\196\000\000\000\196\000\000\000\000\000\196\000\
\000\000\000\000\000\000\000\000\076\001\000\000\000\000\000\000\
\000\000\076\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\196\000\196\000\000\000\196\000\196\000\000\000\076\001\
\000\000\076\001\000\000\076\001\196\000\000\000\076\001\000\000\
\000\000\000\000\196\000\000\000\196\000\000\000\000\000\000\000\
\000\000\000\000\000\000\196\000\000\000\000\000\196\000\196\000\
\076\001\076\001\000\000\076\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\001\000\000\000\000\000\000\000\000\
\000\000\076\001\000\000\196\000\000\000\000\000\196\000\000\000\
\000\000\000\000\076\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\200\000\196\000\000\000\000\000\000\000\
\200\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\200\000\200\000\200\000\000\000\000\000\200\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\200\000\000\000\200\000\
\000\000\200\000\000\000\000\000\200\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\200\000\200\000\
\000\000\200\000\200\000\000\000\000\000\000\000\000\000\005\000\
\000\000\200\000\000\000\000\000\000\000\000\000\000\000\200\000\
\000\000\200\000\000\000\000\000\006\000\000\000\000\000\000\000\
\200\000\000\000\000\000\200\000\200\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\184\001\000\000\000\000\000\000\000\000\000\000\
\200\000\008\000\009\000\200\000\010\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\200\000\200\000\200\000\200\000\200\000\
\200\000\200\000\200\000\200\000\200\000\200\000\200\000\200\000\
\200\000\200\000\200\000\200\000\200\000\201\000\200\000\000\000\
\000\000\000\000\201\000\000\000\201\000\000\000\000\000\013\000\
\014\000\000\000\015\000\000\000\201\000\201\000\201\000\016\000\
\017\000\201\000\000\000\000\000\018\000\019\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\201\000\
\000\000\201\000\021\000\201\000\000\000\000\000\201\000\000\000\
\000\000\000\000\185\001\186\001\187\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\201\000\201\000\000\000\201\000\201\000\000\000\000\000\000\000\
\000\000\000\000\000\000\201\000\000\000\000\000\000\000\000\000\
\000\000\201\000\000\000\201\000\000\000\000\000\000\000\000\000\
\000\000\000\000\201\000\000\000\000\000\201\000\201\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\201\000\000\000\000\000\201\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\201\000\201\000\201\000\
\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
\201\000\201\000\201\000\201\000\201\000\201\000\201\000\208\000\
\201\000\000\000\000\000\000\000\208\000\000\000\208\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\208\000\000\000\
\000\000\000\000\000\000\208\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\208\000\000\000\208\000\000\000\208\000\000\000\000\000\
\208\000\000\000\000\000\000\000\000\000\209\000\000\000\000\000\
\000\000\000\000\209\000\000\000\209\000\000\000\000\000\000\000\
\000\000\000\000\208\000\208\000\209\000\208\000\208\000\000\000\
\000\000\209\000\000\000\000\000\000\000\208\000\000\000\000\000\
\000\000\000\000\000\000\208\000\000\000\208\000\000\000\209\000\
\000\000\209\000\000\000\209\000\208\000\000\000\209\000\208\000\
\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\209\000\209\000\000\000\209\000\209\000\000\000\000\000\208\000\
\000\000\000\000\000\000\209\000\000\000\000\000\000\000\000\000\
\000\000\209\000\000\000\209\000\000\000\000\000\000\000\000\000\
\000\000\000\000\209\000\000\000\000\000\209\000\209\000\208\000\
\208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
\208\000\208\000\208\000\208\000\208\000\208\000\000\000\208\000\
\000\000\000\000\000\000\000\000\000\000\209\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\209\000\209\000\209\000\
\209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
\209\000\209\000\209\000\209\000\211\000\209\000\000\000\000\000\
\000\000\211\000\000\000\211\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\211\000\000\000\000\000\000\000\000\000\
\211\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\211\000\000\000\
\211\000\000\000\211\000\000\000\000\000\211\000\000\000\000\000\
\000\000\000\000\213\000\000\000\000\000\000\000\000\000\213\000\
\000\000\213\000\000\000\000\000\000\000\000\000\000\000\211\000\
\211\000\213\000\211\000\211\000\000\000\000\000\213\000\000\000\
\000\000\000\000\211\000\000\000\000\000\000\000\000\000\000\000\
\211\000\000\000\211\000\000\000\213\000\000\000\213\000\000\000\
\213\000\211\000\000\000\213\000\211\000\211\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\213\000\213\000\000\000\
\213\000\213\000\000\000\000\000\000\000\000\000\000\000\000\000\
\213\000\000\000\000\000\000\000\000\000\000\000\213\000\000\000\
\213\000\000\000\000\000\000\000\000\000\000\000\000\000\213\000\
\000\000\000\000\213\000\213\000\211\000\211\000\211\000\211\000\
\211\000\211\000\211\000\211\000\211\000\211\000\211\000\211\000\
\211\000\211\000\211\000\000\000\211\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000\
\000\000\214\000\000\000\214\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\214\000\000\000\000\000\000\000\000\000\
\214\000\000\000\213\000\213\000\213\000\213\000\213\000\213\000\
\213\000\213\000\213\000\213\000\213\000\213\000\214\000\213\000\
\214\000\000\000\214\000\000\000\000\000\214\000\000\000\000\000\
\000\000\000\000\220\000\000\000\000\000\000\000\000\000\220\000\
\000\000\220\000\000\000\000\000\000\000\000\000\000\000\214\000\
\214\000\220\000\214\000\214\000\000\000\000\000\220\000\000\000\
\000\000\000\000\214\000\000\000\000\000\000\000\000\000\000\000\
\214\000\000\000\214\000\000\000\220\000\000\000\220\000\000\000\
\220\000\214\000\000\000\220\000\214\000\214\000\000\000\000\000\
\230\000\000\000\000\000\000\000\000\000\230\000\000\000\230\000\
\000\000\000\000\000\000\000\000\000\000\220\000\220\000\230\000\
\220\000\220\000\000\000\000\000\230\000\000\000\000\000\000\000\
\220\000\000\000\000\000\000\000\000\000\000\000\220\000\000\000\
\220\000\000\000\230\000\000\000\230\000\000\000\230\000\220\000\
\000\000\230\000\220\000\220\000\214\000\214\000\214\000\214\000\
\214\000\214\000\214\000\214\000\214\000\214\000\214\000\214\000\
\000\000\214\000\000\000\230\000\230\000\000\000\230\000\230\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\000\000\000\
\000\000\000\000\000\000\000\000\230\000\000\000\230\000\000\000\
\000\000\000\000\000\000\000\000\000\000\230\000\000\000\000\000\
\230\000\230\000\220\000\220\000\220\000\220\000\220\000\220\000\
\220\000\220\000\220\000\000\000\220\000\000\000\000\000\000\000\
\000\000\235\000\000\000\000\000\000\000\000\000\235\000\000\000\
\235\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\235\000\000\000\000\000\000\000\000\000\235\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\230\000\230\000\230\000\235\000\230\000\235\000\000\000\235\000\
\000\000\000\000\235\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\235\000\235\000\000\000\235\000\
\235\000\000\000\000\000\000\000\000\000\000\000\000\000\235\000\
\000\000\000\000\000\000\000\000\000\000\235\000\033\000\235\000\
\000\000\034\000\035\000\000\000\000\000\000\000\235\000\036\000\
\037\000\235\000\235\000\000\000\038\000\000\000\039\000\040\000\
\041\000\042\000\000\000\043\000\044\000\045\000\046\000\000\000\
\000\000\047\000\000\000\000\000\048\000\049\000\050\000\051\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\000\000\055\000\000\000\000\000\000\000\056\000\057\000\
\000\000\000\000\235\000\000\000\000\000\000\000\000\000\058\000\
\000\000\000\000\059\000\060\000\000\000\000\000\000\000\061\000\
\062\000\063\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\000\000\000\000\065\000\066\000\067\000\000\000\000\000\
\068\000\069\000\070\000\000\000\000\000\071\000\072\000\073\000\
\074\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\076\000\077\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\080\000\081\000\082\000\083\000\
\084\000\000\000\125\002\000\000\085\000\034\000\035\000\000\000\
\000\000\000\000\000\000\036\000\037\000\000\000\000\000\000\000\
\038\000\000\000\039\000\040\000\041\000\042\000\000\000\043\000\
\044\000\045\000\046\000\000\000\000\000\047\000\000\000\000\000\
\048\000\049\000\050\000\051\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\055\000\000\000\
\000\000\000\000\056\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\000\000\000\000\000\059\000\060\000\
\000\000\000\000\000\000\061\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\066\000\067\000\000\000\000\000\068\000\069\000\070\000\000\000\
\000\000\071\000\072\000\073\000\000\000\000\000\075\000\000\000\
\000\000\000\000\000\000\000\000\076\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\080\000\081\000\082\000\083\000\084\000\023\000\023\000\000\000\
\085\000\000\000\000\000\023\000\023\000\000\000\000\000\000\000\
\023\000\000\000\023\000\023\000\023\000\023\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\023\000\000\000\
\000\000\000\000\023\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\023\000\023\000\
\000\000\000\000\000\000\023\000\023\000\023\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\023\000\023\000\000\000\000\000\023\000\023\000\023\000\000\000\
\000\000\023\000\023\000\023\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\023\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\034\000\035\000\000\000\
\023\000\000\000\000\000\036\000\037\000\000\000\000\000\000\000\
\038\000\000\000\039\000\040\000\041\000\042\000\000\000\043\000\
\044\000\045\000\046\000\000\000\000\000\047\000\000\000\000\000\
\048\000\049\000\050\000\051\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\055\000\000\000\
\000\000\000\000\056\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\000\000\000\000\000\059\000\060\000\
\000\000\000\000\000\000\061\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\066\000\067\000\000\000\000\000\068\000\069\000\070\000\000\000\
\000\000\071\000\072\000\073\000\000\000\000\000\075\000\000\000\
\000\000\000\000\000\000\000\000\076\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\001\085\001\000\000\
\085\000\000\000\000\000\085\001\000\000\000\000\000\000\000\000\
\085\001\000\000\085\001\085\001\085\001\085\001\095\001\085\001\
\085\001\085\001\085\001\085\001\085\001\085\001\085\001\085\001\
\085\001\085\001\085\001\085\001\000\000\085\001\095\001\000\000\
\000\000\000\000\000\000\000\000\085\001\000\000\000\000\000\000\
\000\000\000\000\000\000\085\001\000\000\000\000\085\001\000\000\
\000\000\000\000\085\001\085\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\085\001\000\000\000\000\085\001\085\001\
\000\000\000\000\000\000\085\001\085\001\085\001\000\000\000\000\
\000\000\000\000\000\000\085\001\000\000\000\000\000\000\000\000\
\085\001\085\001\000\000\000\000\085\001\085\001\085\001\085\001\
\085\001\085\001\085\001\085\001\000\000\085\001\085\001\000\000\
\000\000\000\000\085\001\000\000\085\001\085\001\085\001\085\001\
\093\001\085\001\085\001\085\001\085\001\085\001\085\001\085\001\
\085\001\085\001\085\001\085\001\085\001\085\001\000\000\085\001\
\093\001\000\000\000\000\000\000\085\001\000\000\085\001\000\000\
\085\001\000\000\000\000\000\000\000\000\085\001\000\000\000\000\
\085\001\000\000\000\000\000\000\085\001\085\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\001\000\000\000\000\
\085\001\085\001\000\000\000\000\000\000\085\001\085\001\085\001\
\000\000\000\000\000\000\000\000\000\000\085\001\000\000\000\000\
\000\000\000\000\085\001\085\001\000\000\000\000\085\001\085\001\
\085\001\050\001\050\001\085\001\085\001\085\001\000\000\000\000\
\085\001\000\000\000\000\000\000\050\001\000\000\050\001\050\001\
\050\001\050\001\000\000\050\001\050\001\050\001\050\001\050\001\
\050\001\050\001\050\001\050\001\050\001\050\001\050\001\050\001\
\000\000\050\001\000\000\000\000\000\000\000\000\085\001\000\000\
\050\001\000\000\085\001\000\000\000\000\000\000\000\000\050\001\
\000\000\000\000\050\001\000\000\000\000\000\000\050\001\050\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\001\
\000\000\000\000\050\001\050\001\000\000\000\000\050\001\050\001\
\050\001\050\001\000\000\000\000\000\000\000\000\000\000\050\001\
\000\000\000\000\000\000\000\000\050\001\050\001\000\000\000\000\
\050\001\050\001\050\001\052\001\052\001\050\001\050\001\050\001\
\000\000\000\000\050\001\000\000\000\000\000\000\052\001\000\000\
\052\001\052\001\052\001\052\001\000\000\052\001\052\001\052\001\
\052\001\052\001\052\001\052\001\052\001\052\001\052\001\052\001\
\052\001\052\001\000\000\052\001\000\000\000\000\000\000\000\000\
\000\000\000\000\052\001\000\000\050\001\000\000\000\000\000\000\
\000\000\052\001\000\000\000\000\052\001\000\000\000\000\000\000\
\052\001\052\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\001\000\000\000\000\052\001\052\001\000\000\000\000\
\000\000\052\001\052\001\052\001\000\000\000\000\000\000\000\000\
\000\000\052\001\000\000\000\000\000\000\000\000\052\001\052\001\
\000\000\000\000\052\001\052\001\052\001\031\001\032\001\052\001\
\052\001\052\001\000\000\033\001\052\001\000\000\000\000\000\000\
\038\000\000\000\039\000\040\000\041\000\042\000\000\000\043\000\
\044\000\045\000\046\000\000\000\000\000\047\000\000\000\000\000\
\048\000\049\000\050\000\051\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\052\001\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\055\000\000\000\
\000\000\000\000\056\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\000\000\000\000\000\059\000\060\000\
\000\000\000\000\000\000\061\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\034\001\
\066\000\067\000\000\000\000\000\068\000\069\000\070\000\031\001\
\032\001\071\000\072\000\073\000\000\000\033\001\075\000\000\000\
\000\000\000\000\038\000\000\000\039\000\040\000\041\000\042\000\
\000\000\043\000\044\000\045\000\046\000\000\000\000\000\047\000\
\000\000\000\000\048\000\049\000\050\000\051\000\000\000\052\000\
\000\000\000\000\000\000\000\000\084\000\000\000\053\000\000\000\
\085\000\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\055\000\000\000\000\000\000\000\056\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\059\000\060\000\000\000\000\000\000\000\061\000\062\000\063\000\
\000\000\000\000\000\000\000\000\000\000\064\000\000\000\000\000\
\000\000\000\000\066\000\067\000\000\000\000\000\068\000\069\000\
\070\000\227\000\228\000\071\000\072\000\073\000\000\000\000\000\
\075\000\000\000\000\000\000\000\038\000\000\000\039\000\040\000\
\041\000\042\000\000\000\043\000\044\000\045\000\046\000\000\000\
\000\000\047\000\000\000\000\000\048\000\049\000\050\000\051\000\
\000\000\052\000\000\000\000\000\000\000\000\000\084\000\042\001\
\053\000\000\000\085\000\000\000\000\000\000\000\000\000\054\000\
\000\000\000\000\055\000\000\000\000\000\000\000\056\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\000\000\000\000\059\000\060\000\000\000\000\000\000\000\061\000\
\062\000\063\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\000\000\000\000\000\000\066\000\067\000\000\000\000\000\
\068\000\069\000\070\000\227\000\228\000\071\000\072\000\073\000\
\000\000\000\000\075\000\000\000\000\000\000\000\038\000\000\000\
\039\000\040\000\041\000\042\000\000\000\043\000\044\000\045\000\
\046\000\000\000\000\000\047\000\000\000\000\000\048\000\049\000\
\050\000\051\000\069\002\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\000\000\085\000\000\000\000\000\000\000\
\000\000\054\000\000\000\000\000\055\000\000\000\000\000\000\000\
\056\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\000\000\000\000\000\059\000\060\000\000\000\000\000\
\000\000\061\000\062\000\063\000\000\000\000\000\000\000\000\000\
\000\000\064\000\000\000\000\000\000\000\000\000\066\000\067\000\
\000\000\000\000\068\000\069\000\070\000\227\000\228\000\071\000\
\072\000\073\000\000\000\000\000\075\000\000\000\000\000\000\000\
\038\000\000\000\039\000\040\000\041\000\042\000\000\000\043\000\
\044\000\045\000\046\000\000\000\000\000\047\000\000\000\000\000\
\048\000\049\000\050\000\051\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\211\002\053\000\000\000\085\000\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\055\000\000\000\
\000\000\000\000\056\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\000\000\000\000\000\059\000\060\000\
\000\000\000\000\000\000\061\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\066\000\067\000\000\000\000\000\068\000\069\000\070\000\227\000\
\228\000\071\000\072\000\073\000\000\000\000\000\075\000\000\000\
\000\000\000\000\038\000\000\000\039\000\040\000\041\000\042\000\
\000\000\043\000\044\000\045\000\046\000\000\000\000\000\047\000\
\000\000\000\000\048\000\049\000\050\000\051\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\085\000\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\055\000\000\000\000\000\000\000\056\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\059\000\060\000\000\000\000\000\000\000\061\000\062\000\063\000\
\000\000\000\000\000\000\000\000\000\000\064\000\000\000\000\000\
\000\000\000\000\066\000\067\000\000\000\000\000\068\000\069\000\
\070\000\227\000\228\000\071\000\072\000\073\000\000\000\000\000\
\075\000\000\000\000\000\000\000\000\000\000\000\039\000\040\000\
\000\000\229\000\000\000\043\000\044\000\045\000\046\000\000\000\
\000\000\047\000\000\000\000\000\000\000\000\000\050\000\051\000\
\000\000\052\000\227\000\228\000\000\000\000\000\000\000\000\000\
\053\000\000\000\085\000\000\000\000\000\000\000\000\000\054\000\
\000\000\000\000\229\000\000\000\043\000\044\000\045\000\046\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\052\000\060\000\000\000\000\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\000\000\066\000\067\000\000\000\000\000\
\068\000\069\000\070\000\000\000\000\000\071\000\072\000\073\000\
\000\000\000\000\075\000\000\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\141\001\000\000\
\000\000\141\001\141\001\000\000\000\000\066\000\067\000\141\001\
\141\001\068\000\069\000\070\000\000\000\141\001\071\000\072\000\
\000\000\000\000\141\001\075\000\085\000\000\000\000\000\000\000\
\000\000\141\001\141\001\141\001\243\000\000\000\000\000\000\000\
\141\001\000\000\141\001\000\000\141\001\000\000\000\000\141\001\
\000\000\000\000\141\001\243\000\141\001\000\000\141\001\000\000\
\243\000\000\000\000\000\141\001\000\000\141\001\000\000\000\000\
\000\000\141\001\141\001\141\001\141\001\141\001\243\000\000\000\
\243\000\141\001\243\000\000\000\141\001\243\000\000\000\000\000\
\000\000\000\000\141\001\203\000\141\001\000\000\000\000\000\000\
\000\000\000\000\000\000\141\001\000\000\000\000\000\000\243\000\
\243\000\000\000\243\000\243\000\000\000\000\000\000\000\000\000\
\000\000\000\000\243\000\000\000\000\000\000\000\000\000\000\000\
\243\000\000\000\243\000\000\000\000\000\000\000\000\000\000\000\
\000\000\243\000\000\000\251\000\252\000\253\000\254\000\255\000\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\243\001\251\000\252\000\253\000\254\000\255\000\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\251\000\252\000\253\000\254\000\255\000\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000"

let yycheck = "\007\000\
\031\000\053\000\046\001\002\000\162\000\002\000\001\000\010\000\
\011\000\011\000\194\000\006\000\059\000\008\000\193\000\194\000\
\037\000\175\000\000\002\212\000\006\002\002\000\002\000\018\000\
\019\000\002\000\048\002\175\001\037\000\100\000\001\003\195\001\
\148\000\148\000\077\000\039\000\040\000\035\000\073\000\214\000\
\075\001\101\002\163\002\230\000\214\002\002\000\049\000\223\001\
\017\001\018\001\226\001\065\001\051\000\052\000\053\000\052\000\
\172\000\172\000\035\001\058\000\002\001\034\001\109\001\073\003\
\063\000\036\001\045\001\034\001\047\001\245\001\246\001\051\000\
\051\001\053\000\034\001\035\000\036\000\036\001\058\000\017\001\
\018\001\085\000\034\001\063\000\036\001\035\001\191\001\017\001\
\035\001\062\001\034\001\034\001\036\001\035\001\002\001\077\002\
\017\001\094\000\097\001\034\001\043\001\037\001\035\001\100\000\
\064\000\035\001\036\001\034\001\043\000\044\000\045\000\046\000\
\045\001\094\000\091\001\036\001\093\001\077\000\060\001\100\000\
\097\001\098\001\064\001\065\001\017\001\060\000\097\001\035\001\
\138\003\065\001\060\001\098\001\103\001\104\001\064\001\036\001\
\095\001\094\000\098\001\036\001\075\000\110\001\247\001\064\001\
\058\003\097\001\145\000\161\001\145\000\163\001\035\001\165\001\
\060\001\097\001\004\001\005\001\064\001\065\001\031\001\067\002\
\025\003\011\001\097\001\036\001\145\000\145\000\097\001\117\001\
\145\000\116\001\117\001\064\001\110\001\123\001\217\000\060\001\
\123\001\062\001\028\001\052\001\151\003\202\000\060\001\125\001\
\097\001\180\000\181\000\156\001\248\002\021\001\211\000\212\000\
\093\001\071\001\189\000\190\000\191\000\192\000\219\000\034\001\
\097\001\035\001\211\000\211\000\097\001\037\001\204\000\100\001\
\206\000\207\000\219\000\125\003\126\003\034\001\152\001\250\000\
\154\001\125\001\156\001\112\001\036\001\021\001\038\001\035\001\
\097\001\098\001\037\001\226\000\062\001\097\001\228\000\124\001\
\100\001\035\001\042\001\234\000\086\001\037\001\246\000\243\000\
\244\000\240\000\241\000\045\001\112\001\035\001\226\000\006\001\
\060\001\008\001\164\003\165\003\060\001\064\001\234\000\097\001\
\124\001\034\001\108\001\061\001\240\000\241\000\097\001\098\001\
\184\002\100\001\057\001\036\001\033\001\038\001\205\000\061\001\
\035\001\208\000\060\001\086\001\055\002\112\001\094\001\207\001\
\033\001\096\001\068\001\062\002\207\001\101\001\102\001\036\001\
\053\001\124\001\032\001\095\003\088\001\065\001\043\001\060\001\
\061\001\040\001\061\001\040\001\053\001\001\001\025\002\046\001\
\027\002\046\001\061\001\060\001\061\001\169\001\169\001\213\001\
\078\003\100\001\034\001\058\001\040\001\236\001\048\003\035\001\
\097\001\181\001\181\001\100\001\035\001\094\001\035\001\031\001\
\032\001\034\001\089\001\090\001\101\001\102\001\058\001\112\001\
\035\001\089\001\043\001\044\001\034\001\106\001\097\001\098\001\
\036\001\088\001\076\003\124\001\060\001\041\001\061\001\063\001\
\061\001\106\001\164\001\096\001\166\001\001\001\034\001\034\001\
\036\001\060\001\067\001\062\001\088\001\107\001\114\001\035\001\
\043\001\035\001\014\001\096\001\098\003\036\001\042\001\091\001\
\036\001\093\001\082\001\045\001\016\003\097\001\098\001\036\001\
\059\001\038\001\062\001\037\001\117\001\093\001\034\001\034\001\
\097\001\098\001\123\001\100\001\075\001\037\001\077\001\043\001\
\044\001\093\001\046\001\107\001\048\001\089\001\090\001\112\001\
\116\001\152\001\118\001\035\001\151\001\156\001\122\001\156\001\
\168\001\093\001\042\001\124\001\186\003\071\001\115\001\067\001\
\036\001\164\001\119\001\202\001\152\001\204\001\121\001\156\001\
\156\001\180\001\125\001\156\001\037\001\184\001\184\001\089\001\
\090\001\094\001\098\001\119\001\120\001\121\001\122\001\177\003\
\101\001\089\001\090\001\060\001\061\001\097\001\098\001\194\001\
\100\001\196\001\197\001\060\001\061\001\105\001\106\001\055\002\
\034\001\005\002\110\001\111\001\112\001\208\001\062\002\083\001\
\084\001\085\001\101\001\214\001\215\001\216\001\217\001\244\001\
\124\001\037\001\004\001\005\001\249\001\060\001\061\001\037\001\
\253\001\011\001\171\002\244\001\164\002\061\001\034\001\029\001\
\030\001\164\002\179\002\034\001\253\001\035\001\148\002\038\002\
\060\001\061\001\028\001\130\001\034\001\251\001\133\001\061\001\
\135\001\045\003\064\001\029\001\030\001\034\001\005\002\036\001\
\097\001\035\001\009\002\091\001\011\002\093\001\012\002\013\002\
\117\001\097\001\098\001\134\001\093\001\020\002\123\001\138\001\
\158\001\005\002\160\001\026\002\162\001\009\002\061\001\011\002\
\248\001\062\001\137\001\097\001\098\001\036\002\141\001\155\001\
\020\002\157\001\037\002\159\001\098\001\035\001\026\002\037\001\
\001\001\048\002\049\002\048\002\136\001\006\001\017\001\008\001\
\036\002\047\001\086\001\049\001\091\001\140\001\093\001\016\001\
\093\001\144\001\097\001\098\001\021\001\049\002\065\002\066\002\
\035\001\036\001\026\001\027\001\091\001\029\001\030\001\149\001\
\078\002\151\001\035\001\153\001\037\001\037\001\039\001\086\001\
\117\001\042\001\119\001\120\001\121\001\122\001\123\001\006\001\
\007\001\060\001\026\003\004\001\005\001\064\001\065\001\026\003\
\086\001\010\001\011\001\060\001\061\001\043\001\063\001\064\001\
\034\001\073\002\036\001\006\001\007\001\035\001\071\001\037\001\
\055\002\012\001\013\001\028\001\077\001\113\001\079\001\062\002\
\159\002\047\001\138\001\049\001\091\001\086\001\093\001\130\002\
\089\001\090\001\097\001\098\001\012\001\013\001\060\001\061\001\
\147\002\147\002\029\001\030\001\021\001\144\002\171\002\146\002\
\064\001\026\001\027\001\150\002\029\001\030\001\179\002\180\002\
\034\001\182\002\036\001\034\001\037\001\100\002\101\002\001\001\
\083\001\084\001\085\001\180\002\006\001\182\002\008\001\146\001\
\175\002\148\001\035\001\150\001\037\001\081\003\016\001\083\003\
\137\001\138\001\139\001\021\001\141\001\143\001\047\001\190\002\
\049\001\147\001\143\001\175\002\145\001\218\002\147\001\060\001\
\035\001\035\001\037\001\037\001\203\002\039\001\103\001\104\001\
\042\001\218\002\190\002\140\001\047\001\142\001\049\001\144\001\
\215\002\216\002\035\001\227\002\034\001\042\001\036\001\203\002\
\035\001\224\002\060\001\061\001\061\001\063\001\064\001\001\000\
\002\000\003\000\047\001\215\002\216\002\071\001\173\002\174\002\
\117\001\118\001\237\002\077\001\224\002\079\001\241\002\146\001\
\062\001\148\001\185\002\186\002\086\001\028\003\105\001\089\001\
\090\001\001\001\045\001\137\001\049\001\139\001\006\001\141\001\
\008\001\062\001\201\002\202\002\007\003\060\001\061\001\124\001\
\016\001\126\001\127\001\128\001\062\001\021\001\131\001\093\001\
\020\001\026\001\027\001\060\001\029\001\030\001\065\001\044\003\
\223\002\046\003\062\001\035\001\062\001\037\001\034\001\039\001\
\034\001\111\001\042\001\234\002\114\001\115\001\045\003\034\001\
\045\003\119\001\120\001\121\001\122\001\080\001\081\001\064\001\
\077\003\248\002\065\001\067\003\060\001\061\001\125\001\063\001\
\064\001\054\001\055\001\002\003\077\003\026\001\027\001\071\001\
\029\001\030\001\073\003\021\001\107\003\077\001\034\001\079\001\
\029\001\030\001\103\001\104\001\012\001\013\001\086\001\006\001\
\007\001\089\001\090\001\087\001\088\001\073\003\035\001\091\001\
\092\001\093\001\056\000\057\000\096\001\097\001\006\001\007\001\
\112\003\040\003\101\003\002\001\012\001\013\001\014\001\149\001\
\150\001\017\001\087\001\088\001\115\003\169\003\091\001\092\001\
\093\001\060\001\061\001\035\001\097\001\098\001\225\002\226\002\
\127\003\137\003\129\003\086\001\036\001\132\003\086\001\115\003\
\037\001\042\001\138\001\138\003\051\001\072\001\071\001\097\001\
\077\001\003\001\081\003\127\003\083\003\129\003\086\001\002\001\
\132\003\034\001\064\001\064\001\086\001\001\001\138\003\097\001\
\095\003\096\003\060\001\034\001\034\001\034\001\060\001\035\001\
\001\001\002\001\169\003\004\001\005\001\006\001\098\001\037\001\
\098\001\010\001\011\001\035\001\060\001\002\001\098\001\016\001\
\002\001\042\001\035\001\195\003\021\001\169\003\035\001\037\001\
\035\001\017\001\035\001\028\001\029\001\030\001\133\003\002\001\
\086\001\036\001\035\001\036\001\037\001\037\001\039\001\062\001\
\062\001\042\001\034\001\035\001\045\001\035\001\047\001\055\001\
\049\001\102\001\060\001\043\001\035\001\054\001\055\001\056\001\
\035\001\064\001\040\001\060\001\061\001\062\001\063\001\064\001\
\060\001\002\001\035\001\068\001\086\001\042\001\071\001\036\001\
\165\001\162\001\159\001\150\001\077\001\153\001\079\001\147\001\
\144\001\141\001\083\001\084\001\085\001\086\001\054\001\035\001\
\001\001\006\001\037\001\037\001\037\001\037\001\037\001\087\001\
\088\001\037\001\062\001\091\001\092\001\093\001\034\001\060\001\
\096\001\097\001\098\001\060\001\017\001\035\001\060\001\036\001\
\036\001\035\001\035\001\042\001\021\001\035\001\034\001\042\001\
\056\001\056\001\034\001\037\001\039\001\034\001\035\001\102\001\
\035\001\116\001\036\001\060\001\124\001\117\001\043\001\136\001\
\137\001\138\001\139\001\140\001\141\001\142\001\143\001\144\001\
\145\001\146\001\147\001\148\001\149\001\150\001\151\001\152\001\
\153\001\154\001\155\001\156\001\157\001\158\001\159\001\160\001\
\161\001\162\001\163\001\164\001\165\001\166\001\001\001\002\001\
\037\001\004\001\005\001\006\001\035\001\035\001\035\001\010\001\
\011\001\035\001\087\001\088\001\060\001\016\001\091\001\092\001\
\093\001\035\001\021\001\096\001\097\001\098\001\098\001\017\001\
\016\001\028\001\029\001\030\001\098\001\086\001\098\001\037\001\
\035\001\036\001\037\001\062\001\039\001\062\001\034\001\042\001\
\034\001\073\001\045\001\042\001\047\001\068\001\049\001\124\001\
\042\001\043\001\078\001\054\001\055\001\056\001\035\001\060\001\
\041\001\060\001\061\001\062\001\063\001\064\001\086\001\035\001\
\035\001\068\001\035\001\060\001\071\001\037\001\037\001\037\001\
\037\001\006\001\077\001\061\001\079\001\034\001\034\001\079\001\
\083\001\084\001\085\001\086\001\042\001\035\001\037\001\035\001\
\037\001\098\001\035\001\079\001\079\001\087\001\088\001\097\001\
\060\001\091\001\092\001\093\001\042\001\035\001\096\001\097\001\
\098\001\035\001\035\001\035\001\097\001\079\001\045\001\047\001\
\049\001\097\001\097\001\035\001\035\001\002\001\035\001\037\001\
\042\001\035\001\002\001\086\001\097\001\035\001\037\001\035\001\
\037\001\036\001\124\001\037\001\035\001\136\001\137\001\138\001\
\139\001\140\001\141\001\142\001\143\001\144\001\145\001\146\001\
\147\001\148\001\149\001\150\001\151\001\152\001\153\001\154\001\
\155\001\156\001\157\001\158\001\159\001\160\001\161\001\162\001\
\163\001\164\001\165\001\166\001\001\001\035\001\035\001\035\001\
\068\001\006\001\001\001\008\001\037\001\037\001\078\001\102\001\
\037\001\037\001\035\001\016\001\017\001\018\001\041\001\014\001\
\021\001\041\001\068\001\002\003\040\001\002\000\002\000\045\002\
\144\000\100\000\073\001\156\001\094\000\034\001\035\001\078\002\
\037\001\054\003\039\001\034\001\035\001\042\001\055\003\080\002\
\242\000\133\001\123\001\136\001\043\001\044\001\129\001\046\001\
\117\001\048\001\120\001\142\001\218\002\195\003\077\001\060\001\
\061\001\062\001\063\001\064\001\065\001\145\001\061\001\174\003\
\137\003\247\001\071\001\161\001\067\001\191\001\249\001\150\002\
\077\001\139\001\079\001\035\003\112\003\255\255\255\255\168\001\
\180\001\086\001\255\255\255\255\089\001\090\001\255\255\255\255\
\255\255\255\255\255\255\255\255\091\001\255\255\093\001\255\255\
\255\255\255\255\097\001\098\001\255\255\100\001\255\255\255\255\
\255\255\110\001\105\001\106\001\113\001\255\255\255\255\110\001\
\111\001\112\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\124\001\255\255\255\255\
\255\255\255\255\255\255\136\001\137\001\138\001\139\001\140\001\
\141\001\142\001\143\001\144\001\145\001\146\001\147\001\148\001\
\149\001\150\001\151\001\152\001\153\001\154\001\155\001\156\001\
\157\001\158\001\159\001\160\001\161\001\162\001\163\001\164\001\
\165\001\166\001\001\001\255\255\255\255\255\255\255\255\006\001\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\255\255\255\255\021\001\255\255\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\255\255\037\001\255\255\
\039\001\034\001\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\062\001\
\063\001\064\001\065\001\255\255\255\255\255\255\255\255\255\255\
\071\001\255\255\255\255\255\255\255\255\255\255\077\001\255\255\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\086\001\
\255\255\255\255\089\001\090\001\255\255\255\255\087\001\088\001\
\255\255\255\255\091\001\092\001\093\001\255\255\255\255\096\001\
\097\001\098\001\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\255\255\113\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\124\001\255\255\255\255\255\255\255\255\
\255\255\255\255\137\001\138\001\139\001\140\001\141\001\142\001\
\143\001\144\001\145\001\146\001\147\001\148\001\149\001\150\001\
\151\001\152\001\153\001\154\001\155\001\156\001\157\001\158\001\
\159\001\160\001\161\001\162\001\163\001\164\001\165\001\166\001\
\001\001\255\255\255\255\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\255\255\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\255\255\037\001\255\255\039\001\255\255\
\255\255\042\001\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\061\001\016\001\063\001\064\001\
\065\001\255\255\021\001\255\255\255\255\255\255\071\001\255\255\
\255\255\255\255\255\255\255\255\077\001\255\255\079\001\255\255\
\035\001\255\255\037\001\255\255\039\001\086\001\255\255\042\001\
\089\001\090\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\061\001\255\255\063\001\110\001\255\255\255\255\
\113\001\255\255\255\255\255\255\071\001\255\255\255\255\255\255\
\255\255\255\255\077\001\255\255\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\255\255\255\255\
\137\001\138\001\139\001\140\001\141\001\142\001\143\001\144\001\
\145\001\146\001\147\001\148\001\149\001\150\001\151\001\152\001\
\153\001\154\001\155\001\156\001\157\001\158\001\159\001\160\001\
\161\001\162\001\163\001\164\001\165\001\166\001\001\001\255\255\
\255\255\255\255\255\255\006\001\255\255\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\255\255\255\255\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\255\255\037\001\255\255\039\001\255\255\255\255\042\001\
\255\255\255\255\255\255\255\255\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\061\001\016\001\063\001\064\001\065\001\255\255\
\021\001\255\255\255\255\255\255\071\001\255\255\255\255\255\255\
\255\255\255\255\077\001\255\255\079\001\255\255\035\001\255\255\
\037\001\255\255\039\001\086\001\255\255\042\001\089\001\090\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\110\001\255\255\255\255\113\001\255\255\
\255\255\255\255\071\001\255\255\255\255\255\255\255\255\255\255\
\077\001\255\255\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\086\001\255\255\255\255\255\255\255\255\137\001\138\001\
\139\001\140\001\141\001\142\001\143\001\144\001\145\001\146\001\
\147\001\148\001\149\001\150\001\151\001\152\001\153\001\154\001\
\155\001\156\001\157\001\158\001\159\001\160\001\161\001\162\001\
\163\001\164\001\165\001\166\001\001\001\255\255\255\255\255\255\
\255\255\006\001\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\255\255\255\255\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\255\255\035\001\255\255\
\037\001\255\255\039\001\255\255\255\255\042\001\255\255\255\255\
\255\255\255\255\016\001\255\255\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\064\001\065\001\035\001\255\255\037\001\
\255\255\039\001\071\001\255\255\042\001\255\255\255\255\255\255\
\077\001\255\255\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\086\001\255\255\255\255\089\001\090\001\060\001\061\001\
\255\255\063\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\071\001\255\255\255\255\255\255\255\255\255\255\077\001\
\255\255\110\001\255\255\255\255\113\001\255\255\255\255\255\255\
\086\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\137\001\138\001\139\001\140\001\
\141\001\142\001\143\001\144\001\145\001\146\001\147\001\148\001\
\149\001\150\001\151\001\152\001\153\001\154\001\155\001\156\001\
\157\001\158\001\159\001\160\001\161\001\162\001\163\001\164\001\
\165\001\166\001\001\001\255\255\255\255\255\255\255\255\006\001\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\255\255\255\255\021\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\255\255\037\001\255\255\
\039\001\255\255\002\001\042\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\255\255\
\063\001\064\001\065\001\255\255\255\255\255\255\255\255\255\255\
\071\001\255\255\255\255\035\001\036\001\037\001\077\001\255\255\
\079\001\255\255\042\001\255\255\255\255\255\255\255\255\086\001\
\255\255\255\255\089\001\090\001\255\255\255\255\054\001\055\001\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\255\255\113\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\083\001\084\001\085\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\137\001\138\001\139\001\140\001\141\001\142\001\
\143\001\144\001\145\001\146\001\147\001\148\001\149\001\150\001\
\151\001\152\001\153\001\154\001\155\001\156\001\157\001\158\001\
\159\001\160\001\161\001\162\001\163\001\125\001\165\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\136\001\137\001\138\001\139\001\140\001\141\001\142\001\143\001\
\144\001\145\001\146\001\147\001\148\001\149\001\150\001\151\001\
\152\001\153\001\154\001\155\001\156\001\157\001\158\001\159\001\
\160\001\161\001\162\001\163\001\164\001\165\001\166\001\002\001\
\255\255\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\035\001\036\001\037\001\006\001\255\255\008\001\255\255\042\001\
\255\255\255\255\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\255\255\021\001\054\001\055\001\255\255\255\255\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\255\255\255\255\
\035\001\255\255\037\001\255\255\039\001\255\255\255\255\042\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\083\001\084\001\085\001\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\255\255\255\255\071\001\255\255\255\255\255\255\
\255\255\255\255\077\001\255\255\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\089\001\090\001\
\255\255\255\255\125\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\136\001\137\001\138\001\
\139\001\140\001\141\001\142\001\143\001\144\001\145\001\146\001\
\147\001\148\001\149\001\150\001\151\001\152\001\153\001\154\001\
\155\001\156\001\157\001\158\001\159\001\160\001\161\001\162\001\
\163\001\164\001\165\001\166\001\002\001\255\255\137\001\138\001\
\139\001\140\001\141\001\142\001\143\001\144\001\145\001\255\255\
\147\001\255\255\255\255\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\035\001\255\255\255\255\
\001\001\255\255\255\255\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\255\255\060\001\255\255\
\062\001\255\255\064\001\065\001\255\255\255\255\255\255\255\255\
\255\255\071\001\035\001\255\255\037\001\255\255\039\001\255\255\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\089\001\090\001\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\255\255\255\255\255\255\071\001\255\255\
\110\001\255\255\255\255\113\001\077\001\255\255\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\086\001\255\255\125\001\
\089\001\090\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\136\001\137\001\138\001\139\001\140\001\141\001\
\142\001\143\001\144\001\145\001\146\001\147\001\148\001\149\001\
\150\001\151\001\152\001\153\001\154\001\155\001\156\001\157\001\
\158\001\159\001\160\001\161\001\162\001\163\001\164\001\165\001\
\166\001\002\001\255\255\255\255\255\255\255\255\255\255\255\255\
\137\001\138\001\139\001\140\001\141\001\142\001\255\255\144\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\034\001\035\001\255\255\006\001\255\255\255\255\255\255\
\001\001\255\255\255\255\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\060\001\021\001\062\001\255\255\064\001\
\065\001\035\001\036\001\037\001\255\255\255\255\071\001\255\255\
\042\001\255\255\035\001\255\255\037\001\255\255\039\001\255\255\
\255\255\042\001\255\255\255\255\054\001\055\001\255\255\255\255\
\089\001\090\001\060\001\061\001\255\255\255\255\064\001\255\255\
\255\255\255\255\255\255\060\001\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\255\255\255\255\110\001\071\001\255\255\
\113\001\083\001\084\001\085\001\077\001\255\255\079\001\255\255\
\255\255\255\255\255\255\255\255\125\001\086\001\255\255\255\255\
\089\001\090\001\255\255\255\255\255\255\255\255\255\255\136\001\
\137\001\138\001\139\001\140\001\141\001\142\001\143\001\144\001\
\145\001\146\001\147\001\148\001\149\001\150\001\151\001\152\001\
\153\001\154\001\155\001\156\001\157\001\158\001\159\001\160\001\
\161\001\162\001\163\001\164\001\165\001\166\001\136\001\137\001\
\138\001\139\001\140\001\141\001\142\001\143\001\144\001\145\001\
\146\001\147\001\148\001\149\001\150\001\151\001\152\001\153\001\
\154\001\155\001\156\001\157\001\158\001\159\001\160\001\161\001\
\162\001\163\001\164\001\165\001\166\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\034\001\035\001\255\255\
\006\001\255\255\255\255\255\255\001\001\255\255\255\255\255\255\
\255\255\006\001\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\060\001\
\021\001\062\001\255\255\064\001\065\001\035\001\036\001\037\001\
\255\255\255\255\071\001\255\255\042\001\255\255\035\001\255\255\
\037\001\255\255\039\001\255\255\255\255\042\001\255\255\255\255\
\054\001\055\001\255\255\255\255\089\001\090\001\060\001\061\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\064\001\255\255\255\255\255\255\255\255\
\255\255\110\001\071\001\255\255\113\001\083\001\084\001\085\001\
\077\001\255\255\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\086\001\255\255\255\255\089\001\090\001\255\255\255\255\
\255\255\255\255\255\255\136\001\137\001\138\001\139\001\140\001\
\141\001\142\001\143\001\144\001\145\001\146\001\147\001\148\001\
\149\001\150\001\151\001\152\001\153\001\154\001\155\001\156\001\
\157\001\158\001\159\001\160\001\161\001\162\001\163\001\164\001\
\165\001\166\001\136\001\137\001\138\001\139\001\140\001\141\001\
\142\001\143\001\144\001\145\001\146\001\147\001\148\001\149\001\
\150\001\151\001\152\001\153\001\154\001\155\001\156\001\157\001\
\158\001\159\001\160\001\161\001\162\001\163\001\164\001\165\001\
\166\001\002\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\255\255\255\255\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\035\001\001\001\255\255\043\001\255\255\255\255\
\006\001\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\255\255\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\060\001\255\255\255\255\255\255\064\001\
\065\001\255\255\255\255\255\255\255\255\035\001\071\001\037\001\
\255\255\039\001\255\255\255\255\042\001\255\255\255\255\255\255\
\255\255\087\001\088\001\255\255\255\255\091\001\092\001\093\001\
\089\001\090\001\096\001\097\001\098\001\255\255\060\001\061\001\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\255\255\
\255\255\071\001\255\255\255\255\255\255\110\001\255\255\077\001\
\113\001\079\001\255\255\255\255\255\255\255\255\124\001\255\255\
\086\001\255\255\255\255\089\001\090\001\255\255\255\255\255\255\
\255\255\135\001\255\255\255\255\255\255\255\255\255\255\255\255\
\137\001\138\001\139\001\140\001\141\001\142\001\143\001\144\001\
\145\001\146\001\147\001\148\001\149\001\150\001\151\001\152\001\
\153\001\154\001\155\001\156\001\157\001\158\001\159\001\160\001\
\161\001\162\001\163\001\164\001\165\001\166\001\004\001\005\001\
\255\255\255\255\255\255\137\001\138\001\139\001\140\001\141\001\
\142\001\015\001\144\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\255\255\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\255\255\255\255\043\001\255\255\001\001\
\255\255\255\255\255\255\255\255\050\001\255\255\255\255\053\001\
\255\255\255\255\255\255\057\001\058\001\255\255\016\001\255\255\
\062\001\255\255\255\255\021\001\066\001\255\255\255\255\069\001\
\070\001\255\255\255\255\255\255\074\001\075\001\076\001\255\255\
\255\255\035\001\255\255\037\001\082\001\039\001\255\255\255\255\
\042\001\087\001\088\001\255\255\255\255\091\001\092\001\093\001\
\255\255\255\255\096\001\097\001\098\001\255\255\255\255\101\001\
\255\255\255\255\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\255\255\255\255\071\001\255\255\255\255\
\255\255\255\255\255\255\077\001\255\255\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\086\001\255\255\255\255\255\255\
\255\255\135\001\255\255\137\001\138\001\139\001\140\001\141\001\
\142\001\143\001\144\001\145\001\146\001\147\001\148\001\149\001\
\150\001\151\001\152\001\153\001\154\001\155\001\156\001\157\001\
\158\001\159\001\160\001\161\001\162\001\163\001\164\001\165\001\
\166\001\001\001\255\255\255\255\255\255\255\255\006\001\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\255\255\042\001\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\063\001\
\064\001\255\255\035\001\255\255\037\001\255\255\039\001\071\001\
\255\255\042\001\255\255\255\255\255\255\077\001\255\255\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\086\001\255\255\
\255\255\089\001\090\001\060\001\061\001\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\071\001\255\255\
\255\255\255\255\255\255\255\255\077\001\255\255\110\001\255\255\
\255\255\113\001\255\255\255\255\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\137\001\138\001\139\001\140\001\141\001\142\001\143\001\
\144\001\145\001\146\001\147\001\148\001\149\001\150\001\151\001\
\152\001\153\001\154\001\155\001\156\001\157\001\158\001\159\001\
\160\001\001\001\162\001\255\255\255\255\255\255\006\001\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\255\255\042\001\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\063\001\
\064\001\255\255\035\001\255\255\037\001\255\255\039\001\071\001\
\255\255\042\001\255\255\255\255\255\255\077\001\255\255\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\086\001\255\255\
\255\255\089\001\090\001\060\001\061\001\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\071\001\255\255\
\255\255\255\255\255\255\255\255\077\001\255\255\110\001\255\255\
\255\255\113\001\255\255\255\255\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\137\001\138\001\139\001\140\001\141\001\142\001\143\001\
\144\001\145\001\146\001\147\001\148\001\149\001\150\001\151\001\
\152\001\153\001\154\001\155\001\156\001\157\001\158\001\159\001\
\160\001\001\001\162\001\255\255\255\255\255\255\006\001\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\255\255\042\001\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\063\001\
\064\001\255\255\035\001\255\255\037\001\255\255\039\001\071\001\
\255\255\042\001\255\255\255\255\255\255\077\001\255\255\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\086\001\255\255\
\255\255\089\001\090\001\060\001\061\001\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\071\001\255\255\
\255\255\255\255\255\255\255\255\077\001\255\255\110\001\255\255\
\255\255\113\001\255\255\255\255\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\137\001\138\001\139\001\140\001\141\001\142\001\143\001\
\144\001\145\001\146\001\147\001\148\001\149\001\150\001\151\001\
\152\001\153\001\154\001\155\001\156\001\157\001\001\001\159\001\
\255\255\255\255\255\255\006\001\255\255\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\255\255\255\255\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\035\001\255\255\037\001\255\255\039\001\255\255\255\255\042\001\
\255\255\255\255\255\255\255\255\016\001\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\061\001\255\255\063\001\064\001\255\255\035\001\
\255\255\037\001\255\255\039\001\071\001\255\255\042\001\255\255\
\255\255\255\255\077\001\255\255\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\089\001\090\001\
\060\001\061\001\255\255\063\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\071\001\255\255\255\255\255\255\255\255\
\255\255\077\001\255\255\110\001\255\255\255\255\113\001\255\255\
\255\255\255\255\086\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\137\001\138\001\
\139\001\140\001\141\001\142\001\143\001\144\001\145\001\146\001\
\147\001\148\001\149\001\150\001\151\001\152\001\153\001\154\001\
\155\001\156\001\157\001\001\001\159\001\255\255\255\255\255\255\
\006\001\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\001\001\
\255\255\071\001\255\255\255\255\255\255\255\255\255\255\077\001\
\255\255\079\001\255\255\255\255\014\001\255\255\255\255\255\255\
\086\001\255\255\255\255\089\001\090\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\255\255\036\001\255\255\255\255\255\255\255\255\255\255\
\110\001\043\001\044\001\113\001\046\001\255\255\048\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\067\001\255\255\137\001\138\001\139\001\140\001\141\001\
\142\001\143\001\144\001\145\001\146\001\147\001\148\001\149\001\
\150\001\151\001\152\001\153\001\154\001\001\001\156\001\255\255\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\097\001\
\098\001\255\255\100\001\255\255\016\001\017\001\018\001\105\001\
\106\001\021\001\255\255\255\255\110\001\111\001\112\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\255\255\037\001\124\001\039\001\255\255\255\255\042\001\255\255\
\255\255\255\255\132\001\133\001\134\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\061\001\255\255\063\001\064\001\255\255\255\255\255\255\
\255\255\255\255\255\255\071\001\255\255\255\255\255\255\255\255\
\255\255\077\001\255\255\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\086\001\255\255\255\255\089\001\090\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\110\001\255\255\255\255\113\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\137\001\138\001\139\001\
\140\001\141\001\142\001\143\001\144\001\145\001\146\001\147\001\
\148\001\149\001\150\001\151\001\152\001\153\001\154\001\001\001\
\156\001\255\255\255\255\255\255\006\001\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\037\001\255\255\039\001\255\255\255\255\
\042\001\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\060\001\061\001\016\001\063\001\064\001\255\255\
\255\255\021\001\255\255\255\255\255\255\071\001\255\255\255\255\
\255\255\255\255\255\255\077\001\255\255\079\001\255\255\035\001\
\255\255\037\001\255\255\039\001\086\001\255\255\042\001\089\001\
\090\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\061\001\255\255\063\001\064\001\255\255\255\255\113\001\
\255\255\255\255\255\255\071\001\255\255\255\255\255\255\255\255\
\255\255\077\001\255\255\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\086\001\255\255\255\255\089\001\090\001\137\001\
\138\001\139\001\140\001\141\001\142\001\143\001\144\001\145\001\
\146\001\147\001\148\001\149\001\150\001\151\001\255\255\153\001\
\255\255\255\255\255\255\255\255\255\255\113\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\137\001\138\001\139\001\
\140\001\141\001\142\001\143\001\144\001\145\001\146\001\147\001\
\148\001\149\001\150\001\151\001\001\001\153\001\255\255\255\255\
\255\255\006\001\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\037\001\255\255\039\001\255\255\255\255\042\001\255\255\255\255\
\255\255\255\255\001\001\255\255\255\255\255\255\255\255\006\001\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\016\001\063\001\064\001\255\255\255\255\021\001\255\255\
\255\255\255\255\071\001\255\255\255\255\255\255\255\255\255\255\
\077\001\255\255\079\001\255\255\035\001\255\255\037\001\255\255\
\039\001\086\001\255\255\042\001\089\001\090\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\255\255\
\063\001\064\001\255\255\255\255\255\255\255\255\255\255\255\255\
\071\001\255\255\255\255\255\255\255\255\255\255\077\001\255\255\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\086\001\
\255\255\255\255\089\001\090\001\137\001\138\001\139\001\140\001\
\141\001\142\001\143\001\144\001\145\001\146\001\147\001\148\001\
\149\001\150\001\151\001\255\255\153\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\255\255\255\255\
\255\255\006\001\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\255\255\137\001\138\001\139\001\140\001\141\001\142\001\
\143\001\144\001\145\001\146\001\147\001\148\001\035\001\150\001\
\037\001\255\255\039\001\255\255\255\255\042\001\255\255\255\255\
\255\255\255\255\001\001\255\255\255\255\255\255\255\255\006\001\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\016\001\063\001\064\001\255\255\255\255\021\001\255\255\
\255\255\255\255\071\001\255\255\255\255\255\255\255\255\255\255\
\077\001\255\255\079\001\255\255\035\001\255\255\037\001\255\255\
\039\001\086\001\255\255\042\001\089\001\090\001\255\255\255\255\
\001\001\255\255\255\255\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\016\001\
\063\001\064\001\255\255\255\255\021\001\255\255\255\255\255\255\
\071\001\255\255\255\255\255\255\255\255\255\255\077\001\255\255\
\079\001\255\255\035\001\255\255\037\001\255\255\039\001\086\001\
\255\255\042\001\089\001\090\001\137\001\138\001\139\001\140\001\
\141\001\142\001\143\001\144\001\145\001\146\001\147\001\148\001\
\255\255\150\001\255\255\060\001\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\255\255\255\255\255\255\071\001\255\255\
\255\255\255\255\255\255\255\255\077\001\255\255\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\086\001\255\255\255\255\
\089\001\090\001\137\001\138\001\139\001\140\001\141\001\142\001\
\143\001\144\001\145\001\255\255\147\001\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\255\255\255\255\006\001\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\137\001\138\001\139\001\035\001\141\001\037\001\255\255\039\001\
\255\255\255\255\042\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\063\001\
\064\001\255\255\255\255\255\255\255\255\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\255\255\077\001\001\001\079\001\
\255\255\004\001\005\001\255\255\255\255\255\255\086\001\010\001\
\011\001\089\001\090\001\255\255\015\001\255\255\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\255\255\255\255\031\001\032\001\033\001\034\001\
\255\255\036\001\255\255\255\255\255\255\255\255\255\255\255\255\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\050\001\
\255\255\255\255\053\001\255\255\255\255\255\255\057\001\058\001\
\255\255\255\255\138\001\255\255\255\255\255\255\255\255\066\001\
\255\255\255\255\069\001\070\001\255\255\255\255\255\255\074\001\
\075\001\076\001\255\255\255\255\255\255\255\255\255\255\082\001\
\255\255\255\255\255\255\086\001\087\001\088\001\255\255\255\255\
\091\001\092\001\093\001\255\255\255\255\096\001\097\001\098\001\
\099\001\255\255\101\001\255\255\255\255\255\255\255\255\255\255\
\107\001\108\001\109\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\126\001\127\001\128\001\129\001\130\001\
\131\001\255\255\001\001\255\255\135\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\032\001\033\001\034\001\255\255\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\255\255\053\001\255\255\
\255\255\255\255\057\001\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\066\001\255\255\255\255\069\001\070\001\
\255\255\255\255\255\255\074\001\075\001\076\001\255\255\255\255\
\255\255\255\255\255\255\082\001\255\255\255\255\255\255\255\255\
\087\001\088\001\255\255\255\255\091\001\092\001\093\001\255\255\
\255\255\096\001\097\001\098\001\255\255\255\255\101\001\255\255\
\255\255\255\255\255\255\255\255\107\001\108\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\126\001\
\127\001\128\001\129\001\130\001\131\001\004\001\005\001\255\255\
\135\001\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\255\255\053\001\255\255\
\255\255\255\255\057\001\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\066\001\255\255\255\255\069\001\070\001\
\255\255\255\255\255\255\074\001\075\001\076\001\255\255\255\255\
\255\255\255\255\255\255\082\001\255\255\255\255\255\255\255\255\
\087\001\088\001\255\255\255\255\091\001\092\001\093\001\255\255\
\255\255\096\001\097\001\098\001\255\255\255\255\101\001\255\255\
\255\255\255\255\255\255\255\255\107\001\108\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\126\001\
\127\001\128\001\129\001\130\001\131\001\004\001\005\001\255\255\
\135\001\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\032\001\033\001\034\001\255\255\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\255\255\053\001\255\255\
\255\255\255\255\057\001\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\066\001\255\255\255\255\069\001\070\001\
\255\255\255\255\255\255\074\001\075\001\076\001\255\255\255\255\
\255\255\255\255\255\255\082\001\255\255\255\255\255\255\255\255\
\087\001\088\001\255\255\255\255\091\001\092\001\093\001\255\255\
\255\255\096\001\097\001\098\001\255\255\255\255\101\001\255\255\
\255\255\255\255\255\255\255\255\107\001\108\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\126\001\
\127\001\128\001\129\001\130\001\131\001\004\001\005\001\255\255\
\135\001\255\255\255\255\010\001\255\255\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\255\255\053\001\255\255\
\255\255\255\255\057\001\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\066\001\255\255\255\255\069\001\070\001\
\255\255\255\255\255\255\074\001\075\001\076\001\255\255\255\255\
\255\255\255\255\255\255\082\001\255\255\255\255\255\255\255\255\
\087\001\088\001\255\255\255\255\091\001\092\001\093\001\004\001\
\005\001\096\001\097\001\098\001\255\255\010\001\101\001\255\255\
\255\255\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\131\001\255\255\043\001\255\255\
\135\001\255\255\255\255\255\255\255\255\050\001\255\255\255\255\
\053\001\255\255\255\255\255\255\057\001\058\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\066\001\255\255\255\255\
\069\001\070\001\255\255\255\255\255\255\074\001\075\001\076\001\
\255\255\255\255\255\255\255\255\255\255\082\001\255\255\255\255\
\255\255\255\255\087\001\088\001\255\255\255\255\091\001\092\001\
\093\001\004\001\005\001\096\001\097\001\098\001\255\255\255\255\
\101\001\255\255\255\255\255\255\015\001\255\255\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\255\255\255\255\255\255\255\255\131\001\255\255\
\043\001\255\255\135\001\255\255\255\255\255\255\255\255\050\001\
\255\255\255\255\053\001\255\255\255\255\255\255\057\001\058\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\066\001\
\255\255\255\255\069\001\070\001\255\255\255\255\073\001\074\001\
\075\001\076\001\255\255\255\255\255\255\255\255\255\255\082\001\
\255\255\255\255\255\255\255\255\087\001\088\001\255\255\255\255\
\091\001\092\001\093\001\004\001\005\001\096\001\097\001\098\001\
\255\255\255\255\101\001\255\255\255\255\255\255\015\001\255\255\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\036\001\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\255\255\135\001\255\255\255\255\255\255\
\255\255\050\001\255\255\255\255\053\001\255\255\255\255\255\255\
\057\001\058\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\066\001\255\255\255\255\069\001\070\001\255\255\255\255\
\255\255\074\001\075\001\076\001\255\255\255\255\255\255\255\255\
\255\255\082\001\255\255\255\255\255\255\255\255\087\001\088\001\
\255\255\255\255\091\001\092\001\093\001\004\001\005\001\096\001\
\097\001\098\001\255\255\010\001\101\001\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\032\001\033\001\034\001\255\255\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\135\001\255\255\
\255\255\255\255\255\255\050\001\255\255\255\255\053\001\255\255\
\255\255\255\255\057\001\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\066\001\255\255\255\255\069\001\070\001\
\255\255\255\255\255\255\074\001\075\001\076\001\255\255\255\255\
\255\255\255\255\255\255\082\001\255\255\255\255\255\255\086\001\
\087\001\088\001\255\255\255\255\091\001\092\001\093\001\004\001\
\005\001\096\001\097\001\098\001\255\255\010\001\101\001\255\255\
\255\255\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\255\255\255\255\031\001\032\001\033\001\034\001\255\255\036\001\
\255\255\255\255\255\255\255\255\131\001\255\255\043\001\255\255\
\135\001\255\255\255\255\255\255\255\255\050\001\255\255\255\255\
\053\001\255\255\255\255\255\255\057\001\058\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\066\001\255\255\255\255\
\069\001\070\001\255\255\255\255\255\255\074\001\075\001\076\001\
\255\255\255\255\255\255\255\255\255\255\082\001\255\255\255\255\
\255\255\255\255\087\001\088\001\255\255\255\255\091\001\092\001\
\093\001\004\001\005\001\096\001\097\001\098\001\255\255\255\255\
\101\001\255\255\255\255\255\255\015\001\255\255\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\255\255\255\255\031\001\032\001\033\001\034\001\
\255\255\036\001\255\255\255\255\255\255\255\255\131\001\042\001\
\043\001\255\255\135\001\255\255\255\255\255\255\255\255\050\001\
\255\255\255\255\053\001\255\255\255\255\255\255\057\001\058\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\066\001\
\255\255\255\255\069\001\070\001\255\255\255\255\255\255\074\001\
\075\001\076\001\255\255\255\255\255\255\255\255\255\255\082\001\
\255\255\255\255\255\255\255\255\087\001\088\001\255\255\255\255\
\091\001\092\001\093\001\004\001\005\001\096\001\097\001\098\001\
\255\255\255\255\101\001\255\255\255\255\255\255\015\001\255\255\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\255\255\135\001\255\255\255\255\255\255\
\255\255\050\001\255\255\255\255\053\001\255\255\255\255\255\255\
\057\001\058\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\066\001\255\255\255\255\069\001\070\001\255\255\255\255\
\255\255\074\001\075\001\076\001\255\255\255\255\255\255\255\255\
\255\255\082\001\255\255\255\255\255\255\255\255\087\001\088\001\
\255\255\255\255\091\001\092\001\093\001\004\001\005\001\096\001\
\097\001\098\001\255\255\255\255\101\001\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\032\001\033\001\034\001\255\255\036\001\255\255\255\255\
\255\255\255\255\255\255\042\001\043\001\255\255\135\001\255\255\
\255\255\255\255\255\255\050\001\255\255\255\255\053\001\255\255\
\255\255\255\255\057\001\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\066\001\255\255\255\255\069\001\070\001\
\255\255\255\255\255\255\074\001\075\001\076\001\255\255\255\255\
\255\255\255\255\255\255\082\001\255\255\255\255\255\255\255\255\
\087\001\088\001\255\255\255\255\091\001\092\001\093\001\004\001\
\005\001\096\001\097\001\098\001\255\255\255\255\101\001\255\255\
\255\255\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\255\255\255\255\031\001\032\001\033\001\034\001\255\255\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\255\255\
\135\001\255\255\255\255\255\255\255\255\050\001\255\255\255\255\
\053\001\255\255\255\255\255\255\057\001\058\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\066\001\255\255\255\255\
\069\001\070\001\255\255\255\255\255\255\074\001\075\001\076\001\
\255\255\255\255\255\255\255\255\255\255\082\001\255\255\255\255\
\255\255\255\255\087\001\088\001\255\255\255\255\091\001\092\001\
\093\001\004\001\005\001\096\001\097\001\098\001\255\255\255\255\
\101\001\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\255\255\020\001\255\255\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\036\001\004\001\005\001\255\255\255\255\255\255\255\255\
\043\001\255\255\135\001\255\255\255\255\255\255\255\255\050\001\
\255\255\255\255\020\001\255\255\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\255\255\255\255\255\255\255\255\255\255\
\034\001\255\255\036\001\070\001\255\255\255\255\255\255\255\255\
\255\255\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\050\001\255\255\255\255\255\255\087\001\088\001\255\255\255\255\
\091\001\092\001\093\001\255\255\255\255\096\001\097\001\098\001\
\255\255\255\255\101\001\255\255\070\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\004\001\005\001\255\255\255\255\087\001\088\001\010\001\
\011\001\091\001\092\001\093\001\255\255\016\001\096\001\097\001\
\255\255\255\255\021\001\101\001\135\001\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\001\001\255\255\255\255\255\255\
\035\001\255\255\037\001\255\255\039\001\255\255\255\255\042\001\
\255\255\255\255\045\001\016\001\047\001\255\255\049\001\255\255\
\021\001\255\255\255\255\054\001\255\255\056\001\255\255\255\255\
\255\255\060\001\061\001\062\001\063\001\064\001\035\001\255\255\
\037\001\068\001\039\001\255\255\071\001\042\001\255\255\255\255\
\255\255\255\255\077\001\097\001\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\064\001\255\255\255\255\255\255\255\255\
\255\255\255\255\071\001\255\255\255\255\255\255\255\255\255\255\
\077\001\255\255\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\086\001\255\255\137\001\138\001\139\001\140\001\141\001\
\142\001\143\001\144\001\145\001\146\001\147\001\148\001\149\001\
\150\001\151\001\152\001\153\001\154\001\155\001\156\001\157\001\
\158\001\159\001\160\001\161\001\162\001\163\001\164\001\165\001\
\166\001\136\001\137\001\138\001\139\001\140\001\141\001\142\001\
\143\001\144\001\145\001\146\001\147\001\148\001\149\001\150\001\
\151\001\152\001\153\001\154\001\155\001\156\001\157\001\158\001\
\159\001\160\001\161\001\162\001\163\001\164\001\165\001\166\001\
\137\001\138\001\139\001\140\001\141\001\142\001\143\001\144\001\
\145\001\146\001\147\001\148\001\149\001\150\001\151\001\152\001\
\153\001\154\001\155\001\156\001\157\001\158\001\159\001\160\001\
\161\001\162\001\163\001\164\001\165\001\166\001\137\001\138\001\
\139\001\140\001\141\001\142\001\143\001\144\001\145\001\146\001\
\147\001\148\001\149\001\150\001\151\001\152\001\153\001\154\001\
\155\001\156\001\157\001\158\001\159\001\160\001\161\001\162\001\
\163\001\164\001\165\001\166\001"

let yynames_const = "\
  END\000\
  EQ\000\
  IN\000\
  FUN\000\
  LINFUN\000\
  RARROW\000\
  LOLLI\000\
  FATRARROW\000\
  MINUSLBRACE\000\
  VAR\000\
  OP\000\
  SQUIGRARROW\000\
  SQUIGLOLLI\000\
  TILDE\000\
  IF\000\
  ELSE\000\
  MINUS\000\
  MINUSDOT\000\
  SWITCH\000\
  RECEIVE\000\
  CASE\000\
  SPAWN\000\
  SPAWNANGEL\000\
  SPAWNDEMON\000\
  SPAWNWAIT\000\
  HANDLE\000\
  SHALLOWHANDLE\000\
  OPEN\000\
  HANDLER\000\
  SHALLOWHANDLER\000\
  OFFER\000\
  SELECT\000\
  DOOP\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACEBAR\000\
  BARRBRACE\000\
  LQUOTE\000\
  RQUOTE\000\
  RBRACKET\000\
  LBRACKET\000\
  LBRACKETBAR\000\
  BARRBRACKET\000\
  LBRACKETPLUSBAR\000\
  BARPLUSRBRACKET\000\
  LBRACKETAMPBAR\000\
  BARAMPRBRACKET\000\
  LEFTTRIANGLE\000\
  RIGHTTRIANGLE\000\
  NU\000\
  FOR\000\
  LARROW\000\
  LLARROW\000\
  WHERE\000\
  FORMLET\000\
  PAGE\000\
  LRARROW\000\
  COMMA\000\
  VBAR\000\
  DOT\000\
  DOTDOT\000\
  COLON\000\
  COLONCOLON\000\
  TABLE\000\
  TABLEHANDLE\000\
  FROM\000\
  DATABASE\000\
  QUERY\000\
  WITH\000\
  YIELDS\000\
  ORDERBY\000\
  UPDATE\000\
  DELETE\000\
  INSERT\000\
  VALUES\000\
  SET\000\
  RETURNING\000\
  READONLY\000\
  DEFAULT\000\
  ESCAPE\000\
  CLIENT\000\
  SERVER\000\
  NATIVE\000\
  SEMICOLON\000\
  TRUE\000\
  FALSE\000\
  BARBAR\000\
  AMPAMP\000\
  RXML\000\
  SLASHRXML\000\
  MU\000\
  FORALL\000\
  ALIEN\000\
  SIG\000\
  INCLUDE\000\
  BANG\000\
  QUESTION\000\
  PERCENT\000\
  EQUALSTILDE\000\
  PLUS\000\
  STAR\000\
  ALTERNATE\000\
  SLASH\000\
  SSLASH\000\
  CARET\000\
  DOLLAR\000\
  UNDERSCORE\000\
  AS\000\
  TYPENAME\000\
  TYPE\000\
  ROW\000\
  PRESENCE\000\
  "

let yynames_block = "\
  UINTEGER\000\
  UFLOAT\000\
  STRING\000\
  CDATA\000\
  REGEXREPL\000\
  CHAR\000\
  VARIABLE\000\
  CONSTRUCTOR\000\
  KEYWORD\000\
  PERCENTVAR\000\
  LXML\000\
  ENDTAG\000\
  RANGE\000\
  QUOTEDMETA\000\
  SLASHFLAGS\000\
  INFIX\000\
  INFIXL\000\
  INFIXR\000\
  PREFIX\000\
  POSTFIX\000\
  PREFIXOP\000\
  POSTFIXOP\000\
  INFIX0\000\
  INFIXL0\000\
  INFIXR0\000\
  INFIX1\000\
  INFIXL1\000\
  INFIXR1\000\
  INFIX2\000\
  INFIXL2\000\
  INFIXR2\000\
  INFIX3\000\
  INFIXL3\000\
  INFIXR3\000\
  INFIX4\000\
  INFIXL4\000\
  INFIXR4\000\
  INFIX5\000\
  INFIXL5\000\
  INFIXR5\000\
  INFIX6\000\
  INFIXL6\000\
  INFIXR6\000\
  INFIX7\000\
  INFIXL7\000\
  INFIXR7\000\
  INFIX8\000\
  INFIXL8\000\
  INFIXR8\000\
  INFIX9\000\
  INFIXL9\000\
  INFIXR9\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'preamble_declaration) in
    Obj.repr(
# 254 "parser_links.mly"
                                                               ( `Definitions [_1] )
# 2936 "parser_links.ml"
               : Sugartypes.sentence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nofun_declaration) in
    Obj.repr(
# 255 "parser_links.mly"
                                                               ( `Definitions [_1] )
# 2943 "parser_links.ml"
               : Sugartypes.sentence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fun_declarations) in
    Obj.repr(
# 256 "parser_links.mly"
                                                               ( `Definitions _1 )
# 2950 "parser_links.ml"
               : Sugartypes.sentence))
; (fun __caml_parser_env ->
    Obj.repr(
# 257 "parser_links.mly"
                                                               ( `Definitions [] )
# 2956 "parser_links.ml"
               : Sugartypes.sentence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 258 "parser_links.mly"
                                                               ( `Expression _1 )
# 2963 "parser_links.ml"
               : Sugartypes.sentence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'directive) in
    Obj.repr(
# 259 "parser_links.mly"
                                                               ( `Directive _1 )
# 2970 "parser_links.ml"
               : Sugartypes.sentence))
; (fun __caml_parser_env ->
    Obj.repr(
# 260 "parser_links.mly"
                                                               ( `Directive ("quit", []) (* rather hackish *) )
# 2976 "parser_links.ml"
               : Sugartypes.sentence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'preamble) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 263 "parser_links.mly"
                                                               ( _1 @ _2, Some _3 )
# 2985 "parser_links.ml"
               : Sugartypes.binding list * Sugartypes.phrase option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preamble) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 264 "parser_links.mly"
                                                               ( _1, Some _2 )
# 2993 "parser_links.ml"
               : Sugartypes.binding list * Sugartypes.phrase option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preamble) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarations) in
    Obj.repr(
# 265 "parser_links.mly"
                                                               ( _1 @ _2, None )
# 3001 "parser_links.ml"
               : Sugartypes.binding list * Sugartypes.phrase option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 268 "parser_links.mly"
                                                               ( (_1, _2) )
# 3009 "parser_links.ml"
               : 'directive))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "parser_links.mly"
                                                               ( [] )
# 3015 "parser_links.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arg) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 272 "parser_links.mly"
                                                               ( _1 :: _2 )
# 3023 "parser_links.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 275 "parser_links.mly"
                                                               ( _1 )
# 3030 "parser_links.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 276 "parser_links.mly"
                                                               ( _1 )
# 3037 "parser_links.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 277 "parser_links.mly"
                                                               ( _1 )
# 3044 "parser_links.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 278 "parser_links.mly"
                                                               ( string_of_int _1 )
# 3051 "parser_links.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 279 "parser_links.mly"
                                                               ( string_of_float' _1 )
# 3058 "parser_links.ml"
               : 'arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "parser_links.mly"
                                                               ( "true" )
# 3064 "parser_links.ml"
               : 'arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "parser_links.mly"
                                                               ( "false" )
# 3070 "parser_links.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 284 "parser_links.mly"
                                                               ( _1, pos() )
# 3077 "parser_links.ml"
               : 'var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'preamble_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'preamble) in
    Obj.repr(
# 287 "parser_links.mly"
                                                               ( _1 :: _2 )
# 3085 "parser_links.ml"
               : 'preamble))
; (fun __caml_parser_env ->
    Obj.repr(
# 288 "parser_links.mly"
                                                               ( [] )
# 3091 "parser_links.ml"
               : 'preamble))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 291 "parser_links.mly"
                                                               ( _1 @ [_2] )
# 3099 "parser_links.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 292 "parser_links.mly"
                                                               ( [_1] )
# 3106 "parser_links.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fun_declaration) in
    Obj.repr(
# 295 "parser_links.mly"
                                                               ( _1 )
# 3113 "parser_links.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nofun_declaration) in
    Obj.repr(
# 296 "parser_links.mly"
                                                               ( _1 )
# 3120 "parser_links.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 299 "parser_links.mly"
                                                               ( `Include _2, pos() )
# 3127 "parser_links.ml"
               : 'preamble_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.datatype) in
    Obj.repr(
# 302 "parser_links.mly"
                                                               ( let (name, name_pos) = _3 in
                                                                   `Foreign ((name, None, name_pos), _2, datatype _5), pos() )
# 3137 "parser_links.ml"
               : 'nofun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fixity) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'perhaps_uinteger) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'op) in
    Obj.repr(
# 304 "parser_links.mly"
                                                               ( let assoc, set = _1 in
                                                                   set assoc (from_option default_fixity _2) (fst _3);
                                                                   (`Infix, pos()) )
# 3148 "parser_links.ml"
               : 'nofun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tlvarbinding) in
    Obj.repr(
# 307 "parser_links.mly"
                                                               ( let ((d,dpos),p,l), pos = _1
                                                                 in `Val ([], (`Variable (d, None, dpos), pos),p,l,None), pos )
# 3156 "parser_links.ml"
               : 'nofun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'signature) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tlvarbinding) in
    Obj.repr(
# 309 "parser_links.mly"
                                                               ( annotate _1 (`Var _2) )
# 3164 "parser_links.ml"
               : 'nofun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedecl) in
    Obj.repr(
# 310 "parser_links.mly"
                                                               ( _1 )
# 3171 "parser_links.ml"
               : 'nofun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fun_declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_declaration) in
    Obj.repr(
# 313 "parser_links.mly"
                                                               ( _1 @ [_2] )
# 3179 "parser_links.ml"
               : 'fun_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fun_declaration) in
    Obj.repr(
# 314 "parser_links.mly"
                                                               ( [_1] )
# 3186 "parser_links.ml"
               : 'fun_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Sugartypes.name * Sugartypes.position) * Sugartypes.declared_linearity * Sugartypes.funlit * Sugartypes.location * Sugartypes.position) in
    Obj.repr(
# 317 "parser_links.mly"
                                                               ( let ((d,dpos),lin,p,l,pos) = _1 in
                                                                 `Fun ((d, None, dpos),lin,([],p),l,None), pos )
# 3194 "parser_links.ml"
               : 'fun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'signature) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : (Sugartypes.name * Sugartypes.position) * Sugartypes.declared_linearity * Sugartypes.funlit * Sugartypes.location * Sugartypes.position) in
    Obj.repr(
# 319 "parser_links.mly"
                                                               ( annotate _1 (`Fun _2) )
# 3202 "parser_links.ml"
               : 'fun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'signature) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typed_handler_binding) in
    Obj.repr(
# 320 "parser_links.mly"
                                                               ( annotate _1 (`Handler _2) )
# 3210 "parser_links.ml"
               : 'fun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typed_handler_binding) in
    Obj.repr(
# 321 "parser_links.mly"
                                                               ( let (b, spec, hnlit, pos) = _1 in
								 `Handler (b, spec, hnlit, None), pos )
# 3218 "parser_links.ml"
               : 'fun_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'handler_specialization) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'handled_computation) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'handler_parameterization) in
    Obj.repr(
# 325 "parser_links.mly"
                                                                           ( let binder = (fst _3, None, snd _3) in									       
			   						     let hnlit  = (_2, fst _4, snd _4) in
 									     (binder, _1, hnlit, pos()) )
# 3230 "parser_links.ml"
               : 'typed_handler_binding))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "parser_links.mly"
                                                              ( (`Any, pos()) )
# 3236 "parser_links.ml"
               : 'handled_computation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.pattern) in
    Obj.repr(
# 331 "parser_links.mly"
                                                              ( _2 )
# 3243 "parser_links.ml"
               : 'handled_computation))
; (fun __caml_parser_env ->
    Obj.repr(
# 334 "parser_links.mly"
                                                               ( None )
# 3249 "parser_links.ml"
               : 'perhaps_uinteger))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 335 "parser_links.mly"
                                                               ( Some _1 )
# 3256 "parser_links.ml"
               : 'perhaps_uinteger))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 338 "parser_links.mly"
                                                               ( _1, pos() )
# 3263 "parser_links.ml"
               : 'prefixop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 341 "parser_links.mly"
                                                               ( _1, pos() )
# 3270 "parser_links.ml"
               : 'postfixop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'arg_lists) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_location) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 344 "parser_links.mly"
                                                               ( (_2, `Unl, (_3, (`Block _5, pos ())), _4, pos ()) )
# 3280 "parser_links.ml"
               : (Sugartypes.name * Sugartypes.position) * Sugartypes.declared_linearity * Sugartypes.funlit * Sugartypes.location * Sugartypes.position))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'arg_lists) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_location) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 345 "parser_links.mly"
                                                               ( (_2, `Lin, (_3, (`Block _5, pos ())), _4, pos ()) )
# 3290 "parser_links.ml"
               : (Sugartypes.name * Sugartypes.position) * Sugartypes.declared_linearity * Sugartypes.funlit * Sugartypes.location * Sugartypes.position))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Sugartypes.pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'op) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_location) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 346 "parser_links.mly"
                                                               ( (_3, `Unl, ([[_2; _4]], (`Block _6, pos ())), _5, pos ()) )
# 3301 "parser_links.ml"
               : (Sugartypes.name * Sugartypes.position) * Sugartypes.declared_linearity * Sugartypes.funlit * Sugartypes.location * Sugartypes.position))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'prefixop) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_location) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 347 "parser_links.mly"
                                                               ( (_2, `Unl, ([[_3]], (`Block _5, pos ())), _4, pos ()) )
# 3311 "parser_links.ml"
               : (Sugartypes.name * Sugartypes.position) * Sugartypes.declared_linearity * Sugartypes.funlit * Sugartypes.location * Sugartypes.position))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'postfixop) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_location) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 348 "parser_links.mly"
                                                               ( (_3, `Unl, ([[_2]], (`Block _5, pos ())), _4, pos ()) )
# 3321 "parser_links.ml"
               : (Sugartypes.name * Sugartypes.position) * Sugartypes.declared_linearity * Sugartypes.funlit * Sugartypes.location * Sugartypes.position))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'perhaps_location) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 351 "parser_links.mly"
                                                               ( (_2, _5, _3), pos() )
# 3330 "parser_links.ml"
               : 'tlvarbinding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 354 "parser_links.mly"
                                                               ( _2, datatype _4 )
# 3338 "parser_links.ml"
               : 'signature))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'op) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 355 "parser_links.mly"
                                                               ( _2, datatype _4 )
# 3346 "parser_links.ml"
               : 'signature))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeargs_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 358 "parser_links.mly"
                                                               ( `Type (_2, _3, datatype _5), pos()  )
# 3355 "parser_links.ml"
               : 'typedecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 361 "parser_links.mly"
                                                               ( [] )
# 3361 "parser_links.ml"
               : 'typeargs_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'varlist) in
    Obj.repr(
# 362 "parser_links.mly"
                                                               ( _2 )
# 3368 "parser_links.ml"
               : 'typeargs_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 366 "parser_links.mly"
                                                               ( full_kind_of (pos()) _2 _4 _6 )
# 3377 "parser_links.ml"
               : 'kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 367 "parser_links.mly"
                                                               ( kind_of (pos()) _2 )
# 3384 "parser_links.ml"
               : 'kind))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 370 "parser_links.mly"
                                                               ( full_subkind_of (pos()) _3 _5 )
# 3392 "parser_links.ml"
               : 'subkind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 371 "parser_links.mly"
                                                               ( subkind_of (pos()) _2 )
# 3399 "parser_links.ml"
               : 'subkind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 374 "parser_links.mly"
                                                               ( ((_1, (`Type, (`Unl, `Any)), `Rigid), None) )
# 3406 "parser_links.ml"
               : 'typearg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'kind) in
    Obj.repr(
# 375 "parser_links.mly"
                                                               ( (attach_kind (pos()) (_1, _2), None) )
# 3414 "parser_links.ml"
               : 'typearg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typearg) in
    Obj.repr(
# 378 "parser_links.mly"
                                                               ( [_1] )
# 3421 "parser_links.ml"
               : 'varlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typearg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varlist) in
    Obj.repr(
# 379 "parser_links.mly"
                                                               ( _1 :: _3 )
# 3429 "parser_links.ml"
               : 'varlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : [`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit) in
    Obj.repr(
# 382 "parser_links.mly"
                                                               ( `None, _1 )
# 3436 "parser_links.ml"
               : 'fixity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : [`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit) in
    Obj.repr(
# 383 "parser_links.mly"
                                                               ( `Left, _1 )
# 3443 "parser_links.ml"
               : 'fixity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : [`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit) in
    Obj.repr(
# 384 "parser_links.mly"
                                                               ( `Right, _1 )
# 3450 "parser_links.ml"
               : 'fixity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : [`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit) in
    Obj.repr(
# 385 "parser_links.mly"
                                                               ( `Pre, _1 )
# 3457 "parser_links.ml"
               : 'fixity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : [`Left|`Right|`None|`Pre|`Post] -> int -> string -> unit) in
    Obj.repr(
# 386 "parser_links.mly"
                                                               ( `Post, _1 )
# 3464 "parser_links.ml"
               : 'fixity))
; (fun __caml_parser_env ->
    Obj.repr(
# 389 "parser_links.mly"
                                                               ( `Server )
# 3470 "parser_links.ml"
               : 'perhaps_location))
; (fun __caml_parser_env ->
    Obj.repr(
# 390 "parser_links.mly"
                                                               ( `Client )
# 3476 "parser_links.ml"
               : 'perhaps_location))
; (fun __caml_parser_env ->
    Obj.repr(
# 391 "parser_links.mly"
                                                               ( `Native )
# 3482 "parser_links.ml"
               : 'perhaps_location))
; (fun __caml_parser_env ->
    Obj.repr(
# 392 "parser_links.mly"
                                                               ( `Unknown )
# 3488 "parser_links.ml"
               : 'perhaps_location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 395 "parser_links.mly"
                                                               ( `Int _1    , pos() )
# 3495 "parser_links.ml"
               : Sugartypes.constant * Sugartypes.position))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 396 "parser_links.mly"
                                                               ( `Float _1  , pos() )
# 3502 "parser_links.ml"
               : Sugartypes.constant * Sugartypes.position))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 397 "parser_links.mly"
                                                               ( `String _1 , pos() )
# 3509 "parser_links.ml"
               : Sugartypes.constant * Sugartypes.position))
; (fun __caml_parser_env ->
    Obj.repr(
# 398 "parser_links.mly"
                                                               ( `Bool true , pos() )
# 3515 "parser_links.ml"
               : Sugartypes.constant * Sugartypes.position))
; (fun __caml_parser_env ->
    Obj.repr(
# 399 "parser_links.mly"
                                                               ( `Bool false, pos() )
# 3521 "parser_links.ml"
               : Sugartypes.constant * Sugartypes.position))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 400 "parser_links.mly"
                                                               ( `Char _1   , pos() )
# 3528 "parser_links.ml"
               : Sugartypes.constant * Sugartypes.position))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 403 "parser_links.mly"
                                                               ( `Var _1, pos() )
# 3535 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.constant * Sugartypes.position) in
    Obj.repr(
# 404 "parser_links.mly"
                                                               ( let c, p = _1 in `Constant c, p )
# 3542 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parenthesized_thing) in
    Obj.repr(
# 405 "parser_links.mly"
                                                               ( _1 )
# 3549 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "parser_links.mly"
                                                               ( `Var "receive", pos() )
# 3555 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 411 "parser_links.mly"
                                                               ( _1, None, pos () )
# 3562 "parser_links.ml"
               : 'cp_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 414 "parser_links.mly"
                                                               ( _1 )
# 3569 "parser_links.ml"
               : 'cp_label))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'cp_label) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cp_expression) in
    Obj.repr(
# 417 "parser_links.mly"
                                                               ( _2, _4 )
# 3577 "parser_links.ml"
               : 'cp_case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cp_case) in
    Obj.repr(
# 420 "parser_links.mly"
                                                               ( [_1] )
# 3584 "parser_links.ml"
               : 'cp_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cp_case) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cp_cases) in
    Obj.repr(
# 421 "parser_links.mly"
                                                               ( _1 :: _2 )
# 3592 "parser_links.ml"
               : 'cp_cases))
; (fun __caml_parser_env ->
    Obj.repr(
# 424 "parser_links.mly"
                                                               ( [] )
# 3598 "parser_links.ml"
               : 'perhaps_cp_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cp_cases) in
    Obj.repr(
# 425 "parser_links.mly"
                                                               ( _1 )
# 3605 "parser_links.ml"
               : 'perhaps_cp_cases))
; (fun __caml_parser_env ->
    Obj.repr(
# 428 "parser_links.mly"
                                                               ( None )
# 3611 "parser_links.ml"
               : 'perhaps_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cp_name) in
    Obj.repr(
# 429 "parser_links.mly"
                                                               ( Some _1 )
# 3618 "parser_links.ml"
               : 'perhaps_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'block_contents) in
    Obj.repr(
# 439 "parser_links.mly"
                                                               ( `Unquote _2, pos () )
# 3625 "parser_links.ml"
               : 'cp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'cp_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'perhaps_name) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'cp_expression) in
    Obj.repr(
# 440 "parser_links.mly"
                                                               ( `Grab ((fst3 _1, None), _3, _6), pos () )
# 3634 "parser_links.ml"
               : 'cp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'cp_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'cp_expression) in
    Obj.repr(
# 441 "parser_links.mly"
                                                               ( `Give ((fst3 _1, None), Some _3, _6), pos () )
# 3643 "parser_links.ml"
               : 'cp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cp_name) in
    Obj.repr(
# 442 "parser_links.mly"
                                                               ( `GiveNothing _1, pos () )
# 3650 "parser_links.ml"
               : 'cp_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'cp_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_cp_cases) in
    Obj.repr(
# 443 "parser_links.mly"
                                                               ( `Offer (_2, _4), pos () )
# 3658 "parser_links.ml"
               : 'cp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'cp_label) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'cp_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cp_expression) in
    Obj.repr(
# 444 "parser_links.mly"
                                                               ( `Select (_2, _1, _4), pos () )
# 3667 "parser_links.ml"
               : 'cp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cp_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cp_name) in
    Obj.repr(
# 445 "parser_links.mly"
                                                               ( `Fuse (_1, _3), pos () )
# 3675 "parser_links.ml"
               : 'cp_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'cp_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'cp_expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'cp_expression) in
    Obj.repr(
# 446 "parser_links.mly"
                                                                ( `Comp (_2, _5, _7), pos () )
# 3684 "parser_links.ml"
               : 'cp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.phrase) in
    Obj.repr(
# 449 "parser_links.mly"
                                                               ( _1 )
# 3691 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "parser_links.mly"
                                                               ( `ListLit ([], None), pos() )
# 3697 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 451 "parser_links.mly"
                                                               ( `ListLit (_2, None), pos() )
# 3704 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 452 "parser_links.mly"
                                                               ( `RangeLit(_2, _4), pos() )
# 3712 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'xml) in
    Obj.repr(
# 453 "parser_links.mly"
                                                               ( _1 )
# 3719 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arg_lists) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 454 "parser_links.mly"
                                                               ( `FunLit (None, `Unl, (_2, (`Block _3, pos ())), `Unknown), pos() )
# 3727 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arg_lists) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 455 "parser_links.mly"
                                                               ( `FunLit (None, `Lin, (_2, (`Block _3, pos ())), `Unknown), pos() )
# 3735 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cp_expression) in
    Obj.repr(
# 456 "parser_links.mly"
                                                               ( `CP _2, pos () )
# 3742 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'handler_specialization) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'handled_computation) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'handler_parameterization) in
    Obj.repr(
# 457 "parser_links.mly"
                                                                                   (  let (body, args) = _3 in
										      let hnlit = (_2, body, args) in						  
											`HandlerLit (_1, hnlit), pos() )
# 3753 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'handler_nature) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'handler_depth) in
    Obj.repr(
# 462 "parser_links.mly"
                               ( (_1, _2) )
# 3761 "parser_links.ml"
               : 'handler_specialization))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'handler_body) in
    Obj.repr(
# 465 "parser_links.mly"
                                       ( (_1, None) )
# 3768 "parser_links.ml"
               : 'handler_parameterization))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arg_lists) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'handler_body) in
    Obj.repr(
# 466 "parser_links.mly"
                         ( (_2, Some _1) )
# 3776 "parser_links.ml"
               : 'handler_parameterization))
; (fun __caml_parser_env ->
    Obj.repr(
# 469 "parser_links.mly"
                             ( `Open )
# 3782 "parser_links.ml"
               : 'handler_nature))
; (fun __caml_parser_env ->
    Obj.repr(
# 470 "parser_links.mly"
                             ( `Open )
# 3788 "parser_links.ml"
               : 'handler_nature))
; (fun __caml_parser_env ->
    Obj.repr(
# 473 "parser_links.mly"
                             ( `Deep )
# 3794 "parser_links.ml"
               : 'handler_depth))
; (fun __caml_parser_env ->
    Obj.repr(
# 474 "parser_links.mly"
                             ( `Shallow )
# 3800 "parser_links.ml"
               : 'handler_depth))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cases) in
    Obj.repr(
# 477 "parser_links.mly"
                                                         ( _2 )
# 3807 "parser_links.ml"
               : 'handler_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 480 "parser_links.mly"
                                                               ( `ConstructorLit(_1, None, None), pos() )
# 3814 "parser_links.ml"
               : 'constructor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parenthesized_thing) in
    Obj.repr(
# 481 "parser_links.mly"
                                                               ( `ConstructorLit(_1, Some _2, None), pos() )
# 3822 "parser_links.ml"
               : 'constructor_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binop) in
    Obj.repr(
# 484 "parser_links.mly"
                                                               ( `Section _2, pos() )
# 3829 "parser_links.ml"
               : 'parenthesized_thing))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'record_label) in
    Obj.repr(
# 485 "parser_links.mly"
                                                               ( `Section (`Project _3), pos() )
# 3836 "parser_links.ml"
               : 'parenthesized_thing))
; (fun __caml_parser_env ->
    Obj.repr(
# 486 "parser_links.mly"
                                                               ( `RecordLit ([], None), pos() )
# 3842 "parser_links.ml"
               : 'parenthesized_thing))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'labeled_exps) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 487 "parser_links.mly"
                                                               ( `RecordLit (_2, Some _4), pos() )
# 3850 "parser_links.ml"
               : 'parenthesized_thing))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'labeled_exps) in
    Obj.repr(
# 488 "parser_links.mly"
                                                               ( `RecordLit (_2, None),               pos() )
# 3857 "parser_links.ml"
               : 'parenthesized_thing))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 489 "parser_links.mly"
                                                               ( `TupleLit (_2), pos() )
# 3864 "parser_links.ml"
               : 'parenthesized_thing))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'labeled_exps) in
    Obj.repr(
# 490 "parser_links.mly"
                                                               ( `With (_2, _4), pos() )
# 3872 "parser_links.ml"
               : 'parenthesized_thing))
; (fun __caml_parser_env ->
    Obj.repr(
# 493 "parser_links.mly"
                                                               ( `Minus )
# 3878 "parser_links.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 494 "parser_links.mly"
                                                               ( `FloatMinus )
# 3884 "parser_links.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'op) in
    Obj.repr(
# 495 "parser_links.mly"
                                                               ( `Name (fst _1) )
# 3891 "parser_links.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 498 "parser_links.mly"
                                                               ( _1, pos() )
# 3898 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 499 "parser_links.mly"
                                                               ( _1, pos() )
# 3905 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 500 "parser_links.mly"
                                                               ( _1, pos() )
# 3912 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 501 "parser_links.mly"
                                                               ( _1, pos() )
# 3919 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 502 "parser_links.mly"
                                                               ( _1, pos() )
# 3926 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 503 "parser_links.mly"
                                                               ( _1, pos() )
# 3933 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 504 "parser_links.mly"
                                                               ( _1, pos() )
# 3940 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 505 "parser_links.mly"
                                                               ( _1, pos() )
# 3947 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 506 "parser_links.mly"
                                                               ( _1, pos() )
# 3954 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 507 "parser_links.mly"
                                                               ( _1, pos() )
# 3961 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 508 "parser_links.mly"
                                                               ( _1, pos() )
# 3968 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 509 "parser_links.mly"
                                                               ( _1, pos() )
# 3975 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 510 "parser_links.mly"
                                                               ( _1, pos() )
# 3982 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 511 "parser_links.mly"
                                                               ( _1, pos() )
# 3989 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 512 "parser_links.mly"
                                                               ( _1, pos() )
# 3996 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 513 "parser_links.mly"
                                                               ( _1, pos() )
# 4003 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 514 "parser_links.mly"
                                                               ( _1, pos() )
# 4010 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 515 "parser_links.mly"
                                                               ( _1, pos() )
# 4017 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 516 "parser_links.mly"
                                                               ( _1, pos() )
# 4024 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 517 "parser_links.mly"
                                                               ( _1, pos() )
# 4031 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 518 "parser_links.mly"
                                                               ( _1, pos() )
# 4038 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 519 "parser_links.mly"
                                                               ( _1, pos() )
# 4045 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 520 "parser_links.mly"
                                                               ( _1, pos() )
# 4052 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 521 "parser_links.mly"
                                                               ( _1, pos() )
# 4059 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 522 "parser_links.mly"
                                                               ( _1, pos() )
# 4066 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 523 "parser_links.mly"
                                                               ( _1, pos() )
# 4073 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 524 "parser_links.mly"
                                                               ( _1, pos() )
# 4080 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 525 "parser_links.mly"
                                                               ( _1, pos() )
# 4087 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 526 "parser_links.mly"
                                                               ( _1, pos() )
# 4094 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 527 "parser_links.mly"
                                                               ( _1, pos() )
# 4101 "parser_links.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.phrase) in
    Obj.repr(
# 530 "parser_links.mly"
                                                               ( _1 )
# 4108 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.phrase) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 531 "parser_links.mly"
                                                               ( `UnaryAppl (([], `Name _2), _1), pos() )
# 4116 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 532 "parser_links.mly"
                                                               ( `Block _1, pos () )
# 4123 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 533 "parser_links.mly"
                                                               ( `Spawn (`Demon, (`Block _2, pos()), None), pos () )
# 4130 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 534 "parser_links.mly"
                                                               ( `Spawn (`Angel, (`Block _2, pos()), None), pos () )
# 4137 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 535 "parser_links.mly"
                                                               ( `Spawn (`Demon, (`Block _2, pos()), None), pos () )
# 4144 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 536 "parser_links.mly"
                                                               ( `Spawn (`Wait, (`Block _2, pos()), None), pos () )
# 4151 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 537 "parser_links.mly"
                                                               ( `Query (None, (`Block _2, pos ()), None), pos () )
# 4158 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 538 "parser_links.mly"
                                                               ( `Query (Some (_3,
                                                                               (`Constant (`Int 0), pos ())),
                                                                         (`Block _5, pos ()), None), pos () )
# 4168 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 541 "parser_links.mly"
                                                               ( `Query (Some (_3, _5), (`Block _7, pos ()), None), pos () )
# 4177 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.phrase) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg_spec) in
    Obj.repr(
# 542 "parser_links.mly"
                                                               ( `FnAppl (_1, _2), pos() )
# 4185 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.phrase) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'record_label) in
    Obj.repr(
# 543 "parser_links.mly"
                                                               ( `Projection (_1, _3), pos() )
# 4193 "parser_links.ml"
               : Sugartypes.phrase))
; (fun __caml_parser_env ->
    Obj.repr(
# 547 "parser_links.mly"
                                                               ( [] )
# 4199 "parser_links.ml"
               : 'arg_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 548 "parser_links.mly"
                                                               ( _2 )
# 4206 "parser_links.ml"
               : 'arg_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 551 "parser_links.mly"
                                                               ( _1 :: _3 )
# 4214 "parser_links.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 552 "parser_links.mly"
                                                               ( [_1] )
# 4221 "parser_links.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 555 "parser_links.mly"
                                                               ( `UnaryAppl (([], `Minus),      _2), pos() )
# 4228 "parser_links.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 556 "parser_links.mly"
                                                               ( `UnaryAppl (([], `FloatMinus), _2), pos() )
# 4235 "parser_links.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 557 "parser_links.mly"
                                                               ( `UnaryAppl (([], `Name _1), _2), pos() )
# 4243 "parser_links.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.phrase) in
    Obj.repr(
# 558 "parser_links.mly"
                                                               ( _1 )
# 4250 "parser_links.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_expression) in
    Obj.repr(
# 559 "parser_links.mly"
                                                               ( _1 )
# 4257 "parser_links.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arg_spec) in
    Obj.repr(
# 560 "parser_links.mly"
                                                    ( `DoOperation (_2, Some _3, None), pos() )
# 4265 "parser_links.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 561 "parser_links.mly"
                                                               ( `DoOperation (_2, None, None), pos() )
# 4272 "parser_links.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 565 "parser_links.mly"
                                                               ( _1 )
# 4279 "parser_links.ml"
               : 'infixr_9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'unary_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 566 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4288 "parser_links.ml"
               : 'infixr_9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'unary_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_9) in
    Obj.repr(
# 567 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4297 "parser_links.ml"
               : 'infixr_9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_9) in
    Obj.repr(
# 570 "parser_links.mly"
                                                               ( _1 )
# 4304 "parser_links.ml"
               : 'infixl_9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_9) in
    Obj.repr(
# 571 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4313 "parser_links.ml"
               : 'infixl_9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_9) in
    Obj.repr(
# 574 "parser_links.mly"
                                                               ( _1 )
# 4320 "parser_links.ml"
               : 'infixr_8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_9) in
    Obj.repr(
# 575 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4329 "parser_links.ml"
               : 'infixr_8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_8) in
    Obj.repr(
# 576 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4338 "parser_links.ml"
               : 'infixr_8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_9) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_8) in
    Obj.repr(
# 577 "parser_links.mly"
                                                               ( `InfixAppl (([], `Cons), _1, _3), pos() )
# 4346 "parser_links.ml"
               : 'infixr_8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_8) in
    Obj.repr(
# 580 "parser_links.mly"
                                                               ( _1 )
# 4353 "parser_links.ml"
               : 'infixl_8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_8) in
    Obj.repr(
# 581 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4362 "parser_links.ml"
               : 'infixl_8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_8) in
    Obj.repr(
# 584 "parser_links.mly"
                                                               ( _1 )
# 4369 "parser_links.ml"
               : 'infixr_7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_8) in
    Obj.repr(
# 585 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4378 "parser_links.ml"
               : 'infixr_7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_7) in
    Obj.repr(
# 586 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4387 "parser_links.ml"
               : 'infixr_7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_7) in
    Obj.repr(
# 589 "parser_links.mly"
                                                               ( _1 )
# 4394 "parser_links.ml"
               : 'infixl_7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_7) in
    Obj.repr(
# 590 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4403 "parser_links.ml"
               : 'infixl_7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_7) in
    Obj.repr(
# 593 "parser_links.mly"
                                                               ( _1 )
# 4410 "parser_links.ml"
               : 'infixr_6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_7) in
    Obj.repr(
# 594 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4419 "parser_links.ml"
               : 'infixr_6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_6) in
    Obj.repr(
# 595 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4428 "parser_links.ml"
               : 'infixr_6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_6) in
    Obj.repr(
# 598 "parser_links.mly"
                                                               ( _1 )
# 4435 "parser_links.ml"
               : 'infixl_6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_6) in
    Obj.repr(
# 599 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4444 "parser_links.ml"
               : 'infixl_6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_6) in
    Obj.repr(
# 600 "parser_links.mly"
                                                               ( `InfixAppl (([], `Minus), _1, _3), pos() )
# 4452 "parser_links.ml"
               : 'infixl_6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_6) in
    Obj.repr(
# 601 "parser_links.mly"
                                                               ( `InfixAppl (([], `FloatMinus), _1, _3), pos() )
# 4460 "parser_links.ml"
               : 'infixl_6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_6) in
    Obj.repr(
# 603 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name "!"), _1, _3), pos() )
# 4468 "parser_links.ml"
               : 'infixl_6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_6) in
    Obj.repr(
# 606 "parser_links.mly"
                                                               ( _1 )
# 4475 "parser_links.ml"
               : 'infixr_5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_6) in
    Obj.repr(
# 607 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4484 "parser_links.ml"
               : 'infixr_5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_5) in
    Obj.repr(
# 608 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4493 "parser_links.ml"
               : 'infixr_5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_5) in
    Obj.repr(
# 611 "parser_links.mly"
                                                               ( _1 )
# 4500 "parser_links.ml"
               : 'infixl_5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_5) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_5) in
    Obj.repr(
# 612 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4509 "parser_links.ml"
               : 'infixl_5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_5) in
    Obj.repr(
# 615 "parser_links.mly"
                                                               ( _1 )
# 4516 "parser_links.ml"
               : 'infixr_4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_5) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_5) in
    Obj.repr(
# 616 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4525 "parser_links.ml"
               : 'infixr_4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_5) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_4) in
    Obj.repr(
# 617 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4534 "parser_links.ml"
               : 'infixr_4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixr_5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'regex) in
    Obj.repr(
# 618 "parser_links.mly"
                                                               ( let r, flags = _3 in `InfixAppl (([], `RegexMatch flags), _1, r), pos() )
# 4542 "parser_links.ml"
               : 'infixr_4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_4) in
    Obj.repr(
# 621 "parser_links.mly"
                                                               ( _1 )
# 4549 "parser_links.ml"
               : 'infixl_4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_4) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_4) in
    Obj.repr(
# 622 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4558 "parser_links.ml"
               : 'infixl_4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_4) in
    Obj.repr(
# 625 "parser_links.mly"
                                                               ( _1 )
# 4565 "parser_links.ml"
               : 'infixr_3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_4) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_4) in
    Obj.repr(
# 626 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4574 "parser_links.ml"
               : 'infixr_3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_4) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_3) in
    Obj.repr(
# 627 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4583 "parser_links.ml"
               : 'infixr_3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_3) in
    Obj.repr(
# 630 "parser_links.mly"
                                                               ( _1 )
# 4590 "parser_links.ml"
               : 'infixl_3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_3) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_3) in
    Obj.repr(
# 631 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4599 "parser_links.ml"
               : 'infixl_3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_3) in
    Obj.repr(
# 634 "parser_links.mly"
                                                               ( _1 )
# 4606 "parser_links.ml"
               : 'infixr_2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_3) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_3) in
    Obj.repr(
# 635 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4615 "parser_links.ml"
               : 'infixr_2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_3) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_2) in
    Obj.repr(
# 636 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4624 "parser_links.ml"
               : 'infixr_2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_2) in
    Obj.repr(
# 639 "parser_links.mly"
                                                               ( _1 )
# 4631 "parser_links.ml"
               : 'infixl_2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_2) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_2) in
    Obj.repr(
# 640 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4640 "parser_links.ml"
               : 'infixl_2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_2) in
    Obj.repr(
# 643 "parser_links.mly"
                                                               ( _1 )
# 4647 "parser_links.ml"
               : 'infixr_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_2) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_2) in
    Obj.repr(
# 644 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4656 "parser_links.ml"
               : 'infixr_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_2) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_1) in
    Obj.repr(
# 645 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4665 "parser_links.ml"
               : 'infixr_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_1) in
    Obj.repr(
# 648 "parser_links.mly"
                                                               ( _1 )
# 4672 "parser_links.ml"
               : 'infixl_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_1) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_1) in
    Obj.repr(
# 649 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4681 "parser_links.ml"
               : 'infixl_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_1) in
    Obj.repr(
# 652 "parser_links.mly"
                                                               ( _1 )
# 4688 "parser_links.ml"
               : 'infixr_0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_1) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_1) in
    Obj.repr(
# 653 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4697 "parser_links.ml"
               : 'infixr_0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_1) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_0) in
    Obj.repr(
# 654 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4706 "parser_links.ml"
               : 'infixr_0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_0) in
    Obj.repr(
# 657 "parser_links.mly"
                                                               ( _1 )
# 4713 "parser_links.ml"
               : 'infixl_0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixl_0) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixr_0) in
    Obj.repr(
# 658 "parser_links.mly"
                                                               ( `InfixAppl (([], `Name _2), _1, _3), pos() )
# 4722 "parser_links.ml"
               : 'infixl_0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_0) in
    Obj.repr(
# 661 "parser_links.mly"
                                                               ( _1 )
# 4729 "parser_links.ml"
               : 'logical_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_0) in
    Obj.repr(
# 662 "parser_links.mly"
                                                               ( `InfixAppl (([], `Or), _1, _3), pos() )
# 4737 "parser_links.ml"
               : 'logical_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixl_0) in
    Obj.repr(
# 663 "parser_links.mly"
                                                               ( `InfixAppl (([], `And), _1, _3), pos() )
# 4745 "parser_links.ml"
               : 'logical_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_expression) in
    Obj.repr(
# 666 "parser_links.mly"
                                                               ( _1 )
# 4752 "parser_links.ml"
               : 'typed_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typed_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 667 "parser_links.mly"
                                                               ( `TypeAnnotation (_1, datatype _3), pos() )
# 4760 "parser_links.ml"
               : 'typed_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typed_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.datatype) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 668 "parser_links.mly"
                                                               ( `Upcast (_1, datatype _3, datatype _5), pos() )
# 4769 "parser_links.ml"
               : 'typed_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typed_expression) in
    Obj.repr(
# 671 "parser_links.mly"
                                                               ( _1 )
# 4776 "parser_links.ml"
               : 'db_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'table_generator) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'perhaps_where) in
    Obj.repr(
# 672 "parser_links.mly"
                                                               ( let pat, phrase = _3 in `DBDelete (pat, phrase, _5), pos() )
# 4784 "parser_links.ml"
               : 'db_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'table_generator) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'perhaps_where) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'labeled_exps) in
    Obj.repr(
# 675 "parser_links.mly"
                                                               ( let pat, phrase = _3 in `DBUpdate(pat, phrase, _5, _8), pos() )
# 4793 "parser_links.ml"
               : 'db_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'xml_tree) in
    Obj.repr(
# 679 "parser_links.mly"
                                                               ( _1 )
# 4800 "parser_links.ml"
               : 'xml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 682 "parser_links.mly"
                                                               ( _1 )
# 4807 "parser_links.ml"
               : 'xmlid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 685 "parser_links.mly"
                                                               ( [], Some (`Block _1, pos ()) )
# 4814 "parser_links.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Sugartypes.phrase list) list) in
    Obj.repr(
# 686 "parser_links.mly"
                                                               ( _1, None )
# 4821 "parser_links.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : (string * Sugartypes.phrase list) list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 687 "parser_links.mly"
                                                               ( _1, Some (`Block _2, pos ()) )
# 4829 "parser_links.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 690 "parser_links.mly"
                                                               ( [_1] )
# 4836 "parser_links.ml"
               : (string * Sugartypes.phrase list) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : (string * Sugartypes.phrase list) list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 691 "parser_links.mly"
                                                               ( _2 :: _1 )
# 4844 "parser_links.ml"
               : (string * Sugartypes.phrase list) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'xmlid) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.phrase list) in
    Obj.repr(
# 694 "parser_links.mly"
                                                               ( (_1, _4) )
# 4852 "parser_links.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'xmlid) in
    Obj.repr(
# 695 "parser_links.mly"
                                                               ( (_1, [(`Constant (`String ""), pos() : Sugartypes.phrase)]) )
# 4859 "parser_links.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 698 "parser_links.mly"
                                                               ( [`Block _1, pos ()] )
# 4866 "parser_links.ml"
               : Sugartypes.phrase list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 699 "parser_links.mly"
                                                               ( [`Constant (`String _1), pos()] )
# 4873 "parser_links.ml"
               : Sugartypes.phrase list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.phrase list) in
    Obj.repr(
# 700 "parser_links.mly"
                                                               ( (`Block _1, pos ()) :: _2 )
# 4881 "parser_links.ml"
               : Sugartypes.phrase list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.phrase list) in
    Obj.repr(
# 701 "parser_links.mly"
                                                               ( (`Constant (`String _1), pos()) :: _2)
# 4889 "parser_links.ml"
               : Sugartypes.phrase list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 704 "parser_links.mly"
                                                               ( `Xml (_1, [], None, []), pos() )
# 4896 "parser_links.ml"
               : 'xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 705 "parser_links.mly"
                                                               ( ensure_match (pos()) _1 _3 (`Xml (_1, [], None, []), pos()) )
# 4904 "parser_links.ml"
               : 'xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xml_contents_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 706 "parser_links.mly"
                                                               ( ensure_match (pos()) _1 _4 (`Xml (_1, [], None, _3), pos()) )
# 4913 "parser_links.ml"
               : 'xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 707 "parser_links.mly"
                                                               ( ensure_match (pos()) _1 _4 (`Xml (_1, fst _2, snd _2, []), pos()) )
# 4922 "parser_links.ml"
               : 'xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    Obj.repr(
# 708 "parser_links.mly"
                                                               ( `Xml (_1, fst _2, snd _2, []), pos() )
# 4930 "parser_links.ml"
               : 'xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'xml_contents_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 709 "parser_links.mly"
                                                               ( ensure_match (pos()) _1 _5 (`Xml (_1, fst _2, snd _2, _4), pos()) )
# 4940 "parser_links.ml"
               : 'xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'xml_contents) in
    Obj.repr(
# 712 "parser_links.mly"
                                                               ( [_1] )
# 4947 "parser_links.ml"
               : 'xml_contents_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'xml_contents) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'xml_contents_list) in
    Obj.repr(
# 713 "parser_links.mly"
                                                               ( _1 :: _2 )
# 4955 "parser_links.ml"
               : 'xml_contents_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 716 "parser_links.mly"
                                                               ( `Block _1, pos () )
# 4962 "parser_links.ml"
               : 'xml_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formlet_binding) in
    Obj.repr(
# 717 "parser_links.mly"
                                                               ( _1 )
# 4969 "parser_links.ml"
               : 'xml_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formlet_placement) in
    Obj.repr(
# 718 "parser_links.mly"
                                                               ( _1 )
# 4976 "parser_links.ml"
               : 'xml_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'page_placement) in
    Obj.repr(
# 719 "parser_links.mly"
                                                               ( _1 )
# 4983 "parser_links.ml"
               : 'xml_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'xml_tree) in
    Obj.repr(
# 720 "parser_links.mly"
                                                               ( _1 )
# 4990 "parser_links.ml"
               : 'xml_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 721 "parser_links.mly"
                                                               ( `TextNode (Utility.xml_unescape _1), pos() )
# 4997 "parser_links.ml"
               : 'xml_contents))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'logical_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.pattern) in
    Obj.repr(
# 724 "parser_links.mly"
                                                               ( `FormBinding(_2, _4), pos())
# 5005 "parser_links.ml"
               : 'formlet_binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'logical_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'logical_expression) in
    Obj.repr(
# 728 "parser_links.mly"
                                                               ( `FormletPlacement (_2, _4, (`ListLit ([], None), pos())), pos () )
# 5013 "parser_links.ml"
               : 'formlet_placement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'logical_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'logical_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'logical_expression) in
    Obj.repr(
# 731 "parser_links.mly"
                                                               ( `FormletPlacement (_2, _4, _6), pos () )
# 5022 "parser_links.ml"
               : 'formlet_placement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 734 "parser_links.mly"
                                                               ( `PagePlacement _2, pos() )
# 5029 "parser_links.ml"
               : 'page_placement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'db_expression) in
    Obj.repr(
# 737 "parser_links.mly"
                                                               ( _1 )
# 5036 "parser_links.ml"
               : 'session_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 738 "parser_links.mly"
                                                               ( `Select (_2, _3) , pos() )
# 5044 "parser_links.ml"
               : 'session_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_cases) in
    Obj.repr(
# 739 "parser_links.mly"
                                                               ( `Offer (_3, _6, None) , pos() )
# 5052 "parser_links.ml"
               : 'session_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'session_expression) in
    Obj.repr(
# 742 "parser_links.mly"
                                                               ( _1 )
# 5059 "parser_links.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 743 "parser_links.mly"
                                                               ( `Conditional (_3, _5, _7), pos() )
# 5068 "parser_links.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case) in
    Obj.repr(
# 746 "parser_links.mly"
                                                               ( [_1] )
# 5075 "parser_links.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 747 "parser_links.mly"
                                                               ( _1 :: _2 )
# 5083 "parser_links.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'block_contents) in
    Obj.repr(
# 750 "parser_links.mly"
                                                               ( _2, (`Block (_4), pos()) )
# 5091 "parser_links.ml"
               : 'case))
; (fun __caml_parser_env ->
    Obj.repr(
# 753 "parser_links.mly"
                                                               ( [] )
# 5097 "parser_links.ml"
               : 'perhaps_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 754 "parser_links.mly"
                                                               ( _1 )
# 5104 "parser_links.ml"
               : 'perhaps_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 757 "parser_links.mly"
                                                               ( _1 )
# 5111 "parser_links.ml"
               : 'case_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_cases) in
    Obj.repr(
# 758 "parser_links.mly"
                                                               ( `Switch (_3, _6, None), pos() )
# 5119 "parser_links.ml"
               : 'case_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_cases) in
    Obj.repr(
# 759 "parser_links.mly"
                                                               ( `Receive (_3, None), pos() )
# 5126 "parser_links.ml"
               : 'case_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'handle_specialisation) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'cases) in
    Obj.repr(
# 760 "parser_links.mly"
                                                               (
                                                                 let descriptor = (_1, None) in
                                                                 `Handle (_3, _6, descriptor), pos() )
# 5137 "parser_links.ml"
               : 'case_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'handler_nature) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'handle_depth) in
    Obj.repr(
# 765 "parser_links.mly"
                                                               ( (_1, _2) )
# 5145 "parser_links.ml"
               : 'handle_specialisation))
; (fun __caml_parser_env ->
    Obj.repr(
# 768 "parser_links.mly"
                                                               ( `Deep )
# 5151 "parser_links.ml"
               : 'handle_depth))
; (fun __caml_parser_env ->
    Obj.repr(
# 769 "parser_links.mly"
                                                               ( `Shallow )
# 5157 "parser_links.ml"
               : 'handle_depth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_expression) in
    Obj.repr(
# 772 "parser_links.mly"
                                                               ( _1 )
# 5164 "parser_links.ml"
               : 'iteration_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'perhaps_generators) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'perhaps_where) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'perhaps_orderby) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 776 "parser_links.mly"
                                                               ( `Iteration (_3, _7, _5, _6), pos() )
# 5174 "parser_links.ml"
               : 'iteration_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 779 "parser_links.mly"
                                                               ( [] )
# 5180 "parser_links.ml"
               : 'perhaps_generators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'generators) in
    Obj.repr(
# 780 "parser_links.mly"
                                                               ( _1 )
# 5187 "parser_links.ml"
               : 'perhaps_generators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'generator) in
    Obj.repr(
# 783 "parser_links.mly"
                                                               ( [_1] )
# 5194 "parser_links.ml"
               : 'generators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'generator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'generators) in
    Obj.repr(
# 784 "parser_links.mly"
                                                               ( _1 :: _3 )
# 5202 "parser_links.ml"
               : 'generators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_generator) in
    Obj.repr(
# 787 "parser_links.mly"
                                                               ( `List _1 )
# 5209 "parser_links.ml"
               : 'generator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'table_generator) in
    Obj.repr(
# 788 "parser_links.mly"
                                                               ( `Table _1 )
# 5216 "parser_links.ml"
               : 'generator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 791 "parser_links.mly"
                                                               ( (_1, _3) )
# 5224 "parser_links.ml"
               : 'list_generator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 794 "parser_links.mly"
                                                               ( (_1, _3) )
# 5232 "parser_links.ml"
               : 'table_generator))
; (fun __caml_parser_env ->
    Obj.repr(
# 797 "parser_links.mly"
                                                               ( None )
# 5238 "parser_links.ml"
               : 'perhaps_where))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 798 "parser_links.mly"
                                                               ( Some _3 )
# 5245 "parser_links.ml"
               : 'perhaps_where))
; (fun __caml_parser_env ->
    Obj.repr(
# 801 "parser_links.mly"
                                                               ( None )
# 5251 "parser_links.ml"
               : 'perhaps_orderby))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 802 "parser_links.mly"
                                                               ( Some (make_tuple (pos()) _3) )
# 5258 "parser_links.ml"
               : 'perhaps_orderby))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iteration_expression) in
    Obj.repr(
# 805 "parser_links.mly"
                                                               ( _1 )
# 5265 "parser_links.ml"
               : 'escape_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.phrase) in
    Obj.repr(
# 806 "parser_links.mly"
                                                               ( `Escape ((fst _2, None, snd _2), _4), pos() )
# 5273 "parser_links.ml"
               : 'escape_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'escape_expression) in
    Obj.repr(
# 809 "parser_links.mly"
                                                               ( _1 )
# 5280 "parser_links.ml"
               : 'formlet_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'xml) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 810 "parser_links.mly"
                                                               ( `Formlet (_2, _4), pos() )
# 5288 "parser_links.ml"
               : 'formlet_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'xml) in
    Obj.repr(
# 811 "parser_links.mly"
                                                               ( `Page (_2), pos() )
# 5295 "parser_links.ml"
               : 'formlet_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formlet_expression) in
    Obj.repr(
# 814 "parser_links.mly"
                                                               ( _1 )
# 5302 "parser_links.ml"
               : 'table_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.datatype) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'perhaps_table_constraints) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 815 "parser_links.mly"
                                                               ( `TableLit (_2, datatype _4, _5, _7), pos())
# 5312 "parser_links.ml"
               : 'table_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'table_constraints) in
    Obj.repr(
# 818 "parser_links.mly"
                                                               ( _2 )
# 5319 "parser_links.ml"
               : 'perhaps_table_constraints))
; (fun __caml_parser_env ->
    Obj.repr(
# 819 "parser_links.mly"
                                                               ( [] )
# 5325 "parser_links.ml"
               : 'perhaps_table_constraints))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'record_label) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_constraints) in
    Obj.repr(
# 822 "parser_links.mly"
                                                               ( [(_1, _2)] )
# 5333 "parser_links.ml"
               : 'table_constraints))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'record_label) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'field_constraints) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'table_constraints) in
    Obj.repr(
# 823 "parser_links.mly"
                                                               ( (_1, _2) :: _4 )
# 5342 "parser_links.ml"
               : 'table_constraints))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_constraint) in
    Obj.repr(
# 826 "parser_links.mly"
                                                               ( [_1] )
# 5349 "parser_links.ml"
               : 'field_constraints))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_constraint) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_constraints) in
    Obj.repr(
# 827 "parser_links.mly"
                                                               ( _1 :: _2 )
# 5357 "parser_links.ml"
               : 'field_constraints))
; (fun __caml_parser_env ->
    Obj.repr(
# 830 "parser_links.mly"
                                                               ( `Readonly )
# 5363 "parser_links.ml"
               : 'field_constraint))
; (fun __caml_parser_env ->
    Obj.repr(
# 831 "parser_links.mly"
                                                               ( `Default )
# 5369 "parser_links.ml"
               : 'field_constraint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.phrase) in
    Obj.repr(
# 834 "parser_links.mly"
                                                               ( Some _1 )
# 5376 "parser_links.ml"
               : 'perhaps_db_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 835 "parser_links.mly"
                                                               ( None )
# 5382 "parser_links.ml"
               : 'perhaps_db_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.phrase) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'perhaps_db_args) in
    Obj.repr(
# 838 "parser_links.mly"
                                                               ( Some _1, _2 )
# 5390 "parser_links.ml"
               : 'perhaps_db_driver))
; (fun __caml_parser_env ->
    Obj.repr(
# 839 "parser_links.mly"
                                                               ( None, None )
# 5396 "parser_links.ml"
               : 'perhaps_db_driver))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'table_expression) in
    Obj.repr(
# 842 "parser_links.mly"
                                                               ( _1 )
# 5403 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 843 "parser_links.mly"
                                                               ( `DBInsert (_2, [], _6, None), pos() )
# 5411 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'record_labels) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 844 "parser_links.mly"
                                                               ( `DBInsert (_2, _5, _7, None), pos() )
# 5420 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'labeled_exps) in
    Obj.repr(
# 846 "parser_links.mly"
                                                               ( `DBInsert (_2,
                                                                            labels _6,
                                                                            (`ListLit ([`RecordLit (_6, None), pos()], None), pos()),
                                                                            None),
                                                                 pos() )
# 5432 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'db_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 852 "parser_links.mly"
                                                               ( `DBInsert (_2, [], _6, Some (`Constant (`String _8), pos())), pos() )
# 5441 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'record_labels) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'db_expression) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 854 "parser_links.mly"
                                                               ( `DBInsert (_2, _5, _7, Some (`Constant (`String _9), pos())), pos() )
# 5451 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'exp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 857 "parser_links.mly"
                                                               ( `DBInsert (_2,
                                                                            [],
                                                                            (`ListLit ([`RecordLit ([], None), pos()], None), pos()),
                                                                            Some (`Constant (`String _9), pos())),
                                                                 pos() )
# 5463 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'labeled_exps) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 864 "parser_links.mly"
                                                               ( `DBInsert (_2,
                                                                            labels _6,
                                                                            (`ListLit ([`RecordLit (_6, None), pos()], None), pos()),
                                                                            Some (`Constant (`String _10), pos())),
                                                                 pos() )
# 5476 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.phrase) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'perhaps_db_driver) in
    Obj.repr(
# 869 "parser_links.mly"
                                                               ( `DatabaseLit (_2, _3), pos() )
# 5484 "parser_links.ml"
               : 'database_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'record_label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'record_labels) in
    Obj.repr(
# 872 "parser_links.mly"
                                                               ( _1 :: _3 )
# 5492 "parser_links.ml"
               : 'record_labels))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'record_label) in
    Obj.repr(
# 873 "parser_links.mly"
                                                               ( [_1] )
# 5499 "parser_links.ml"
               : 'record_labels))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 876 "parser_links.mly"
                                                               ( `Val ([], _2, _4, `Unknown, None), pos () )
# 5507 "parser_links.ml"
               : Sugartypes.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 877 "parser_links.mly"
                                                               ( `Exp _1, pos () )
# 5514 "parser_links.ml"
               : Sugartypes.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arg_lists) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 878 "parser_links.mly"
                                                               ( `Fun ((fst _2, None, snd _2), `Unl, ([], (_3, (`Block _4, pos ()))), `Unknown, None), pos () )
# 5523 "parser_links.ml"
               : Sugartypes.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arg_lists) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 879 "parser_links.mly"
                                                               ( `Fun ((fst _2, None, snd _2), `Lin, ([], (_3, (`Block _4, pos ()))), `Unknown, None), pos () )
# 5532 "parser_links.ml"
               : Sugartypes.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedecl) in
    Obj.repr(
# 880 "parser_links.mly"
                                                               ( _1 )
# 5539 "parser_links.ml"
               : Sugartypes.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typed_handler_binding) in
    Obj.repr(
# 881 "parser_links.mly"
                                                               ( let (m, spec, hnlit, pos) = _1 in
								 `Handler (m, spec, hnlit, None), pos )
# 5547 "parser_links.ml"
               : Sugartypes.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.binding) in
    Obj.repr(
# 885 "parser_links.mly"
                                                               ( [_1] )
# 5554 "parser_links.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bindings) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.binding) in
    Obj.repr(
# 886 "parser_links.mly"
                                                               ( _1 @ [_2] )
# 5562 "parser_links.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'block_contents) in
    Obj.repr(
# 889 "parser_links.mly"
                                                               ( _2 )
# 5569 "parser_links.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bindings) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 892 "parser_links.mly"
                                                               ( (_1 @ [`Exp _2, pos ()], (`RecordLit ([], None), pos())) )
# 5577 "parser_links.ml"
               : 'block_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bindings) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 893 "parser_links.mly"
                                                               ( (_1, _2) )
# 5585 "parser_links.ml"
               : 'block_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 894 "parser_links.mly"
                                                               ( ([`Exp _1, pos ()], (`RecordLit ([], None), pos())) )
# 5592 "parser_links.ml"
               : 'block_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 895 "parser_links.mly"
                                                               ( [], _1 )
# 5599 "parser_links.ml"
               : 'block_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'perhaps_semi) in
    Obj.repr(
# 896 "parser_links.mly"
                                                               ( ([], (`TupleLit [], pos())) )
# 5606 "parser_links.ml"
               : 'block_contents))
; (fun __caml_parser_env ->
    Obj.repr(
# 899 "parser_links.mly"
                                                               ()
# 5612 "parser_links.ml"
               : 'perhaps_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 900 "parser_links.mly"
                                                               ()
# 5618 "parser_links.ml"
               : 'perhaps_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'database_expression) in
    Obj.repr(
# 903 "parser_links.mly"
                                                               ( _1 )
# 5625 "parser_links.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'record_label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 906 "parser_links.mly"
                                                               ( [_1, _3] )
# 5633 "parser_links.ml"
               : 'labeled_exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'record_label) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'labeled_exps) in
    Obj.repr(
# 907 "parser_links.mly"
                                                               ( (_1, _3) :: _5 )
# 5642 "parser_links.ml"
               : 'labeled_exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.datatype) in
    Obj.repr(
# 913 "parser_links.mly"
                                                               ( _1 )
# 5649 "parser_links.ml"
               : Sugartypes.datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mu_datatype) in
    Obj.repr(
# 916 "parser_links.mly"
                                                               ( _1 )
# 5656 "parser_links.ml"
               : Sugartypes.datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'straight_arrow) in
    Obj.repr(
# 917 "parser_links.mly"
                                                               ( _1 )
# 5663 "parser_links.ml"
               : Sugartypes.datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'squiggly_arrow) in
    Obj.repr(
# 918 "parser_links.mly"
                                                               ( _1 )
# 5670 "parser_links.ml"
               : Sugartypes.datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 921 "parser_links.mly"
                                                               ( ([], `Closed) )
# 5676 "parser_links.ml"
               : 'arrow_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'efields) in
    Obj.repr(
# 922 "parser_links.mly"
                                                               ( _2 )
# 5683 "parser_links.ml"
               : 'arrow_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arrow_prefix) in
    Obj.repr(
# 925 "parser_links.mly"
                                                               ( _1 )
# 5690 "parser_links.ml"
               : 'straight_arrow_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nonrec_row_var) in
    Obj.repr(
# 926 "parser_links.mly"
                                                               ( ([], _2) )
# 5697 "parser_links.ml"
               : 'straight_arrow_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_nonrec_row_var) in
    Obj.repr(
# 927 "parser_links.mly"
                                                               ( ([], _2) )
# 5704 "parser_links.ml"
               : 'straight_arrow_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'hear_arrow_prefix) in
    Obj.repr(
# 930 "parser_links.mly"
                                                               ( _1 )
# 5711 "parser_links.ml"
               : 'squig_arrow_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arrow_prefix) in
    Obj.repr(
# 931 "parser_links.mly"
                                                               ( _1 )
# 5718 "parser_links.ml"
               : 'squig_arrow_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nonrec_row_var) in
    Obj.repr(
# 932 "parser_links.mly"
                                                               ( ([], _2) )
# 5725 "parser_links.ml"
               : 'squig_arrow_prefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_nonrec_row_var) in
    Obj.repr(
# 933 "parser_links.mly"
                                                               ( ([], _2) )
# 5732 "parser_links.ml"
               : 'squig_arrow_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.datatype) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'efields) in
    Obj.repr(
# 936 "parser_links.mly"
                                                               ( row_with
                                                                   ("wild", `Present `Unit)
                                                                   (row_with
                                                                      ("hear", `Present _3)
                                                                      _5) )
# 5744 "parser_links.ml"
               : 'hear_arrow_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.datatype) in
    Obj.repr(
# 941 "parser_links.mly"
                                                               ( ([("wild", `Present `Unit);
                                                                   ("hear", `Present _3)],
                                                                  `Closed) )
# 5753 "parser_links.ml"
               : 'hear_arrow_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.datatype) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'nonrec_row_var) in
    Obj.repr(
# 944 "parser_links.mly"
                                                               ( ([("wild", `Present `Unit);
                                                                   ("hear", `Present _3)],
                                                                  _5) )
# 5763 "parser_links.ml"
               : 'hear_arrow_prefix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.datatype) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'kinded_nonrec_row_var) in
    Obj.repr(
# 947 "parser_links.mly"
                                                               ( ([("wild", `Present `Unit);
                                                                   ("hear", `Present _3)],
                                                                  _5) )
# 5773 "parser_links.ml"
               : 'hear_arrow_prefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'parenthesized_datatypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'straight_arrow_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 953 "parser_links.mly"
                                                               ( `Function (_1, _2, _4) )
# 5782 "parser_links.ml"
               : 'straight_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'parenthesized_datatypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'straight_arrow_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 955 "parser_links.mly"
                                                               ( `Lolli (_1, _2, _4) )
# 5791 "parser_links.ml"
               : 'straight_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parenthesized_datatypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 956 "parser_links.mly"
                                                               ( `Function (_1,
                                                                               ([], fresh_rigid_row_variable (`Unl, `Any)),
                                                                               _3) )
# 5801 "parser_links.ml"
               : 'straight_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parenthesized_datatypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 959 "parser_links.mly"
                                                               ( `Lolli (_1, ([], fresh_rigid_row_variable (`Unl, `Any)), _3) )
# 5809 "parser_links.ml"
               : 'straight_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'parenthesized_datatypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'squig_arrow_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 963 "parser_links.mly"
                                                               ( `Function (_1,
                                                                               row_with
                                                                                 ("wild", `Present `Unit)
                                                                                 _2,
                                                                               _4) )
# 5822 "parser_links.ml"
               : 'squiggly_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'parenthesized_datatypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'squig_arrow_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 969 "parser_links.mly"
                                                               ( `Lolli (_1,
                                                                            row_with
                                                                              ("wild", `Present `Unit)
                                                                            _2,
                                                                            _4) )
# 5835 "parser_links.ml"
               : 'squiggly_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parenthesized_datatypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 977 "parser_links.mly"
                                                               ( `Function (_1,
                                                                               ([("wild", `Present `Unit)],
                                                                                 fresh_rigid_row_variable (`Unl, `Any)),
                                                                                _3) )
# 5846 "parser_links.ml"
               : 'squiggly_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parenthesized_datatypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 981 "parser_links.mly"
                                                               ( `Lolli (_1,
                                                                            ([("wild", `Present `Unit)],
                                                                             fresh_rigid_row_variable (`Unl, `Any)),
                                                                            _3) )
# 5857 "parser_links.ml"
               : 'squiggly_arrow))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'mu_datatype) in
    Obj.repr(
# 987 "parser_links.mly"
                                                               ( `Mu (_2, _4) )
# 5865 "parser_links.ml"
               : 'mu_datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'forall_datatype) in
    Obj.repr(
# 988 "parser_links.mly"
                                                               ( _1 )
# 5872 "parser_links.ml"
               : 'mu_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'varlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 991 "parser_links.mly"
                                                               ( `Forall (List.map fst _2, _4) )
# 5880 "parser_links.ml"
               : 'forall_datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'session_datatype) in
    Obj.repr(
# 992 "parser_links.mly"
                                                               ( _1 )
# 5887 "parser_links.ml"
               : 'forall_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.datatype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 995 "parser_links.mly"
                                                               ( `Output (_2, _4) )
# 5895 "parser_links.ml"
               : 'session_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.datatype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 996 "parser_links.mly"
                                                               ( `Input (_2, _4) )
# 5903 "parser_links.ml"
               : 'session_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'row) in
    Obj.repr(
# 997 "parser_links.mly"
                                                               ( `Select _2 )
# 5910 "parser_links.ml"
               : 'session_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'row) in
    Obj.repr(
# 998 "parser_links.mly"
                                                               ( `Choice _2 )
# 5917 "parser_links.ml"
               : 'session_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 999 "parser_links.mly"
                                                               ( `Dual _2 )
# 5924 "parser_links.ml"
               : 'session_datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 1000 "parser_links.mly"
                                                               ( `End )
# 5930 "parser_links.ml"
               : 'session_datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_datatype) in
    Obj.repr(
# 1001 "parser_links.mly"
                                                               ( _1 )
# 5937 "parser_links.ml"
               : 'session_datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 1004 "parser_links.mly"
                                                               ( [] )
# 5943 "parser_links.ml"
               : 'parenthesized_datatypes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'datatypes) in
    Obj.repr(
# 1005 "parser_links.mly"
                                                               ( _2 )
# 5950 "parser_links.ml"
               : 'parenthesized_datatypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parenthesized_datatypes) in
    Obj.repr(
# 1008 "parser_links.mly"
                                                               ( match _1 with
                                                                   | [] -> `Unit
                                                                   | [t] -> t
                                                                   | ts  -> `Tuple ts )
# 5960 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rfields) in
    Obj.repr(
# 1012 "parser_links.mly"
                                                               ( `Record _2 )
# 5967 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Sugartypes.datatype) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.datatype) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.datatype) in
    Obj.repr(
# 1014 "parser_links.mly"
                                                               ( `Table (_3, _5, _7) )
# 5976 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'vrow) in
    Obj.repr(
# 1017 "parser_links.mly"
                                                               ( `Variant _2 )
# 5983 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.datatype) in
    Obj.repr(
# 1018 "parser_links.mly"
                                                               ( `List _2 )
# 5990 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_var) in
    Obj.repr(
# 1019 "parser_links.mly"
                                                               ( _1 )
# 5997 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_type_var) in
    Obj.repr(
# 1020 "parser_links.mly"
                                                               ( _1 )
# 6004 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1021 "parser_links.mly"
                                                               ( match _1 with
                                                                   | "Bool"    -> `Primitive `Bool
                                                                   | "Int"     -> `Primitive `Int
                                                                   | "Char"    -> `Primitive `Char
                                                                   | "Float"   -> `Primitive `Float
                                                                   | "XmlItem" -> `Primitive `XmlItem
                                                                   | "String"  -> `Primitive `String
                                                                   | "Database"-> `DB
                                                                   | t         -> `TypeApplication (t, [])
                                                               )
# 6020 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_arg_list) in
    Obj.repr(
# 1031 "parser_links.mly"
                                                               ( `TypeApplication (_1, _3) )
# 6028 "parser_links.ml"
               : 'primary_datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1034 "parser_links.mly"
                                                               ( `TypeVar (_1, (`Unl, `Any), `Rigid) )
# 6035 "parser_links.ml"
               : 'type_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1035 "parser_links.mly"
                                                               ( `TypeVar (_1, (`Unl, `Any), `Flexible) )
# 6042 "parser_links.ml"
               : 'type_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 1036 "parser_links.mly"
                                                               ( fresh_rigid_type_variable (`Unl, `Any) )
# 6048 "parser_links.ml"
               : 'type_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 1037 "parser_links.mly"
                                                               ( fresh_type_variable (`Unl, `Any) )
# 6054 "parser_links.ml"
               : 'type_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_var) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'subkind) in
    Obj.repr(
# 1040 "parser_links.mly"
                                                               ( attach_subkind (pos()) (_1, _2) )
# 6062 "parser_links.ml"
               : 'kinded_type_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_arg) in
    Obj.repr(
# 1043 "parser_links.mly"
                                                               ( [_1] )
# 6069 "parser_links.ml"
               : 'type_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_arg_list) in
    Obj.repr(
# 1044 "parser_links.mly"
                                                               ( _1 :: _3 )
# 6077 "parser_links.ml"
               : 'type_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 1050 "parser_links.mly"
                                                               ( `Type _1 )
# 6084 "parser_links.ml"
               : 'type_arg))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.datatype) in
    Obj.repr(
# 1051 "parser_links.mly"
                                                               ( `Type _3 )
# 6091 "parser_links.ml"
               : 'type_arg))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'row) in
    Obj.repr(
# 1052 "parser_links.mly"
                                                               ( `Row _3 )
# 6098 "parser_links.ml"
               : 'type_arg))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldspec) in
    Obj.repr(
# 1053 "parser_links.mly"
                                                               ( `Presence _3 )
# 6105 "parser_links.ml"
               : 'type_arg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'row) in
    Obj.repr(
# 1054 "parser_links.mly"
                                                               ( `Row _2 )
# 6112 "parser_links.ml"
               : 'type_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vfields) in
    Obj.repr(
# 1057 "parser_links.mly"
                                                               ( _1 )
# 6119 "parser_links.ml"
               : 'vrow))
; (fun __caml_parser_env ->
    Obj.repr(
# 1058 "parser_links.mly"
                                                               ( [], `Closed )
# 6125 "parser_links.ml"
               : 'vrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 1061 "parser_links.mly"
                                                               ( [_1] )
# 6132 "parser_links.ml"
               : 'datatypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.datatype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'datatypes) in
    Obj.repr(
# 1062 "parser_links.mly"
                                                               ( _1 :: _3 )
# 6140 "parser_links.ml"
               : 'datatypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fields) in
    Obj.repr(
# 1065 "parser_links.mly"
                                                               ( _1 )
# 6147 "parser_links.ml"
               : 'row))
; (fun __caml_parser_env ->
    Obj.repr(
# 1066 "parser_links.mly"
                                                               ( [], `Closed )
# 6153 "parser_links.ml"
               : 'row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 1069 "parser_links.mly"
                                                               ( [_1], `Closed )
# 6160 "parser_links.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'row_var) in
    Obj.repr(
# 1070 "parser_links.mly"
                                                               ( [_1], _3 )
# 6168 "parser_links.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_row_var) in
    Obj.repr(
# 1071 "parser_links.mly"
                                                               ( [_1], _3 )
# 6176 "parser_links.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'row_var) in
    Obj.repr(
# 1072 "parser_links.mly"
                                                               ( [], _2 )
# 6183 "parser_links.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_row_var) in
    Obj.repr(
# 1073 "parser_links.mly"
                                                               ( [], _2 )
# 6190 "parser_links.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fields) in
    Obj.repr(
# 1074 "parser_links.mly"
                                                               ( _1 :: fst _3, snd _3 )
# 6198 "parser_links.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_label) in
    Obj.repr(
# 1077 "parser_links.mly"
                                                               ( _1, `Present `Unit )
# 6205 "parser_links.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_label) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fieldspec) in
    Obj.repr(
# 1078 "parser_links.mly"
                                                               ( _1, _2 )
# 6213 "parser_links.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1081 "parser_links.mly"
                                                               ( _1 )
# 6220 "parser_links.ml"
               : 'field_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1082 "parser_links.mly"
                                                               ( _1 )
# 6227 "parser_links.ml"
               : 'field_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1083 "parser_links.mly"
                                                               ( _1 )
# 6234 "parser_links.ml"
               : 'field_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1084 "parser_links.mly"
                                                               ( string_of_int _1 )
# 6241 "parser_links.ml"
               : 'field_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rfield) in
    Obj.repr(
# 1087 "parser_links.mly"
                                                               ( [_1], `Closed )
# 6248 "parser_links.ml"
               : 'rfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rfield) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'row_var) in
    Obj.repr(
# 1088 "parser_links.mly"
                                                               ( [_1], _3 )
# 6256 "parser_links.ml"
               : 'rfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rfield) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_row_var) in
    Obj.repr(
# 1089 "parser_links.mly"
                                                               ( [_1], _3 )
# 6264 "parser_links.ml"
               : 'rfields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'row_var) in
    Obj.repr(
# 1090 "parser_links.mly"
                                                               ( [], _2 )
# 6271 "parser_links.ml"
               : 'rfields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_row_var) in
    Obj.repr(
# 1091 "parser_links.mly"
                                                               ( [], _2 )
# 6278 "parser_links.ml"
               : 'rfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rfield) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rfields) in
    Obj.repr(
# 1092 "parser_links.mly"
                                                               ( _1 :: fst _3, snd _3 )
# 6286 "parser_links.ml"
               : 'rfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'record_label) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fieldspec) in
    Obj.repr(
# 1100 "parser_links.mly"
                                                               ( _1, _2 )
# 6294 "parser_links.ml"
               : 'rfield))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_label) in
    Obj.repr(
# 1103 "parser_links.mly"
                                                               ( _1 )
# 6301 "parser_links.ml"
               : 'record_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vfield) in
    Obj.repr(
# 1106 "parser_links.mly"
                                                               ( [_1], `Closed )
# 6308 "parser_links.ml"
               : 'vfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'row_var) in
    Obj.repr(
# 1107 "parser_links.mly"
                                                               ( [], _1 )
# 6315 "parser_links.ml"
               : 'vfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_row_var) in
    Obj.repr(
# 1108 "parser_links.mly"
                                                               ( [], _1 )
# 6322 "parser_links.ml"
               : 'vfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vfield) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vfields) in
    Obj.repr(
# 1109 "parser_links.mly"
                                                               ( _1 :: fst _3, snd _3 )
# 6330 "parser_links.ml"
               : 'vfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1112 "parser_links.mly"
                                                               ( _1, `Present `Unit )
# 6337 "parser_links.ml"
               : 'vfield))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fieldspec) in
    Obj.repr(
# 1113 "parser_links.mly"
                                                               ( _1, _2 )
# 6345 "parser_links.ml"
               : 'vfield))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'efield) in
    Obj.repr(
# 1116 "parser_links.mly"
                                                               ( [_1], `Closed )
# 6352 "parser_links.ml"
               : 'efields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'efield) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nonrec_row_var) in
    Obj.repr(
# 1117 "parser_links.mly"
                                                               ( [_1], _3 )
# 6360 "parser_links.ml"
               : 'efields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'efield) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_nonrec_row_var) in
    Obj.repr(
# 1118 "parser_links.mly"
                                                               ( [_1], _3 )
# 6368 "parser_links.ml"
               : 'efields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nonrec_row_var) in
    Obj.repr(
# 1119 "parser_links.mly"
                                                               ( [], _2 )
# 6375 "parser_links.ml"
               : 'efields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'kinded_nonrec_row_var) in
    Obj.repr(
# 1120 "parser_links.mly"
                                                               ( [], _2 )
# 6382 "parser_links.ml"
               : 'efields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'efield) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'efields) in
    Obj.repr(
# 1121 "parser_links.mly"
                                                               ( _1 :: fst _3, snd _3 )
# 6390 "parser_links.ml"
               : 'efields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'effect_label) in
    Obj.repr(
# 1124 "parser_links.mly"
                                                               ( _1, `Present `Unit )
# 6397 "parser_links.ml"
               : 'efield))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'effect_label) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fieldspec) in
    Obj.repr(
# 1125 "parser_links.mly"
                                                               ( _1, _2 )
# 6405 "parser_links.ml"
               : 'efield))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1128 "parser_links.mly"
                                                               ( _1 )
# 6412 "parser_links.ml"
               : 'effect_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1129 "parser_links.mly"
                                                               ( _1 )
# 6419 "parser_links.ml"
               : 'effect_label))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.datatype) in
    Obj.repr(
# 1132 "parser_links.mly"
                                                               ( `Present _2 )
# 6426 "parser_links.ml"
               : 'fieldspec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.datatype) in
    Obj.repr(
# 1133 "parser_links.mly"
                                                               ( `Present _3 )
# 6433 "parser_links.ml"
               : 'fieldspec))
; (fun __caml_parser_env ->
    Obj.repr(
# 1134 "parser_links.mly"
                                                               ( `Absent )
# 6439 "parser_links.ml"
               : 'fieldspec))
; (fun __caml_parser_env ->
    Obj.repr(
# 1135 "parser_links.mly"
                                                               ( `Absent )
# 6445 "parser_links.ml"
               : 'fieldspec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1136 "parser_links.mly"
                                                               ( `Var (_2, (`Unl, `Any), `Rigid) )
# 6452 "parser_links.ml"
               : 'fieldspec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1137 "parser_links.mly"
                                                               ( `Var (_2, (`Unl, `Any), `Flexible) )
# 6459 "parser_links.ml"
               : 'fieldspec))
; (fun __caml_parser_env ->
    Obj.repr(
# 1138 "parser_links.mly"
                                                               ( fresh_rigid_presence_variable (`Unl, `Any) )
# 6465 "parser_links.ml"
               : 'fieldspec))
; (fun __caml_parser_env ->
    Obj.repr(
# 1139 "parser_links.mly"
                                                               ( fresh_presence_variable (`Unl, `Any) )
# 6471 "parser_links.ml"
               : 'fieldspec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1142 "parser_links.mly"
                                                               ( `Open (_1, (`Unl, `Any), `Rigid) )
# 6478 "parser_links.ml"
               : 'nonrec_row_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1143 "parser_links.mly"
                                                               ( `Open (_1, (`Unl, `Any), `Flexible) )
# 6485 "parser_links.ml"
               : 'nonrec_row_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 1144 "parser_links.mly"
                                                               ( fresh_rigid_row_variable (`Unl, `Any) )
# 6491 "parser_links.ml"
               : 'nonrec_row_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 1145 "parser_links.mly"
                                                               ( fresh_row_variable (`Unl, `Any) )
# 6497 "parser_links.ml"
               : 'nonrec_row_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonrec_row_var) in
    Obj.repr(
# 1152 "parser_links.mly"
                                                               ( _1 )
# 6504 "parser_links.ml"
               : 'row_var))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'vfields) in
    Obj.repr(
# 1153 "parser_links.mly"
                                                               ( `Recursive (_3, _5) )
# 6512 "parser_links.ml"
               : 'row_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'nonrec_row_var) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'subkind) in
    Obj.repr(
# 1156 "parser_links.mly"
                                                               ( attach_row_subkind (pos()) (_1, _2) )
# 6520 "parser_links.ml"
               : 'kinded_nonrec_row_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'row_var) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'subkind) in
    Obj.repr(
# 1159 "parser_links.mly"
                                                               ( attach_row_subkind (pos()) (_1, _2) )
# 6528 "parser_links.ml"
               : 'kinded_row_var))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.regex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'regex_flags_opt) in
    Obj.repr(
# 1165 "parser_links.mly"
                                                                                 ( (`Regex _2, pos()), _3 )
# 6536 "parser_links.ml"
               : 'regex))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'regex_flags_opt) in
    Obj.repr(
# 1166 "parser_links.mly"
                                                                                 ( (`Regex (`Simply ""), pos()), _2 )
# 6543 "parser_links.ml"
               : 'regex))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.regex) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'regex_replace) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'regex_flags_opt) in
    Obj.repr(
# 1167 "parser_links.mly"
                                                                                 ( (`Regex (`Replace (_2, _4)), pos()), `RegexReplace :: _5 )
# 6552 "parser_links.ml"
               : 'regex))
; (fun __caml_parser_env ->
    Obj.repr(
# 1170 "parser_links.mly"
                                                               ([])
# 6558 "parser_links.ml"
               : 'regex_flags_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1171 "parser_links.mly"
                                                               (parseRegexFlags _1)
# 6565 "parser_links.ml"
               : 'regex_flags_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1174 "parser_links.mly"
                                                               ( `Literal "")
# 6571 "parser_links.ml"
               : 'regex_replace))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1175 "parser_links.mly"
                                                               ( `Literal _1)
# 6578 "parser_links.ml"
               : 'regex_replace))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 1176 "parser_links.mly"
                                                               ( `Splice (`Block _1, pos ()) )
# 6585 "parser_links.ml"
               : 'regex_replace))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char*char) in
    Obj.repr(
# 1179 "parser_links.mly"
                                                               ( `Range _1 )
# 6592 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1180 "parser_links.mly"
                                                               ( `Simply _1 )
# 6599 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1181 "parser_links.mly"
                                                               ( `Quote (`Simply _1) )
# 6606 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    Obj.repr(
# 1182 "parser_links.mly"
                                                               ( `Any )
# 6612 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    Obj.repr(
# 1183 "parser_links.mly"
                                                               ( `StartAnchor )
# 6618 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    Obj.repr(
# 1184 "parser_links.mly"
                                                               ( `EndAnchor )
# 6624 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.regex) in
    Obj.repr(
# 1185 "parser_links.mly"
                                                               ( `Group _2 )
# 6631 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.regex) in
    Obj.repr(
# 1186 "parser_links.mly"
                                                               ( `Repeat (Regex.Star, _1) )
# 6638 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.regex) in
    Obj.repr(
# 1187 "parser_links.mly"
                                                               ( `Repeat (Regex.Plus, _1) )
# 6645 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.regex) in
    Obj.repr(
# 1188 "parser_links.mly"
                                                               ( `Repeat (Regex.Question, _1) )
# 6652 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 1189 "parser_links.mly"
                                                               ( `Splice (`Block _1, pos ()) )
# 6659 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.regex list) in
    Obj.repr(
# 1192 "parser_links.mly"
                                                               ( `Seq _1 )
# 6666 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.regex list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.regex) in
    Obj.repr(
# 1193 "parser_links.mly"
                                                               ( `Alternate (`Seq _1, _3) )
# 6674 "parser_links.ml"
               : Sugartypes.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.regex) in
    Obj.repr(
# 1196 "parser_links.mly"
                                                               ( [_1] )
# 6681 "parser_links.ml"
               : Sugartypes.regex list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.regex) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.regex list) in
    Obj.repr(
# 1197 "parser_links.mly"
                                                               ( _1 :: _2 )
# 6689 "parser_links.ml"
               : Sugartypes.regex list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typed_pattern) in
    Obj.repr(
# 1203 "parser_links.mly"
                                                            ( _1 )
# 6696 "parser_links.ml"
               : Sugartypes.pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typed_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primary_datatype) in
    Obj.repr(
# 1204 "parser_links.mly"
                                                            ( (`HasType (_1, datatype _3), pos()) )
# 6704 "parser_links.ml"
               : Sugartypes.pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cons_pattern) in
    Obj.repr(
# 1207 "parser_links.mly"
                                                            ( _1 )
# 6711 "parser_links.ml"
               : 'typed_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cons_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 1208 "parser_links.mly"
                                                            ( `As ((fst _3, None, snd _3), _1), pos() )
# 6719 "parser_links.ml"
               : 'typed_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_pattern) in
    Obj.repr(
# 1211 "parser_links.mly"
                                                            ( _1 )
# 6726 "parser_links.ml"
               : 'cons_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constructor_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_pattern) in
    Obj.repr(
# 1212 "parser_links.mly"
                                                            ( `Cons (_1, _3), pos() )
# 6734 "parser_links.ml"
               : 'cons_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negative_pattern) in
    Obj.repr(
# 1215 "parser_links.mly"
                                                            ( _1 )
# 6741 "parser_links.ml"
               : 'constructor_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1216 "parser_links.mly"
                                                            ( `Variant (_1, None), pos() )
# 6748 "parser_links.ml"
               : 'constructor_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parenthesized_pattern) in
    Obj.repr(
# 1217 "parser_links.mly"
                                                            ( `Variant (_1, Some _2), pos() )
# 6756 "parser_links.ml"
               : 'constructor_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1220 "parser_links.mly"
                                                            ( [_1] )
# 6763 "parser_links.ml"
               : 'constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructors) in
    Obj.repr(
# 1221 "parser_links.mly"
                                                            ( _1 :: _3 )
# 6771 "parser_links.ml"
               : 'constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_pattern) in
    Obj.repr(
# 1224 "parser_links.mly"
                                                            ( _1 )
# 6778 "parser_links.ml"
               : 'negative_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1225 "parser_links.mly"
                                                            ( `Negative [_2], pos() )
# 6785 "parser_links.ml"
               : 'negative_pattern))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'constructors) in
    Obj.repr(
# 1226 "parser_links.mly"
                                                            ( `Negative _3, pos() )
# 6792 "parser_links.ml"
               : 'negative_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 1229 "parser_links.mly"
                                                            ( `Tuple [], pos() )
# 6798 "parser_links.ml"
               : 'parenthesized_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.pattern) in
    Obj.repr(
# 1230 "parser_links.mly"
                                                            ( _2 )
# 6805 "parser_links.ml"
               : 'parenthesized_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Sugartypes.pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'patterns) in
    Obj.repr(
# 1231 "parser_links.mly"
                                                            ( `Tuple (_2 :: _4), pos() )
# 6813 "parser_links.ml"
               : 'parenthesized_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'labeled_patterns) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Sugartypes.pattern) in
    Obj.repr(
# 1232 "parser_links.mly"
                                                            ( `Record (_2, Some _4), pos() )
# 6821 "parser_links.ml"
               : 'parenthesized_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'labeled_patterns) in
    Obj.repr(
# 1233 "parser_links.mly"
                                                            ( `Record (_2, None), pos() )
# 6828 "parser_links.ml"
               : 'parenthesized_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1236 "parser_links.mly"
                                                            ( `Variable (_1, None, pos()), pos() )
# 6835 "parser_links.ml"
               : 'primary_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 1237 "parser_links.mly"
                                                            ( `Any, pos() )
# 6841 "parser_links.ml"
               : 'primary_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.constant * Sugartypes.position) in
    Obj.repr(
# 1238 "parser_links.mly"
                                                            ( let c, p = _1 in `Constant c, p )
# 6848 "parser_links.ml"
               : 'primary_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 1239 "parser_links.mly"
                                                            ( `Nil, pos() )
# 6854 "parser_links.ml"
               : 'primary_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patterns) in
    Obj.repr(
# 1240 "parser_links.mly"
                                                            ( `List _2, pos() )
# 6861 "parser_links.ml"
               : 'primary_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parenthesized_pattern) in
    Obj.repr(
# 1241 "parser_links.mly"
                                                            ( _1 )
# 6868 "parser_links.ml"
               : 'primary_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.pattern) in
    Obj.repr(
# 1244 "parser_links.mly"
                                                            ( [_1] )
# 6875 "parser_links.ml"
               : 'patterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patterns) in
    Obj.repr(
# 1245 "parser_links.mly"
                                                            ( _1 :: _3 )
# 6883 "parser_links.ml"
               : 'patterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'record_label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Sugartypes.pattern) in
    Obj.repr(
# 1248 "parser_links.mly"
                                                            ( [(_1, _3)] )
# 6891 "parser_links.ml"
               : 'labeled_patterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'record_label) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Sugartypes.pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'labeled_patterns) in
    Obj.repr(
# 1249 "parser_links.mly"
                                                            ( (_1, _3) :: _5 )
# 6900 "parser_links.ml"
               : 'labeled_patterns))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patterns) in
    Obj.repr(
# 1252 "parser_links.mly"
                                                            ( _2 )
# 6907 "parser_links.ml"
               : 'multi_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 1253 "parser_links.mly"
                                                            ( [] )
# 6913 "parser_links.ml"
               : 'multi_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multi_args) in
    Obj.repr(
# 1256 "parser_links.mly"
                                                            ( [_1] )
# 6920 "parser_links.ml"
               : 'arg_lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'multi_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg_lists) in
    Obj.repr(
# 1257 "parser_links.mly"
                                                            ( _1 :: _2 )
# 6928 "parser_links.ml"
               : 'arg_lists))
(* Entry just_datatype *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry interactive *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let just_datatype (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Sugartypes.datatype)
let interactive (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Sugartypes.sentence)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Sugartypes.binding list * Sugartypes.phrase option)
