typename RecursiveCow(r) = Comp ({Cow:RecursiveCow(r)}, r);

sig cow : RecursiveCow
fun cow() {(do Cow) ()}

sig eat : RecursiveCow(r) ~> r
fun eat(m) {
  handle (m) {
    case Cow(k)    -> k(cow)
    case Return(x) -> x
  }
}

sig go : () ~> ()
fun go() {eat(cow)}
