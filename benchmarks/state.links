# Microbenchmark stateful counting (Handlers)

sig get : () {Get:s|_}-> s
fun get() {do Get}

sig put : (s) {Put:(s) {}-> ()|_}-> ()
fun put(s) {do Put(s)}

fun countAbs() {
    var i = get();
    if (i == 0) { i }
    else { put(i - 1); countAbs() }
}

sig evalState : (s) -> (() {Get:s,Put:(s) {}-> ()}~> a) {}~> a
fun evalState(s)(m) {
  var h = handle(m) {
           case Get(k)    -> fun(s) { k(s)(s) }
           case Put(s,k)  -> fun(_) { k(())(s) }
           case Return(x) -> fun(_) { x }
          };
  h(s)
}

fun b(n) {
    var x = evalState(n)(countAbs);
    x
}

fun id(x) { x }

print(intToString(b(10000000)))
