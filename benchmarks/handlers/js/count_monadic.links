# Microbenchmark monadic stateful counting

typename State (s,a) = (s) {hear:Int}~> (a,s);

# state monad
sig runState : (State (s,a), s) -%-> (a,s)
fun runState(m, s) { m(s) }

sig evalState : (State(s,a), s) -%-> a
fun evalState(m, s) {
    var (a,_) = runState(m,s);
    a
}

infixl 1 >>=;
sig >>= : (State (s,a), (a) -%-> State(s,b)) -%-> State (s,b)
op m >>= k {
   fun (s1) {
       var (v,s2) = m (s1);
       runState (k(v), s2)
   }
}

sig return : (a) -> State (s,a)
fun return(a) { fun (s) { (a,s) } }

sig get : () -> State(s,s)
fun get() { fun(s) { (s,s) } }

sig put : (s) -> State(s,())
fun put(s) { fun(_) { ((), s) } }

fun count() {
    get()
        >>=
          fun(n) {
             if (n == 0) return(n)
             else put(n-1) >>= fun(_) { count() } }
}

fun b(n) {
    var t0 = clientTime();
    var r = evalState(count(), n);
    var t1 = clientTime();
    ignore $ domSetPropertyFromRef(getNodeById("result"), "value", intToString(r));
    ignore $ domSetPropertyFromRef(getNodeById("elapsed"), "value", intToString(t1 - t0));
    domRemoveAttributeFromRef(getNodeById("run"), "disabled")
}

fun proc() client {
  var n = recv();
  b(n);
  proc()
}

fun start(worker, inputSize) client {
  var n = stringToInt(inputSize);
  ignore $ domSetPropertyFromRef(getNodeById("run"), "disabled", "disabled");
  ignore $ domSetPropertyFromRef(getNodeById("result"), "value", "");
  ignore $ domSetPropertyFromRef(getNodeById("elapsed"), "value", "");
  worker ! n
}

# Page
fun mainPage(_) {
  var p = spawnClient { proc() };
  page
    <html>
      <body>
        <form l:onsubmit="{start(p, inputSize)}">
          <table border="0" cellspacing="5">
            <tr>
              <td>Problem size:</td>
              <td><input type="text" l:name="inputSize" value="100000" /></td>
            </tr>
            <tr>
              <td>Result:</td>
              <td><input type="text" id="result" readonly="readonly" value="" /></td>
            </tr>
            <tr>
              <td>Elapsed:</td>
              <td><input type="text" id="elapsed" readonly="readonly" value="" /></td>
            </tr>
            <tr>
             <td colspan="2"><input type="submit" id="run" value="Run" /></td>
            </tr>
          </table>
        </form>
      </body>
    </html>
}


fun main() {
  addRoute("/", mainPage);
  servePages()
}

main()
