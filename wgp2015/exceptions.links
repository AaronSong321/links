# an integer division operation
#sig div : (Int, Int) {}-> Int
fun div(x, y) {do Div(x, y)}

# raise an exception
sig raise : (a) {Exception:(a) {}-> Zero|_}~> b
fun raise(e) {switch (do Exception(e)) { }}

# interpret div as division
open handler divideHandler(m) {
  case Return(x)    -> x
  case Div(x, y, k) -> k (x / y)
}

# raise an exception on attempting to divide by zero 
open handler checkZero(m) {
  case Return(x)    -> x
  case Div(x, y, k) ->
    if (y == 0) {
      raise(DivideByZero)
    } else {
      k (x `div` y)
    }
}

# exception handler for DivideByZero exceptions
open handler divideByZeroHandler(m) {
  case Exception(DivideByZero,_) -> Left("Cannot divide by zero!")
  case Return(x)                 -> Right(x)
}

fun divUnchecked(m) {divideHandler(m)()}
fun divChecked(m) {divideByZeroHandler(divideHandler(checkZero(m)))()}

fun foo(x,y,z)() {
  x*(y `div` z)
}

fun test1() {divUnchecked(foo(4,2,0))}
fun test2() {divChecked(foo(4,2,0))}
